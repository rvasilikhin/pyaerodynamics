from scipy import integrate
import numpy as np


def C_x43(m):

    """
    Функция возвращает значение лобового сопротивления, согласно функции
    1943-его года, принимая в качестве входных параметров число Маха.
    """

    M = [0, 0.4, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1, 1.05, 1.10, 1.15, 1.20, 1.40, 1.60, 1.80, 2, 2.20, 2.40, 2.60, 2.80, 3.00, 3.20, 3.40, 3.60, 3.80, 4, 4.40, 4.80, 5]
    C_x = [0.152, 0.154, 0.155, 0.156, 0.164, 0.175, 0.196, 0.243, 0.327, 0.36, 0.374, 0.381, 0.384, 0.371, 0.355, 0.335, 0.32, 0.306, 0.292, 0.282, 0.273, 0.265, 0.262, 0.259, 0.257, 0.256, 0.255, 0.255, 0.254, 0.254]
    
    return np.interp(m, M, C_x)

def Re(v, d, h):

    """
    Функция возвращает число Рейнольдса, принимая в качестве входных параметров:
        1) Скорость в м/с.\n
        2) Характерный размер в м.\n
        3) Высоту полета в м.
    """

    return v*(d)/(Nu(T(h)))

def Mah(v, h):

    """
    Функция возвращает число Маха, принимая в качестве аргументов:
        1) Скорость летательного аппарата в м/с.\n
        2) Высоту полета в метрах.
    """

    return v/A(h)

### Начало параметров стандартной атмосферы

def P(h):

    """
    Функция возвращает значение давления воздуха в Па,
    принимая в качестве входных параметров высоту полета в метрах.
    """

    H = [-2e3, -1.95e3, -1.9e3, -1.85e3, -1.8e3, -1.75e3, -1.7e3, -1.65e3, -1.6e3, -1.55e3, -1.5e3, -1.45e3, -1.4e3, -1.35e3, -1.3e3, -1.25e3, -1.2e3, -1.15e3, -1.1e3, -1.05e3, -1e3, -950, -900, -850, -800, -750, -700, -650, -600, -550, -500, -450, -400, -350, -300, -250, -200, -150, -100, -50, 0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1e3, 1.05e3, 1.1e3, 1.15e3, 1.2e3, 1.25e3, 1.3e3, 1.35e3, 1.4e3, 1.45e3, 1.5e3, 1.55e3, 1.6e3, 1.65e3, 1.7e3, 1.75e3, 1.8e3, 1.85e3, 1.9e3, 1.95e3, 2e3, 2.05e3, 2.1e3, 2.15e3, 2.2e3, 2.25e3, 2.3e3, 2.35e3, 2.4e3, 2.45e3, 2.5e3, 2.55e3, 2.6e3, 2.65e3, 2.7e3, 2.75e3, 2.8e3, 2.85e3, 2.9e3, 2.95e3, 3e3, 3.05e3, 3.1e3, 3.15e3, 3.2e3, 3.25e3, 3.3e3, 3.35e3, 3.4e3, 3.45e3, 3.5e3, 3.55e3, 3.6e3, 3.65e3, 3.7e3, 3.75e3, 3.8e3, 3.85e3, 3.9e3, 3.95e3, 4e3, 4.05e3, 4.1e3, 4.15e3, 4.2e3, 4.25e3, 4.3e3, 4.35e3, 4.4e3, 4.45e3, 4.5e3, 4.55e3, 4.6e3, 4.65e3, 4.7e3, 4.75e3, 4.8e3, 4.85e3, 4.9e3, 4.95e3, 5e3, 5.05e3, 5.1e3, 5.15e3, 5.2e3, 5.25e3, 5.3e3, 5.35e3, 5.4e3, 5.45e3, 5.5e3, 5.55e3, 5.6e3, 5.65e3, 5.7e3, 5.75e3, 5.8e3, 5.85e3, 5.9e3, 5.95e3, 6e3, 6.05e3, 6.1e3, 6.15e3, 6.2e3, 6.25e3, 6.3e3, 6.35e3, 6.4e3, 6.45e3, 6.5e3, 6.55e3, 6.6e3, 6.65e3, 6.7e3, 6.75e3, 6.8e3, 6.85e3, 6.9e3, 6.95e3, 7e3, 7.05e3, 7.1e3, 7.15e3, 7.2e3, 7.25e3, 7.3e3, 7.35e3, 7.4e3, 7.45e3, 7.5e3, 7.55e3, 7.6e3, 7.65e3, 7.7e3, 7.75e3, 7.8e3, 7.85e3, 7.9e3, 7.95e3, 8e3, 8.05e3, 8.1e3, 8.15e3, 8.2e3, 8.25e3, 8.3e3, 8.35e3, 8.4e3, 8.45e3, 8.5e3, 8.55e3, 8.6e3, 8.65e3, 8.7e3, 8.75e3, 8.8e3, 8.85e3, 8.9e3, 8.95e3, 9e3, 9.05e3, 9.1e3, 9.15e3, 9.2e3, 9.25e3, 9.3e3, 9.35e3, 9.4e3, 9.45e3, 9.5e3, 9.55e3, 9.6e3, 9.65e3, 9.7e3, 9.75e3, 9.8e3, 9.85e3, 9.9e3, 9.95e3, 1e4, 1.005e4, 1.01e4, 1.015e4, 1.02e4, 1.025e4, 1.03e4, 1.035e4, 1.04e4, 1.045e4, 1.05e4, 1.055e4, 1.06e4, 1.065e4, 1.07e4, 1.075e4, 1.08e4, 1.085e4, 1.09e4, 1.095e4, 1.1e4, 1.105e4, 1.11e4, 1.115e4, 1.12e4, 1.125e4, 1.13e4, 1.135e4, 1.14e4, 1.145e4, 1.15e4, 1.155e4, 1.16e4, 1.165e4, 1.17e4, 1.175e4, 1.18e4, 1.185e4, 1.19e4, 1.195e4, 1.2e4, 1.205e4, 1.21e4, 1.215e4, 1.22e4, 1.225e4, 1.23e4, 1.235e4, 1.24e4, 1.245e4, 1.25e4, 1.255e4, 1.26e4, 1.265e4, 1.27e4, 1.275e4, 1.28e4, 1.285e4, 1.29e4, 1.295e4, 1.3e4, 1.305e4, 1.31e4, 1.315e4, 1.32e4, 1.325e4, 1.33e4, 1.335e4, 1.34e4, 1.345e4, 1.35e4, 1.355e4, 1.36e4, 1.365e4, 1.37e4, 1.375e4, 1.38e4, 1.385e4, 1.39e4, 1.395e4, 1.4e4, 1.405e4, 1.41e4, 1.415e4, 1.42e4, 1.425e4, 1.43e4, 1.435e4, 1.44e4, 1.445e4, 1.45e4, 1.455e4, 1.46e4, 1.465e4, 1.47e4, 1.475e4, 1.48e4, 1.485e4, 1.49e4, 1.495e4, 1.5e4, 1.505e4, 1.51e4, 1.515e4, 1.52e4, 1.525e4, 1.53e4, 1.535e4, 1.54e4, 1.545e4, 1.55e4, 1.555e4, 1.56e4, 1.565e4, 1.57e4, 1.575e4, 1.58e4, 1.585e4, 1.59e4, 1.595e4, 1.6e4, 1.605e4, 1.61e4, 1.615e4, 1.62e4, 1.625e4, 1.63e4, 1.635e4, 1.64e4, 1.645e4, 1.65e4, 1.655e4, 1.66e4, 1.665e4, 1.67e4, 1.675e4, 1.68e4, 1.685e4, 1.69e4, 1.695e4, 1.7e4, 1.705e4, 1.71e4, 1.715e4, 1.72e4, 1.725e4, 1.73e4, 1.735e4, 1.74e4, 1.745e4, 1.75e4, 1.755e4, 1.76e4, 1.765e4, 1.77e4, 1.775e4, 1.78e4, 1.785e4, 1.79e4, 1.795e4, 1.8e4, 1.805e4, 1.81e4, 1.815e4, 1.82e4, 1.825e4, 1.83e4, 1.835e4, 1.84e4, 1.845e4, 1.85e4, 1.855e4, 1.86e4, 1.865e4, 1.87e4, 1.875e4, 1.88e4, 1.885e4, 1.89e4, 1.895e4, 1.9e4, 1.905e4, 1.91e4, 1.915e4, 1.92e4, 1.925e4, 1.93e4, 1.935e4, 1.94e4, 1.945e4, 1.95e4, 1.955e4, 1.96e4, 1.965e4, 1.97e4, 1.975e4, 1.98e4, 1.985e4, 1.99e4, 1.995e4, 2e4, 2.005e4, 2.01e4, 2.015e4, 2.02e4, 2.025e4, 2.03e4, 2.035e4, 2.04e4, 2.045e4, 2.05e4, 2.055e4, 2.06e4, 2.065e4, 2.07e4, 2.075e4, 2.08e4, 2.085e4, 2.09e4, 2.095e4, 2.1e4, 2.105e4, 2.11e4, 2.115e4, 2.12e4, 2.125e4, 2.13e4, 2.135e4, 2.14e4, 2.145e4, 2.15e4, 2.155e4, 2.16e4, 2.165e4, 2.17e4, 2.175e4, 2.18e4, 2.185e4, 2.19e4, 2.195e4, 2.2e4, 2.205e4, 2.21e4, 2.215e4, 2.22e4, 2.225e4, 2.23e4, 2.235e4, 2.24e4, 2.245e4, 2.25e4, 2.255e4, 2.26e4, 2.265e4, 2.27e4, 2.275e4, 2.28e4, 2.285e4, 2.29e4, 2.295e4, 2.3e4, 2.305e4, 2.31e4, 2.315e4, 2.32e4, 2.325e4, 2.33e4, 2.335e4, 2.34e4, 2.345e4, 2.35e4, 2.355e4, 2.36e4, 2.365e4, 2.37e4, 2.375e4, 2.38e4, 2.385e4, 2.39e4, 2.395e4, 2.4e4, 2.405e4, 2.41e4, 2.415e4, 2.42e4, 2.425e4, 2.43e4, 2.435e4, 2.44e4, 2.445e4, 2.45e4, 2.455e4, 2.46e4, 2.465e4, 2.47e4, 2.475e4, 2.48e4, 2.485e4, 2.49e4, 2.495e4, 2.5e4, 2.505e4, 2.51e4, 2.515e4, 2.52e4, 2.525e4, 2.53e4, 2.535e4, 2.54e4, 2.545e4, 2.55e4, 2.555e4, 2.56e4, 2.565e4, 2.57e4, 2.575e4, 2.58e4, 2.585e4, 2.59e4, 2.595e4, 2.6e4, 2.605e4, 2.61e4, 2.615e4, 2.62e4, 2.625e4, 2.63e4, 2.635e4, 2.64e4, 2.645e4, 2.65e4, 2.655e4, 2.66e4, 2.665e4, 2.67e4, 2.675e4, 2.68e4, 2.685e4, 2.69e4, 2.695e4, 2.7e4, 2.705e4, 2.71e4, 2.715e4, 2.72e4, 2.725e4, 2.73e4, 2.735e4, 2.74e4, 2.745e4, 2.75e4, 2.755e4, 2.76e4, 2.765e4, 2.77e4, 2.775e4, 2.78e4, 2.785e4, 2.79e4, 2.795e4, 2.8e4, 2.805e4, 2.81e4, 2.815e4, 2.82e4, 2.825e4, 2.83e4, 2.835e4, 2.84e4, 2.845e4, 2.85e4, 2.855e4, 2.86e4, 2.865e4, 2.87e4, 2.875e4, 2.88e4, 2.885e4, 2.89e4, 2.895e4, 2.9e4, 2.905e4, 2.91e4, 2.915e4, 2.92e4, 2.925e4, 2.93e4, 2.935e4, 2.94e4, 2.945e4, 2.95e4, 2.955e4, 2.96e4, 2.965e4, 2.97e4, 2.975e4, 2.98e4, 2.985e4, 2.99e4, 2.995e4, 3e4, 3.005e4, 3.01e4, 3.015e4, 3.02e4, 3.025e4, 3.03e4, 3.035e4, 3.04e4, 3.045e4, 3.05e4, 3.055e4, 3.06e4, 3.065e4, 3.07e4, 3.075e4, 3.08e4, 3.085e4, 3.09e4, 3.095e4, 3.1e4, 3.105e4, 3.11e4, 3.115e4, 3.12e4, 3.125e4, 3.13e4, 3.135e4, 3.14e4, 3.145e4, 3.15e4, 3.155e4, 3.16e4, 3.165e4, 3.17e4, 3.175e4, 3.18e4, 3.185e4, 3.19e4, 3.195e4, 3.2e4, 3.21e4, 3.22e4, 3.23e4, 3.24e4, 3.25e4, 3.26e4, 3.27e4, 3.28e4, 3.29e4, 3.3e4, 3.31e4, 3.32e4, 3.33e4, 3.34e4, 3.35e4, 3.36e4, 3.37e4, 3.38e4, 3.39e4, 3.4e4, 3.41e4, 3.42e4, 3.43e4, 3.44e4, 3.45e4, 3.46e4, 3.47e4, 3.48e4, 3.49e4, 3.5e4, 3.51e4, 3.52e4, 3.53e4, 3.54e4, 3.55e4, 3.56e4, 3.57e4, 3.58e4, 3.59e4, 3.6e4, 3.61e4, 3.62e4, 3.63e4, 3.64e4, 3.65e4, 3.66e4, 3.67e4, 3.68e4, 3.69e4, 3.7e4, 3.71e4, 3.72e4, 3.73e4, 3.74e4, 3.75e4, 3.76e4, 3.77e4, 3.78e4, 3.79e4, 3.8e4, 3.81e4, 3.82e4, 3.83e4, 3.84e4, 3.85e4, 3.86e4, 3.87e4, 3.88e4, 3.89e4, 3.9e4, 3.91e4, 3.92e4, 3.93e4, 3.94e4, 3.95e4, 3.96e4, 3.97e4, 3.98e4, 3.99e4, 4e4, 4.01e4, 4.02e4, 4.03e4, 4.04e4, 4.05e4, 4.06e4, 4.07e4, 4.08e4, 4.09e4, 4.1e4, 4.11e4, 4.12e4, 4.13e4, 4.14e4, 4.15e4, 4.16e4, 4.17e4, 4.18e4, 4.19e4, 4.2e4, 4.21e4, 4.22e4, 4.23e4, 4.24e4, 4.25e4, 4.26e4, 4.27e4, 4.28e4, 4.29e4, 4.3e4, 4.31e4, 4.32e4, 4.33e4, 4.34e4, 4.35e4, 4.36e4, 4.37e4, 4.38e4, 4.39e4, 4.4e4, 4.41e4, 4.42e4, 4.43e4, 4.44e4, 4.45e4, 4.46e4, 4.47e4, 4.48e4, 4.49e4, 4.5e4, 4.51e4, 4.52e4, 4.53e4, 4.54e4, 4.55e4, 4.56e4, 4.57e4, 4.58e4, 4.59e4, 4.6e4, 4.61e4, 4.62e4, 4.63e4, 4.64e4, 4.65e4, 4.66e4, 4.67e4, 4.68e4, 4.69e4, 4.7e4, 4.71e4, 4.72e4, 4.73e4, 4.74e4, 4.75e4, 4.76e4, 4.77e4, 4.78e4, 4.79e4, 4.8e4, 4.81e4, 4.82e4, 4.83e4, 4.84e4, 4.85e4, 4.86e4, 4.87e4, 4.88e4, 4.89e4, 4.9e4, 4.91e4, 4.92e4, 4.93e4, 4.94e4, 4.95e4, 4.96e4, 4.97e4, 4.98e4, 4.99e4, 5e4, 5.01e4, 5.02e4, 5.03e4, 5.04e4, 5.05e4, 5.06e4, 5.07e4, 5.08e4, 5.09e4, 5.1e4, 5.12e4, 5.14e4, 5.16e4, 5.18e4, 5.2e4, 5.22e4, 5.24e4, 5.26e4, 5.28e4, 5.3e4, 5.32e4, 5.34e4, 5.36e4, 5.38e4, 5.4e4, 5.42e4, 5.44e4, 5.46e4, 5.48e4, 5.5e4, 5.52e4, 5.54e4, 5.56e4, 5.58e4, 5.6e4, 5.62e4, 5.64e4, 5.66e4, 5.68e4, 5.7e4, 5.72e4, 5.74e4, 5.76e4, 5.78e4, 5.8e4, 5.82e4, 5.84e4, 5.86e4, 5.88e4, 5.9e4, 5.92e4, 5.94e4, 5.96e4, 5.98e4, 6e4, 6.02e4, 6.04e4, 6.06e4, 6.08e4, 6.1e4, 6.12e4, 6.14e4, 6.16e4, 6.18e4, 6.2e4, 6.22e4, 6.24e4, 6.26e4, 6.28e4, 6.3e4, 6.32e4, 6.34e4, 6.36e4, 6.38e4, 6.4e4, 6.42e4, 6.44e4, 6.46e4, 6.48e4, 6.5e4, 6.52e4, 6.54e4, 6.56e4, 6.58e4, 6.6e4, 6.62e4, 6.64e4, 6.66e4, 6.68e4, 6.7e4, 6.72e4, 6.74e4, 6.76e4, 6.78e4, 6.8e4, 6.82e4, 6.84e4, 6.86e4, 6.88e4, 6.9e4, 6.92e4, 6.94e4, 6.96e4, 6.98e4, 7e4, 7.02e4, 7.04e4, 7.06e4, 7.08e4, 7.1e4, 7.12e4, 7.14e4, 7.16e4, 7.18e4, 7.2e4, 7.22e4, 7.24e4, 7.26e4, 7.28e4, 7.3e4, 7.32e4, 7.34e4, 7.36e4, 7.38e4, 7.4e4, 7.42e4, 7.44e4, 7.46e4, 7.48e4, 7.5e4, 7.52e4, 7.54e4, 7.56e4, 7.58e4, 7.6e4, 7.62e4, 7.64e4, 7.66e4, 7.68e4, 7.7e4, 7.72e4, 7.74e4, 7.76e4, 7.78e4, 7.8e4, 7.82e4, 7.84e4, 7.86e4, 7.88e4, 7.9e4, 7.92e4, 7.94e4, 7.96e4, 7.98e4, 8e4]
    p = [1.278e5, 1.271e5, 1.263e5, 1.256e5, 1.249e5, 1.242e5, 1.235e5, 1.228e5, 1.221e5, 1.214e5, 1.207e5, 1.2e5, 1.193e5, 1.186e5, 1.18e5, 1.173e5, 1.166e5, 1.159e5, 1.153e5, 1.146e5, 1.139e5, 1.133e5, 1.126e5, 1.12e5, 1.113e5, 1.107e5, 1.1e5, 1.094e5, 1.087e5, 1.081e5, 1.075e5, 1.068e5, 1.062e5, 1.056e5, 1.05e5, 1.044e5, 1.038e5, 1.031e5, 1.025e5, 1.019e5, 1.013e5, 1.007e5, 1.001e5, 9.954e4, 9.895e4, 9.836e4, 9.777e4, 9.719e4, 9.661e4, 9.604e4, 9.546e4, 9.489e4, 9.432e4, 9.376e4, 9.319e4, 9.263e4, 9.208e4, 9.152e4, 9.097e4, 9.042e4, 8.988e4, 8.933e4, 8.879e4, 8.825e4, 8.772e4, 8.719e4, 8.665e4, 8.613e4, 8.56e4, 8.508e4, 8.456e4, 8.404e4, 8.353e4, 8.302e4, 8.251e4, 8.2e4, 8.149e4, 8.099e4, 8.049e4, 8e4, 7.95e4, 7.901e4, 7.852e4, 7.803e4, 7.755e4, 7.707e4, 7.659e4, 7.611e4, 7.563e4, 7.516e4, 7.469e4, 7.422e4, 7.376e4, 7.33e4, 7.284e4, 7.238e4, 7.192e4, 7.147e4, 7.102e4, 7.057e4, 7.012e4, 6.968e4, 6.923e4, 6.88e4, 6.836e4, 6.792e4, 6.749e4, 6.706e4, 6.663e4, 6.62e4, 6.578e4, 6.536e4, 6.494e4, 6.452e4, 6.411e4, 6.369e4, 6.328e4, 6.287e4, 6.247e4, 6.206e4, 6.166e4, 6.126e4, 6.085e4, 6.047e4, 6.007e4, 5.968e4, 5.929e4, 5.89e4, 5.852e4, 5.813e4, 5.775e4, 5.737e4, 5.7e4, 5.662e4, 5.625e4, 5.588e4, 5.551e4, 5.514e4, 5.477e4, 5.441e4, 5.405e4, 5.369e4, 5.333e4, 5.298e4, 5.262e4, 5.227e4, 5.192e4, 5.157e4, 5.123e4, 5.088e4, 5.054e4, 5.02e4, 4.986e4, 4.952e4, 4.919e4, 4.886e4, 4.852e4, 4.819e4, 4.787e4, 4.754e4, 4.722e4, 4.69e4, 4.658e4, 4.626e4, 4.594e4, 4.562e4, 4.531e4, 4.5e4, 4.469e4, 4.438e4, 4.408e4, 4.377e4, 4.347e4, 4.317e4, 4.287e4, 4.257e4, 4.227e4, 4.198e4, 4.169e4, 4.139e4, 4.111e4, 4.082e4, 4.053e4, 4.025e4, 3.996e4, 3.968e4, 3.94e4, 3.912e4, 3.885e4, 3.857e4, 3.83e4, 3.803e4, 3.776e4, 3.749e4, 3.722e4, 3.696e4, 3.669e4, 3.643e4, 3.617e4, 3.591e4, 3.565e4, 3.54e4, 3.514e4, 3.489e4, 3.463e4, 3.438e4, 3.414e4, 3.389e4, 3.364e4, 3.34e4, 3.315e4, 3.291e4, 3.267e4, 3.243e4, 3.22e4, 3.196e4, 3.173e4, 3.149e4, 3.126e4, 3.103e4, 3.08e4, 3.057e4, 3.035e4, 3.012e4, 2.99e4, 2.968e4, 2.946e4, 2.924e4, 2.902e4, 2.88e4, 2.858e4, 2.837e4, 2.816e4, 2.795e4, 2.774e4, 2.753e4, 2.732e4, 2.711e4, 2.691e4, 2.67e4, 2.65e4, 2.63e4, 2.61e4, 2.59e4, 2.57e4, 2.55e4, 2.531e4, 2.512e4, 2.492e4, 2.473e4, 2.454e4, 2.435e4, 2.416e4, 2.398e4, 2.379e4, 2.361e4, 2.342e4, 2.324e4, 2.306e4, 2.288e4, 2.27e4, 2.252e4, 2.235e4, 2.217e4, 2.2e4, 2.183e4, 2.165e4, 2.149e4, 2.132e4, 2.115e4, 2.098e4, 2.082e4, 2.066e4, 2.05e4, 2.034e4, 2.018e4, 2.002e4, 1.986e4, 1.971e4, 1.955e4, 1.94e4, 1.925e4, 1.91e4, 1.895e4, 1.88e4, 1.865e4, 1.851e4, 1.836e4, 1.822e4, 1.808e4, 1.793e4, 1.779e4, 1.765e4, 1.752e4, 1.738e4, 1.724e4, 1.711e4, 1.697e4, 1.684e4, 1.671e4, 1.658e4, 1.645e4, 1.632e4, 1.619e4, 1.607e4, 1.594e4, 1.582e4, 1.569e4, 1.557e4, 1.545e4, 1.533e4, 1.521e4, 1.509e4, 1.497e4, 1.485e4, 1.474e4, 1.462e4, 1.451e4, 1.439e4, 1.428e4, 1.417e4, 1.406e4, 1.395e4, 1.384e4, 1.373e4, 1.363e4, 1.352e4, 1.341e4, 1.331e4, 1.32e4, 1.31e4, 1.3e4, 1.29e4, 1.28e4, 1.27e4, 1.26e4, 1.25e4, 1.24e4, 1.23e4, 1.221e4, 1.211e4, 1.202e4, 1.192e4, 1.183e4, 1.174e4, 1.165e4, 1.155e4, 1.146e4, 1.137e4, 1.129e4, 1.12e4, 1.111e4, 1.102e4, 1.094e4, 1.085e4, 1.077e4, 1.068e4, 1.06e4, 1.052e4, 1.043e4, 1.035e4, 1.027e4, 1.019e4, 1.011e4, 1.003e4, 9.955e3, 9.877e3, 9.8e3, 9.723e3, 9.647e3, 9.572e3, 9.497e3, 9.423e3, 9.349e3, 9.276e3, 9.204e3, 9.132e3, 9.06e3, 8.99e3, 8.919e3, 8.85e3, 8.781e3, 8.712e3, 8.644e3, 8.576e3, 8.509e3, 8.443e3, 8.377e3, 8.312e3, 8.247e3, 8.182e3, 8.118e3, 8.055e3, 7.992e3, 7.93e3, 7.868e3, 7.806e3, 7.745e3, 7.685e3, 7.625e3, 7.565e3, 7.506e3, 7.448e3, 7.389e3, 7.332e3, 7.274e3, 7.218e3, 7.161e3, 7.105e3, 7.05e3, 6.995e3, 6.94e3, 6.886e3, 6.832e3, 6.779e3, 6.726e3, 6.673e3, 6.621e3, 6.57e3, 6.518e3, 6.467e3, 6.417e3, 6.367e3, 6.317e3, 6.268e3, 6.219e3, 6.17e3, 6.122e3, 6.074e3, 6.027e3, 5.98e3, 5.933e3, 5.887e3, 5.841e3, 5.795e3, 5.75e3, 5.705e3, 5.661e3, 5.617e3, 5.573e3, 5.529e3, 5.486e3, 5.443e3, 5.401e3, 5.359e3, 5.317e3, 5.275e3, 5.234e3, 5.194e3, 5.153e3, 5.113e3, 5.073e3, 5.034e3, 4.995e3, 4.956e3, 4.917e3, 4.879e3, 4.841e3, 4.803e3, 4.766e3, 4.729e3, 4.692e3, 4.656e3, 4.62e3, 4.584e3, 4.548e3, 4.513e3, 4.478e3, 4.443e3, 4.409e3, 4.375e3, 4.341e3, 4.307e3, 4.274e3, 4.241e3, 4.208e3, 4.175e3, 4.143e3, 4.111e3, 4.079e3, 4.047e3, 4.016e3, 3.985e3, 3.954e3, 3.924e3, 3.894e3, 3.863e3, 3.834e3, 3.804e3, 3.775e3, 3.746e3, 3.717e3, 3.688e3, 3.66e3, 3.631e3, 3.603e3, 3.576e3, 3.548e3, 3.521e3, 3.494e3, 3.467e3, 3.44e3, 3.414e3, 3.387e3, 3.361e3, 3.336e3, 3.31e3, 3.285e3, 3.259e3, 3.234e3, 3.209e3, 3.185e3, 3.16e3, 3.136e3, 3.112e3, 3.088e3, 3.065e3, 3.041e3, 3.018e3, 2.995e3, 2.972e3, 2.949e3, 2.926e3, 2.904e3, 2.882e3, 2.86e3, 2.838e3, 2.816e3, 2.795e3, 2.773e3, 2.752e3, 2.731e3, 2.71e3, 2.69e3, 2.669e3, 2.649e3, 2.628e3, 2.608e3, 2.589e3, 2.569e3, 2.549e3, 2.53e3, 2.511e3, 2.491e3, 2.472e3, 2.454e3, 2.435e3, 2.416e3, 2.398e3, 2.38e3, 2.362e3, 2.344e3, 2.326e3, 2.308e3, 2.291e3, 2.273e3, 2.256e3, 2.239e3, 2.222e3, 2.205e3, 2.188e3, 2.172e3, 2.155e3, 2.139e3, 2.123e3, 2.107e3, 2.091e3, 2.075e3, 2.059e3, 2.044e3, 2.028e3, 2.013e3, 1.998e3, 1.982e3, 1.967e3, 1.953e3, 1.938e3, 1.923e3, 1.909e3, 1.894e3, 1.88e3, 1.866e3, 1.852e3, 1.838e3, 1.824e3, 1.81e3, 1.796e3, 1.783e3, 1.77e3, 1.756e3, 1.743e3, 1.73e3, 1.717e3, 1.704e3, 1.691e3, 1.678e3, 1.666e3, 1.653e3, 1.641e3, 1.628e3, 1.616e3, 1.604e3, 1.592e3, 1.58e3, 1.568e3, 1.556e3, 1.545e3, 1.533e3, 1.522e3, 1.51e3, 1.499e3, 1.488e3, 1.477e3, 1.465e3, 1.455e3, 1.444e3, 1.433e3, 1.422e3, 1.411e3, 1.401e3, 1.39e3, 1.38e3, 1.37e3, 1.359e3, 1.349e3, 1.339e3, 1.329e3, 1.319e3, 1.309e3, 1.3e3, 1.29e3, 1.28e3, 1.271e3, 1.261e3, 1.252e3, 1.243e3, 1.233e3, 1.224e3, 1.215e3, 1.206e3, 1.197e3, 1.188e3, 1.179e3, 1.171e3, 1.162e3, 1.153e3, 1.145e3, 1.136e3, 1.128e3, 1.119e3, 1.111e3, 1.103e3, 1.095e3, 1.086e3, 1.078e3, 1.07e3, 1.062e3, 1.055e3, 1.047e3, 1.039e3, 1.031e3, 1.024e3, 1.016e3, 1.009e3, 1.001e3, 993.641, 986.289, 978.994, 971.754, 964.569, 957.44, 950.364, 943.342, 936.374, 929.459, 922.597, 915.787, 909.028, 902.322, 895.665, 889.06, 876, 863.138, 850.479, 838.021, 825.76, 813.694, 801.819, 790.131, 778.628, 767.306, 756.162, 745.194, 734.398, 723.771, 713.31, 703.014, 692.878, 682.901, 673.079, 663.41, 653.891, 644.521, 635.296, 626.213, 617.272, 608.468, 599.801, 591.267, 582.865, 574.592, 566.446, 558.425, 550.527, 542.751, 535.093, 527.552, 520.126, 512.813, 505.612, 498.52, 491.536, 484.658, 477.884, 471.213, 464.642, 458.171, 451.797, 445.52, 439.337, 433.246, 427.247, 421.339, 415.518, 409.785, 404.137, 398.574, 393.093, 387.695, 382.376, 377.137, 371.975, 366.89, 361.88, 356.944, 352.081, 347.29, 342.569, 337.918, 333.335, 328.82, 324.371, 319.987, 315.667, 311.41, 307.216, 303.083, 299.01, 294.996, 291.04, 287.143, 283.301, 279.515, 275.784, 272.107, 268.483, 264.912, 261.391, 257.922, 254.502, 251.132, 247.81, 244.535, 241.307, 238.126, 234.989, 231.898, 228.851, 225.847, 222.885, 219.966, 217.088, 214.251, 211.454, 208.097, 205.979, 203.299, 200.656, 198.051, 195.483, 192.95, 190.454, 187.992, 185.564, 183.171, 180.811, 178.484, 176.189, 173.927, 171.696, 169.496, 167.326, 165.186, 163.076, 160.996, 158.944, 156.92, 154.924, 152.956, 151.015, 149.101, 147.213, 145.35, 143.514, 141.702, 139.915, 138.153, 136.414, 134.7, 133.008, 131.34, 129.694, 128.071, 126.47, 124.89, 123.332, 121.795, 120.278, 118.732, 117.306, 115.851, 114.414, 112.997, 111.599, 110.219, 108.857, 107.512, 106.183, 104.871, 103.575, 102.295, 101.031, 99.783, 98.55, 97.332, 96.129, 94.942, 93.769, 92.61, 91.466, 90.336, 89.22, 88.118, 87.03, 85.955, 84.893, 83.845, 82.809, 81.785, 80.776, 79.779, 78.793, 77.82, 76.859, 75.91, 74.973, 74.017, 73.133, 72.23, 71.338, 70.458, 68.729, 67.012, 65.396, 63.787, 62.214, 60.678, 59.176, 57.708, 56.275, 54.873, 53.505, 52.167, 50.861, 49.584, 48.337, 47.12, 45.93, 44.768, 43.633, 42.525, 41.443, 40.386, 39.354, 38.346, 37.362, 36.401, 35.464, 34.548, 33.654, 32.782, 31.93, 31.099, 30.288, 29.496, 28.724, 27.97, 27.234, 26.516, 25.816, 25.132, 24.466, 23.815, 23.181, 22.562, 21.959, 21.37, 20.796, 20.236, 19.69, 19.157, 18.638, 18.132, 17.639, 17.158, 16.689, 16.231, 15.786, 15.351, 14.928, 14.516, 14.114, 13.722, 13.34, 12.968, 12.606, 12.253, 11.909, 11.574, 11.248, 10.93, 10.62, 10.319, 10.025, 9.739, 9.461, 9.19, 8.926, 8.669, 8.419, 8.176, 7.939, 7.708, 7.484, 7.265, 7.053, 6.846, 6.645, 6.449, 6.259, 6.074, 5.893, 5.718, 5.548, 5.382, 5.221, 5.064, 4.912, 4.764, 4.62, 4.48, 4.343, 4.211, 4.083, 3.958, 3.836, 3.718, 3.604, 3.493, 3.385, 3.28, 3.179, 3.08, 2.984, 2.891, 2.801, 2.713, 2.629, 2.546, 2.466, 2.388, 2.313, 2.24, 2.169, 2.1, 2.033, 1.969, 1.907, 1.845, 1.786, 1.729, 1.673, 1.619, 1.567, 1.516, 1.467, 1.42, 1.374, 1.329, 1.283, 1.244, 1.203, 1.164, 1.125, 1.088, 1.052]
    
    return np.interp(h, H, p)

def Rho(h):

    """
    Функция возвращает значение плотности воздуха в кг/м^3,
    принимая в качестве входных параметров высоту полета в метрах.
    """

    H = [-2e3, -1.95e3, -1.9e3, -1.85e3, -1.8e3, -1.75e3, -1.7e3, -1.65e3, -1.6e3, -1.55e3, -1.5e3, -1.45e3, -1.4e3, -1.35e3, -1.3e3, -1.25e3, -1.2e3, -1.15e3, -1.1e3, -1.05e3, -1e3, -950, -900, -850, -800, -750, -700, -650, -600, -550, -500, -450, -400, -350, -300, -250, -200, -150, -100, -50, 0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1e3, 1.05e3, 1.1e3, 1.15e3, 1.2e3, 1.25e3, 1.3e3, 1.35e3, 1.4e3, 1.45e3, 1.5e3, 1.55e3, 1.6e3, 1.65e3, 1.7e3, 1.75e3, 1.8e3, 1.85e3, 1.9e3, 1.95e3, 2e3, 2.05e3, 2.1e3, 2.15e3, 2.2e3, 2.25e3, 2.3e3, 2.35e3, 2.4e3, 2.45e3, 2.5e3, 2.55e3, 2.6e3, 2.65e3, 2.7e3, 2.75e3, 2.8e3, 2.85e3, 2.9e3, 2.95e3, 3e3, 3.05e3, 3.1e3, 3.15e3, 3.2e3, 3.25e3, 3.3e3, 3.35e3, 3.4e3, 3.45e3, 3.5e3, 3.55e3, 3.6e3, 3.65e3, 3.7e3, 3.75e3, 3.8e3, 3.85e3, 3.9e3, 3.95e3, 4e3, 4.05e3, 4.1e3, 4.15e3, 4.2e3, 4.25e3, 4.3e3, 4.35e3, 4.4e3, 4.45e3, 4.5e3, 4.55e3, 4.6e3, 4.65e3, 4.7e3, 4.75e3, 4.8e3, 4.85e3, 4.9e3, 4.95e3, 5e3, 5.05e3, 5.1e3, 5.15e3, 5.2e3, 5.25e3, 5.3e3, 5.35e3, 5.4e3, 5.45e3, 5.5e3, 5.55e3, 5.6e3, 5.65e3, 5.7e3, 5.75e3, 5.8e3, 5.85e3, 5.9e3, 5.95e3, 6e3, 6.05e3, 6.1e3, 6.15e3, 6.2e3, 6.25e3, 6.3e3, 6.35e3, 6.4e3, 6.45e3, 6.5e3, 6.55e3, 6.6e3, 6.65e3, 6.7e3, 6.75e3, 6.8e3, 6.85e3, 6.9e3, 6.95e3, 7e3, 7.05e3, 7.1e3, 7.15e3, 7.2e3, 7.25e3, 7.3e3, 7.35e3, 7.4e3, 7.45e3, 7.5e3, 7.55e3, 7.6e3, 7.65e3, 7.7e3, 7.75e3, 7.8e3, 7.85e3, 7.9e3, 7.95e3, 8e3, 8.05e3, 8.1e3, 8.15e3, 8.2e3, 8.25e3, 8.3e3, 8.35e3, 8.4e3, 8.45e3, 8.5e3, 8.55e3, 8.6e3, 8.65e3, 8.7e3, 8.75e3, 8.8e3, 8.85e3, 8.9e3, 8.95e3, 9e3, 9.05e3, 9.1e3, 9.15e3, 9.2e3, 9.25e3, 9.3e3, 9.35e3, 9.4e3, 9.45e3, 9.5e3, 9.55e3, 9.6e3, 9.65e3, 9.7e3, 9.75e3, 9.8e3, 9.85e3, 9.9e3, 9.95e3, 1e4, 1.005e4, 1.01e4, 1.015e4, 1.02e4, 1.025e4, 1.03e4, 1.035e4, 1.04e4, 1.045e4, 1.05e4, 1.055e4, 1.06e4, 1.065e4, 1.07e4, 1.075e4, 1.08e4, 1.085e4, 1.09e4, 1.095e4, 1.1e4, 1.105e4, 1.11e4, 1.115e4, 1.12e4, 1.125e4, 1.13e4, 1.135e4, 1.14e4, 1.145e4, 1.15e4, 1.155e4, 1.16e4, 1.165e4, 1.17e4, 1.175e4, 1.18e4, 1.185e4, 1.19e4, 1.195e4, 1.2e4, 1.205e4, 1.21e4, 1.215e4, 1.22e4, 1.225e4, 1.23e4, 1.235e4, 1.24e4, 1.245e4, 1.25e4, 1.255e4, 1.26e4, 1.265e4, 1.27e4, 1.275e4, 1.28e4, 1.285e4, 1.29e4, 1.295e4, 1.3e4, 1.305e4, 1.31e4, 1.315e4, 1.32e4, 1.325e4, 1.33e4, 1.335e4, 1.34e4, 1.345e4, 1.35e4, 1.355e4, 1.36e4, 1.365e4, 1.37e4, 1.375e4, 1.38e4, 1.385e4, 1.39e4, 1.395e4, 1.4e4, 1.405e4, 1.41e4, 1.415e4, 1.42e4, 1.425e4, 1.43e4, 1.435e4, 1.44e4, 1.445e4, 1.45e4, 1.455e4, 1.46e4, 1.465e4, 1.47e4, 1.475e4, 1.48e4, 1.485e4, 1.49e4, 1.495e4, 1.5e4, 1.505e4, 1.51e4, 1.515e4, 1.52e4, 1.525e4, 1.53e4, 1.535e4, 1.54e4, 1.545e4, 1.55e4, 1.555e4, 1.56e4, 1.565e4, 1.57e4, 1.575e4, 1.58e4, 1.585e4, 1.59e4, 1.595e4, 1.6e4, 1.605e4, 1.61e4, 1.615e4, 1.62e4, 1.625e4, 1.63e4, 1.635e4, 1.64e4, 1.645e4, 1.65e4, 1.655e4, 1.66e4, 1.665e4, 1.67e4, 1.675e4, 1.68e4, 1.685e4, 1.69e4, 1.695e4, 1.7e4, 1.705e4, 1.71e4, 1.715e4, 1.72e4, 1.725e4, 1.73e4, 1.735e4, 1.74e4, 1.745e4, 1.75e4, 1.755e4, 1.76e4, 1.765e4, 1.77e4, 1.775e4, 1.78e4, 1.785e4, 1.79e4, 1.795e4, 1.8e4, 1.805e4, 1.81e4, 1.815e4, 1.82e4, 1.825e4, 1.83e4, 1.835e4, 1.84e4, 1.845e4, 1.85e4, 1.855e4, 1.86e4, 1.865e4, 1.87e4, 1.875e4, 1.88e4, 1.885e4, 1.89e4, 1.895e4, 1.9e4, 1.905e4, 1.91e4, 1.915e4, 1.92e4, 1.925e4, 1.93e4, 1.935e4, 1.94e4, 1.945e4, 1.95e4, 1.955e4, 1.96e4, 1.965e4, 1.97e4, 1.975e4, 1.98e4, 1.985e4, 1.99e4, 1.995e4, 2e4, 2.005e4, 2.01e4, 2.015e4, 2.02e4, 2.025e4, 2.03e4, 2.035e4, 2.04e4, 2.045e4, 2.05e4, 2.055e4, 2.06e4, 2.065e4, 2.07e4, 2.075e4, 2.08e4, 2.085e4, 2.09e4, 2.095e4, 2.1e4, 2.105e4, 2.11e4, 2.115e4, 2.12e4, 2.125e4, 2.13e4, 2.135e4, 2.14e4, 2.145e4, 2.15e4, 2.155e4, 2.16e4, 2.165e4, 2.17e4, 2.175e4, 2.18e4, 2.185e4, 2.19e4, 2.195e4, 2.2e4, 2.205e4, 2.21e4, 2.215e4, 2.22e4, 2.225e4, 2.23e4, 2.235e4, 2.24e4, 2.245e4, 2.25e4, 2.255e4, 2.26e4, 2.265e4, 2.27e4, 2.275e4, 2.28e4, 2.285e4, 2.29e4, 2.295e4, 2.3e4, 2.305e4, 2.31e4, 2.315e4, 2.32e4, 2.325e4, 2.33e4, 2.335e4, 2.34e4, 2.345e4, 2.35e4, 2.355e4, 2.36e4, 2.365e4, 2.37e4, 2.375e4, 2.38e4, 2.385e4, 2.39e4, 2.395e4, 2.4e4, 2.405e4, 2.41e4, 2.415e4, 2.42e4, 2.425e4, 2.43e4, 2.435e4, 2.44e4, 2.445e4, 2.45e4, 2.455e4, 2.46e4, 2.465e4, 2.47e4, 2.475e4, 2.48e4, 2.485e4, 2.49e4, 2.495e4, 2.5e4, 2.505e4, 2.51e4, 2.515e4, 2.52e4, 2.525e4, 2.53e4, 2.535e4, 2.54e4, 2.545e4, 2.55e4, 2.555e4, 2.56e4, 2.565e4, 2.57e4, 2.575e4, 2.58e4, 2.585e4, 2.59e4, 2.595e4, 2.6e4, 2.605e4, 2.61e4, 2.615e4, 2.62e4, 2.625e4, 2.63e4, 2.635e4, 2.64e4, 2.645e4, 2.65e4, 2.655e4, 2.66e4, 2.665e4, 2.67e4, 2.675e4, 2.68e4, 2.685e4, 2.69e4, 2.695e4, 2.7e4, 2.705e4, 2.71e4, 2.715e4, 2.72e4, 2.725e4, 2.73e4, 2.735e4, 2.74e4, 2.745e4, 2.75e4, 2.755e4, 2.76e4, 2.765e4, 2.77e4, 2.775e4, 2.78e4, 2.785e4, 2.79e4, 2.795e4, 2.8e4, 2.805e4, 2.81e4, 2.815e4, 2.82e4, 2.825e4, 2.83e4, 2.835e4, 2.84e4, 2.845e4, 2.85e4, 2.855e4, 2.86e4, 2.865e4, 2.87e4, 2.875e4, 2.88e4, 2.885e4, 2.89e4, 2.895e4, 2.9e4, 2.905e4, 2.91e4, 2.915e4, 2.92e4, 2.925e4, 2.93e4, 2.935e4, 2.94e4, 2.945e4, 2.95e4, 2.955e4, 2.96e4, 2.965e4, 2.97e4, 2.975e4, 2.98e4, 2.985e4, 2.99e4, 2.995e4, 3e4, 3.005e4, 3.01e4, 3.015e4, 3.02e4, 3.025e4, 3.03e4, 3.035e4, 3.04e4, 3.045e4, 3.05e4, 3.055e4, 3.06e4, 3.065e4, 3.07e4, 3.075e4, 3.08e4, 3.085e4, 3.09e4, 3.095e4, 3.1e4, 3.105e4, 3.11e4, 3.115e4, 3.12e4, 3.125e4, 3.13e4, 3.135e4, 3.14e4, 3.145e4, 3.15e4, 3.155e4, 3.16e4, 3.165e4, 3.17e4, 3.175e4, 3.18e4, 3.185e4, 3.19e4, 3.195e4, 3.2e4, 3.21e4, 3.22e4, 3.23e4, 3.24e4, 3.25e4, 3.26e4, 3.27e4, 3.28e4, 3.29e4, 3.3e4, 3.31e4, 3.32e4, 3.33e4, 3.34e4, 3.35e4, 3.36e4, 3.37e4, 3.38e4, 3.39e4, 3.4e4, 3.41e4, 3.42e4, 3.43e4, 3.44e4, 3.45e4, 3.46e4, 3.47e4, 3.48e4, 3.49e4, 3.5e4, 3.51e4, 3.52e4, 3.53e4, 3.54e4, 3.55e4, 3.56e4, 3.57e4, 3.58e4, 3.59e4, 3.6e4, 3.61e4, 3.62e4, 3.63e4, 3.64e4, 3.65e4, 3.66e4, 3.67e4, 3.68e4, 3.69e4, 3.7e4, 3.71e4, 3.72e4, 3.73e4, 3.74e4, 3.75e4, 3.76e4, 3.77e4, 3.78e4, 3.79e4, 3.8e4, 3.81e4, 3.82e4, 3.83e4, 3.84e4, 3.85e4, 3.86e4, 3.87e4, 3.88e4, 3.89e4, 3.9e4, 3.91e4, 3.92e4, 3.93e4, 3.94e4, 3.95e4, 3.96e4, 3.97e4, 3.98e4, 3.99e4, 4e4, 4.01e4, 4.02e4, 4.03e4, 4.04e4, 4.05e4, 4.06e4, 4.07e4, 4.08e4, 4.09e4, 4.1e4, 4.11e4, 4.12e4, 4.13e4, 4.14e4, 4.15e4, 4.16e4, 4.17e4, 4.18e4, 4.19e4, 4.2e4, 4.21e4, 4.22e4, 4.23e4, 4.24e4, 4.25e4, 4.26e4, 4.27e4, 4.28e4, 4.29e4, 4.3e4, 4.31e4, 4.32e4, 4.33e4, 4.34e4, 4.35e4, 4.36e4, 4.37e4, 4.38e4, 4.39e4, 4.4e4, 4.41e4, 4.42e4, 4.43e4, 4.44e4, 4.45e4, 4.46e4, 4.47e4, 4.48e4, 4.49e4, 4.5e4, 4.51e4, 4.52e4, 4.53e4, 4.54e4, 4.55e4, 4.56e4, 4.57e4, 4.58e4, 4.59e4, 4.6e4, 4.61e4, 4.62e4, 4.63e4, 4.64e4, 4.65e4, 4.66e4, 4.67e4, 4.68e4, 4.69e4, 4.7e4, 4.71e4, 4.72e4, 4.73e4, 4.74e4, 4.75e4, 4.76e4, 4.77e4, 4.78e4, 4.79e4, 4.8e4, 4.81e4, 4.82e4, 4.83e4, 4.84e4, 4.85e4, 4.86e4, 4.87e4, 4.88e4, 4.89e4, 4.9e4, 4.91e4, 4.92e4, 4.93e4, 4.94e4, 4.95e4, 4.96e4, 4.97e4, 4.98e4, 4.99e4, 5e4, 5.01e4, 5.02e4, 5.03e4, 5.04e4, 5.05e4, 5.06e4, 5.07e4, 5.08e4, 5.09e4, 5.1e4, 5.12e4, 5.14e4, 5.16e4, 5.18e4, 5.2e4, 5.22e4, 5.24e4, 5.26e4, 5.28e4, 5.3e4, 5.32e4, 5.34e4, 5.36e4, 5.38e4, 5.4e4, 5.42e4, 5.44e4, 5.46e4, 5.48e4, 5.5e4, 5.52e4, 5.54e4, 5.56e4, 5.58e4, 5.6e4, 5.62e4, 5.64e4, 5.66e4, 5.68e4, 5.7e4, 5.72e4, 5.74e4, 5.76e4, 5.78e4, 5.8e4, 5.82e4, 5.84e4, 5.86e4, 5.88e4, 5.9e4, 5.92e4, 5.94e4, 5.96e4, 5.98e4, 6e4, 6.02e4, 6.04e4, 6.06e4, 6.08e4, 6.1e4, 6.12e4, 6.14e4, 6.16e4, 6.18e4, 6.2e4, 6.22e4, 6.24e4, 6.26e4, 6.28e4, 6.3e4, 6.32e4, 6.34e4, 6.36e4, 6.38e4, 6.4e4, 6.42e4, 6.44e4, 6.46e4, 6.48e4, 6.5e4, 6.52e4, 6.54e4, 6.56e4, 6.58e4, 6.6e4, 6.62e4, 6.64e4, 6.66e4, 6.68e4, 6.7e4, 6.72e4, 6.74e4, 6.76e4, 6.78e4, 6.8e4, 6.82e4, 6.84e4, 6.86e4, 6.88e4, 6.9e4, 6.92e4, 6.94e4, 6.96e4, 6.98e4, 7e4, 7.02e4, 7.04e4, 7.06e4, 7.08e4, 7.1e4, 7.12e4, 7.14e4, 7.16e4, 7.18e4, 7.2e4, 7.22e4, 7.24e4, 7.26e4, 7.28e4, 7.3e4, 7.32e4, 7.34e4, 7.36e4, 7.38e4, 7.4e4, 7.42e4, 7.44e4, 7.46e4, 7.48e4, 7.5e4, 7.52e4, 7.54e4, 7.56e4, 7.58e4, 7.6e4, 7.62e4, 7.64e4, 7.66e4, 7.68e4, 7.7e4, 7.72e4, 7.74e4, 7.76e4, 7.78e4, 7.8e4, 7.82e4, 7.84e4, 7.86e4, 7.88e4, 7.9e4, 7.92e4, 7.94e4, 7.96e4, 7.98e4, 8e4]
    rho = [1.478, 1.471, 1.465, 1.458, 1.451, 1.444, 1.438, 1.431, 1.425, 1.418, 1.411, 1.405, 1.398, 1.392, 1.385, 1.379, 1.373, 1.366, 1.36, 1.353, 1.347, 1.341, 1.334, 1.328, 1.322, 1.316, 1.309, 1.303, 1.297, 1.291, 1.285, 1.279, 1.273, 1.267, 1.261, 1.255, 1.249, 1.243, 1.237, 1.231, 1.225, 1.219, 1.213, 1.207, 1.202, 1.196, 1.19, 1.184, 1.179, 1.173, 1.167, 1.162, 1.156, 1.15, 1.145, 1.139, 1.134, 1.128, 1.123, 1.117, 1.112, 1.106, 1.101, 1.095, 1.09, 1.085, 1.079, 1.074, 1.069, 1.063, 1.058, 1.053, 1.048, 1.042, 1.037, 1.032, 1.027, 1.022, 1.017, 1.012, 1.007, 1.002, 0.996, 0.991, 0.986, 0.982, 0.977, 0.972, 0.967, 0.962, 0.957, 0.952, 0.947, 0.942, 0.938, 0.933, 0.928, 0.923, 0.919, 0.914, 0.909, 0.905, 0.9, 0.895, 0.891, 0.886, 0.882, 0.877, 0.872, 0.868, 0.863, 0.859, 0.854, 0.85, 0.846, 0.841, 0.837, 0.832, 0.828, 0.824, 0.819, 0.815, 0.811, 0.806, 0.802, 0.798, 0.794, 0.79, 0.785, 0.781, 0.777, 0.773, 0.769, 0.765, 0.761, 0.757, 0.752, 0.748, 0.744, 0.74, 0.736, 0.732, 0.729, 0.725, 0.721, 0.717, 0.713, 0.709, 0.705, 0.701, 0.697, 0.694, 0.69, 0.686, 0.682, 0.679, 0.675, 0.671, 0.667, 0.664, 0.66, 0.656, 0.653, 0.649, 0.646, 0.642, 0.638, 0.635, 0.631, 0.628, 0.624, 0.621, 0.617, 0.614, 0.61, 0.607, 0.604, 0.6, 0.597, 0.593, 0.59, 0.587, 0.583, 0.58, 0.577, 0.573, 0.57, 0.567, 0.564, 0.56, 0.557, 0.554, 0.551, 0.548, 0.544, 0.541, 0.538, 0.535, 0.532, 0.529, 0.526, 0.523, 0.52, 0.517, 0.514, 0.511, 0.508, 0.505, 0.502, 0.499, 0.496, 0.493, 0.49, 0.487, 0.484, 0.481, 0.478, 0.476, 0.473, 0.47, 0.467, 0.464, 0.461, 0.459, 0.456, 0.453, 0.45, 0.448, 0.445, 0.442, 0.44, 0.437, 0.434, 0.432, 0.429, 0.426, 0.424, 0.421, 0.419, 0.416, 0.414, 0.411, 0.408, 0.406, 0.403, 0.401, 0.398, 0.396, 0.393, 0.391, 0.389, 0.386, 0.384, 0.381, 0.379, 0.377, 0.374, 0.372, 0.369, 0.367, 0.365, 0.362, 0.359, 0.357, 0.354, 0.351, 0.348, 0.345, 0.343, 0.34, 0.337, 0.335, 0.332, 0.33, 0.327, 0.324, 0.322, 0.319, 0.317, 0.314, 0.312, 0.309, 0.307, 0.305, 0.302, 0.3, 0.298, 0.295, 0.293, 0.291, 0.288, 0.286, 0.284, 0.282, 0.279, 0.277, 0.275, 0.273, 0.271, 0.269, 0.267, 0.265, 0.262, 0.26, 0.258, 0.256, 0.254, 0.252, 0.25, 0.248, 0.246, 0.245, 0.243, 0.241, 0.239, 0.237, 0.235, 0.233, 0.231, 0.23, 0.228, 0.226, 0.224, 0.223, 0.221, 0.219, 0.217, 0.216, 0.214, 0.212, 0.211, 0.209, 0.207, 0.206, 0.204, 0.203, 0.201, 0.199, 0.198, 0.196, 0.195, 0.193, 0.192, 0.19, 0.189, 0.187, 0.186, 0.184, 0.183, 0.181, 0.18, 0.179, 0.177, 0.176, 0.174, 0.173, 0.172, 0.17, 0.169, 0.168, 0.166, 0.165, 0.164, 0.163, 0.161, 0.16, 0.159, 0.158, 0.156, 0.155, 0.154, 0.153, 0.152, 0.15, 0.149, 0.148, 0.147, 0.146, 0.145, 0.143, 0.142, 0.141, 0.14, 0.139, 0.138, 0.137, 0.136, 0.135, 0.134, 0.133, 0.132, 0.131, 0.13, 0.129, 0.128, 0.127, 0.126, 0.125, 0.124, 0.123, 0.122, 0.121, 0.12, 0.119, 0.118, 0.117, 0.116, 0.115, 0.114, 0.113, 0.112, 0.112, 0.111, 0.11, 0.109, 0.108, 0.107, 0.106, 0.106, 0.105, 0.104, 0.103, 0.102, 0.102, 0.101, 0.1, 0.099, 0.098, 0.098, 0.097, 0.096, 0.095, 0.095, 0.094, 0.093, 0.092, 0.092, 0.091, 0.09, 0.09, 0.089, 0.088, 0.088, 0.087, 0.086, 0.085, 0.085, 0.084, 0.083, 0.083, 0.082, 0.081, 0.081, 0.08, 0.079, 0.079, 0.078, 0.078, 0.077, 0.076, 0.076, 0.075, 0.075, 0.074, 0.073, 0.073, 0.072, 0.072, 0.071, 0.07, 0.07, 0.069, 0.069, 0.068, 0.068, 0.067, 0.067, 0.066, 0.066, 0.065, 0.065, 0.064, 0.063, 0.063, 0.062, 0.062, 0.061, 0.061, 0.061, 0.06, 0.06, 0.059, 0.059, 0.058, 0.058, 0.057, 0.057, 0.056, 0.056, 0.055, 0.055, 0.055, 0.054, 0.054, 0.053, 0.053, 0.052, 0.052, 0.052, 0.051, 0.051, 0.05, 0.05, 0.05, 0.049, 0.049, 0.048, 0.048, 0.048, 0.047, 0.047, 0.047, 0.046, 0.046, 0.045, 0.045, 0.045, 0.044, 0.044, 0.044, 0.043, 0.043, 0.043, 0.042, 0.042, 0.042, 0.041, 0.041, 0.041, 0.04, 0.04, 0.04, 0.039, 0.039, 0.039, 0.039, 0.038, 0.038, 0.038, 0.037, 0.037, 0.037, 0.036, 0.036, 0.036, 0.036, 0.035, 0.035, 0.035, 0.035, 0.034, 0.034, 0.034, 0.033, 0.033, 0.033, 0.033, 0.032, 0.032, 0.032, 0.032, 0.031, 0.031, 0.031, 0.031, 0.03, 0.03, 0.03, 0.03, 0.03, 0.029, 0.029, 0.029, 0.029, 0.028, 0.028, 0.028, 0.028, 0.028, 0.027, 0.027, 0.027, 0.027, 0.026, 0.026, 0.026, 0.026, 0.026, 0.025, 0.025, 0.025, 0.025, 0.025, 0.024, 0.024, 0.024, 0.024, 0.024, 0.024, 0.023, 0.023, 0.023, 0.023, 0.023, 0.022, 0.022, 0.022, 0.022, 0.022, 0.022, 0.021, 0.021, 0.021, 0.021, 0.021, 0.021, 0.021, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.019, 0.019, 0.019, 0.019, 0.019, 0.019, 0.019, 0.018, 0.018, 0.018, 0.018, 0.018, 0.018, 0.018, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.016, 0.016, 0.016, 0.016, 0.016, 0.016, 0.016, 0.016, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.015, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.014, 0.013, 0.013, 0.013, 0.013, 0.013, 0.012, 0.012, 0.012, 0.012, 0.012, 0.011, 0.011, 0.011, 0.011, 0.011, 0.011, 0.01, 0.01, 0.01, 9.887e-3, 9.734e-3, 9.583e-3, 9.435e-3, 9.289e-3, 9.146e-3, 9.004e-3, 8.866e-3, 8.729e-3, 8.595e-3, 8.463e-3, 8.334e-3, 8.206e-3, 8.08e-3, 7.957e-3, 7.836e-3, 7.716e-3, 7.599e-3, 7.483e-3, 7.37e-3, 7.258e-3, 7.148e-3, 7.04e-3, 6.933e-3, 6.829e-3, 6.726e-3, 6.624e-3, 6.525e-3, 6.427e-3, 6.33e-3, 6.235e-3, 6.142e-3, 6.05e-3, 5.96e-3, 5.871e-3, 5.783e-3, 5.697e-3, 5.613e-3, 5.529e-3, 5.447e-3, 5.367e-3, 5.287e-3, 5.209e-3, 5.132e-3, 5.056e-3, 4.982e-3, 4.909e-3, 4.836e-3, 4.765e-3, 4.696e-3, 4.627e-3, 4.559e-3, 4.492e-3, 4.427e-3, 4.362e-3, 4.299e-3, 4.236e-3, 4.175e-3, 4.114e-3, 4.054e-3, 3.996e-3, 3.938e-3, 3.881e-3, 3.825e-3, 3.77e-3, 3.716e-3, 3.662e-3, 3.609e-3, 3.558e-3, 3.507e-3, 3.456e-3, 3.407e-3, 3.358e-3, 3.31e-3, 3.263e-3, 3.217e-3, 3.171e-3, 3.126e-3, 3.081e-3, 3.038e-3, 2.995e-3, 2.952e-3, 2.911e-3, 2.87e-3, 2.829e-3, 2.789e-3, 2.75e-3, 2.711e-3, 2.673e-3, 2.636e-3, 2.599e-3, 2.563e-3, 2.527e-3, 2.491e-3, 2.457e-3, 2.422e-3, 2.389e-3, 2.356e-3, 2.323e-3, 2.291e-3, 2.259e-3, 2.228e-3, 2.197e-3, 2.166e-3, 2.137e-3, 2.107e-3, 2.078e-3, 2.05e-3, 2.021e-3, 1.994e-3, 1.966e-3, 1.939e-3, 1.913e-3, 1.887e-3, 1.861e-3, 1.836e-3, 1.811e-3, 1.786e-3, 1.762e-3, 1.738e-3, 1.714e-3, 1.691e-3, 1.668e-3, 1.645e-3, 1.623e-3, 1.601e-3, 1.58e-3, 1.558e-3, 1.537e-3, 1.517e-3, 1.497e-3, 1.476e-3, 1.457e-3, 1.437e-3, 1.419e-3, 1.401e-3, 1.384e-3, 1.367e-3, 1.35e-3, 1.333e-3, 1.317e-3, 1.3e-3, 1.284e-3, 1.268e-3, 1.253e-3, 1.237e-3, 1.222e-3, 1.207e-3, 1.192e-3, 1.177e-3, 1.163e-3, 1.148e-3, 1.134e-3, 1.12e-3, 1.106e-3, 1.093e-3, 1.079e-3, 1.066e-3, 1.053e-3, 1.04e-3, 1.027e-3, 1.014e-3, 1.002e-3, 9.893e-4, 9.771e-4, 9.65e-4, 9.531e-4, 9.413e-4, 9.297e-4, 9.182e-4, 9.069e-4, 8.846e-4, 8.629e-4, 8.434e-4, 8.243e-4, 8.056e-4, 7.873e-4, 7.691e-4, 7.519e-4, 7.347e-4, 7.179e-4, 7.014e-4, 6.853e-4, 6.696e-4, 6.541e-4, 6.39e-4, 6.242e-4, 6.097e-4, 5.955e-4, 5.817e-4, 5.681e-4, 5.548e-4, 5.418e-4, 5.291e-4, 5.166e-4, 5.044e-4, 4.925e-4, 4.809e-4, 4.695e-4, 4.583e-4, 4.474e-4, 4.367e-4, 4.262e-4, 4.16e-4, 4.06e-4, 3.963e-4, 3.867e-4, 3.774e-4, 3.682e-4, 3.593e-4, 3.505e-4, 3.42e-4, 3.336e-4, 3.255e-4, 3.175e-4, 3.097e-4, 3.02e-4, 2.946e-4, 2.873e-4, 2.802e-4, 2.732e-4, 2.664e-4, 2.598e-4, 2.533e-4, 2.469e-4, 2.407e-4, 2.346e-4, 2.287e-4, 2.229e-4, 2.173e-4, 2.118e-4, 2.064e-4, 2.011e-4, 1.96e-4, 1.91e-4, 1.86e-4, 1.813e-4, 1.766e-4, 1.72e-4, 1.676e-4, 1.632e-4, 1.59e-4, 1.548e-4, 1.508e-4, 1.468e-4, 1.43e-4, 1.392e-4, 1.355e-4, 1.319e-4, 1.284e-4, 1.25e-4, 1.217e-4, 1.184e-4, 1.153e-4, 1.122e-4, 1.092e-4, 1.062e-4, 1.034e-4, 1.006e-4, 9.783e-5, 9.517e-5, 9.267e-5, 9.004e-5, 8.758e-5, 8.517e-5, 8.283e-5, 8.054e-5, 7.832e-5, 7.614e-5, 7.403e-5, 7.196e-5, 6.996e-5, 6.8e-5, 6.609e-5, 6.423e-5, 6.237e-5, 6.057e-5, 5.881e-5, 5.71e-5, 5.544e-5, 5.382e-5, 5.225e-5, 5.072e-5, 4.924e-5, 4.779e-5, 4.639e-5, 4.502e-5, 4.369e-5, 4.24e-5, 4.114e-5, 3.992e-5, 3.873e-5, 3.758e-5, 3.646e-5, 3.537e-5, 3.431e-5, 3.328e-5, 3.228e-5, 3.131e-5, 3.037e-5, 2.945e-5, 2.856e-5, 2.769e-5, 2.685e-5, 2.603e-5, 2.524e-5, 2.447e-5, 2.372e-5, 2.299e-5, 2.229e-5, 2.16e-5, 2.093e-5, 2.029e-5, 1.966e-5, 1.905e-5, 1.846e-5]
    
    return np.interp(h, H, rho)

def T(h):

    """
    Функция возвращает значение температуры воздуха в К,
    принимая в качестве входных параметров высоту полета в метрах.
    """

    H = [-2e3, -1.95e3, -1.9e3, -1.85e3, -1.8e3, -1.75e3, -1.7e3, -1.65e3, -1.6e3, -1.55e3, -1.5e3, -1.45e3, -1.4e3, -1.35e3, -1.3e3, -1.25e3, -1.2e3, -1.15e3, -1.1e3, -1.05e3, -1e3, -950, -900, -850, -800, -750, -700, -650, -600, -550, -500, -450, -400, -350, -300, -250, -200, -150, -100, -50, 0, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1e3, 1.05e3, 1.1e3, 1.15e3, 1.2e3, 1.25e3, 1.3e3, 1.35e3, 1.4e3, 1.45e3, 1.5e3, 1.55e3, 1.6e3, 1.65e3, 1.7e3, 1.75e3, 1.8e3, 1.85e3, 1.9e3, 1.95e3, 2e3, 2.05e3, 2.1e3, 2.15e3, 2.2e3, 2.25e3, 2.3e3, 2.35e3, 2.4e3, 2.45e3, 2.5e3, 2.55e3, 2.6e3, 2.65e3, 2.7e3, 2.75e3, 2.8e3, 2.85e3, 2.9e3, 2.95e3, 3e3, 3.05e3, 3.1e3, 3.15e3, 3.2e3, 3.25e3, 3.3e3, 3.35e3, 3.4e3, 3.45e3, 3.5e3, 3.55e3, 3.6e3, 3.65e3, 3.7e3, 3.75e3, 3.8e3, 3.85e3, 3.9e3, 3.95e3, 4e3, 4.05e3, 4.1e3, 4.15e3, 4.2e3, 4.25e3, 4.3e3, 4.35e3, 4.4e3, 4.45e3, 4.5e3, 4.55e3, 4.6e3, 4.65e3, 4.7e3, 4.75e3, 4.8e3, 4.85e3, 4.9e3, 4.95e3, 5e3, 5.05e3, 5.1e3, 5.15e3, 5.2e3, 5.25e3, 5.3e3, 5.35e3, 5.4e3, 5.45e3, 5.5e3, 5.55e3, 5.6e3, 5.65e3, 5.7e3, 5.75e3, 5.8e3, 5.85e3, 5.9e3, 5.95e3, 6e3, 6.05e3, 6.1e3, 6.15e3, 6.2e3, 6.25e3, 6.3e3, 6.35e3, 6.4e3, 6.45e3, 6.5e3, 6.55e3, 6.6e3, 6.65e3, 6.7e3, 6.75e3, 6.8e3, 6.85e3, 6.9e3, 6.95e3, 7e3, 7.05e3, 7.1e3, 7.15e3, 7.2e3, 7.25e3, 7.3e3, 7.35e3, 7.4e3, 7.45e3, 7.5e3, 7.55e3, 7.6e3, 7.65e3, 7.7e3, 7.75e3, 7.8e3, 7.85e3, 7.9e3, 7.95e3, 8e3, 8.05e3, 8.1e3, 8.15e3, 8.2e3, 8.25e3, 8.3e3, 8.35e3, 8.4e3, 8.45e3, 8.5e3, 8.55e3, 8.6e3, 8.65e3, 8.7e3, 8.75e3, 8.8e3, 8.85e3, 8.9e3, 8.95e3, 9e3, 9.05e3, 9.1e3, 9.15e3, 9.2e3, 9.25e3, 9.3e3, 9.35e3, 9.4e3, 9.45e3, 9.5e3, 9.55e3, 9.6e3, 9.65e3, 9.7e3, 9.75e3, 9.8e3, 9.85e3, 9.9e3, 9.95e3, 1e4, 1.005e4, 1.01e4, 1.015e4, 1.02e4, 1.025e4, 1.03e4, 1.035e4, 1.04e4, 1.045e4, 1.05e4, 1.055e4, 1.06e4, 1.065e4, 1.07e4, 1.075e4, 1.08e4, 1.085e4, 1.09e4, 1.095e4, 1.1e4, 1.105e4, 1.11e4, 1.115e4, 1.12e4, 1.125e4, 1.13e4, 1.135e4, 1.14e4, 1.145e4, 1.15e4, 1.155e4, 1.16e4, 1.165e4, 1.17e4, 1.175e4, 1.18e4, 1.185e4, 1.19e4, 1.195e4, 1.2e4, 1.205e4, 1.21e4, 1.215e4, 1.22e4, 1.225e4, 1.23e4, 1.235e4, 1.24e4, 1.245e4, 1.25e4, 1.255e4, 1.26e4, 1.265e4, 1.27e4, 1.275e4, 1.28e4, 1.285e4, 1.29e4, 1.295e4, 1.3e4, 1.305e4, 1.31e4, 1.315e4, 1.32e4, 1.325e4, 1.33e4, 1.335e4, 1.34e4, 1.345e4, 1.35e4, 1.355e4, 1.36e4, 1.365e4, 1.37e4, 1.375e4, 1.38e4, 1.385e4, 1.39e4, 1.395e4, 1.4e4, 1.405e4, 1.41e4, 1.415e4, 1.42e4, 1.425e4, 1.43e4, 1.435e4, 1.44e4, 1.445e4, 1.45e4, 1.455e4, 1.46e4, 1.465e4, 1.47e4, 1.475e4, 1.48e4, 1.485e4, 1.49e4, 1.495e4, 1.5e4, 1.505e4, 1.51e4, 1.515e4, 1.52e4, 1.525e4, 1.53e4, 1.535e4, 1.54e4, 1.545e4, 1.55e4, 1.555e4, 1.56e4, 1.565e4, 1.57e4, 1.575e4, 1.58e4, 1.585e4, 1.59e4, 1.595e4, 1.6e4, 1.605e4, 1.61e4, 1.615e4, 1.62e4, 1.625e4, 1.63e4, 1.635e4, 1.64e4, 1.645e4, 1.65e4, 1.655e4, 1.66e4, 1.665e4, 1.67e4, 1.675e4, 1.68e4, 1.685e4, 1.69e4, 1.695e4, 1.7e4, 1.705e4, 1.71e4, 1.715e4, 1.72e4, 1.725e4, 1.73e4, 1.735e4, 1.74e4, 1.745e4, 1.75e4, 1.755e4, 1.76e4, 1.765e4, 1.77e4, 1.775e4, 1.78e4, 1.785e4, 1.79e4, 1.795e4, 1.8e4, 1.805e4, 1.81e4, 1.815e4, 1.82e4, 1.825e4, 1.83e4, 1.835e4, 1.84e4, 1.845e4, 1.85e4, 1.855e4, 1.86e4, 1.865e4, 1.87e4, 1.875e4, 1.88e4, 1.885e4, 1.89e4, 1.895e4, 1.9e4, 1.905e4, 1.91e4, 1.915e4, 1.92e4, 1.925e4, 1.93e4, 1.935e4, 1.94e4, 1.945e4, 1.95e4, 1.955e4, 1.96e4, 1.965e4, 1.97e4, 1.975e4, 1.98e4, 1.985e4, 1.99e4, 1.995e4, 2e4, 2.005e4, 2.01e4, 2.015e4, 2.02e4, 2.025e4, 2.03e4, 2.035e4, 2.04e4, 2.045e4, 2.05e4, 2.055e4, 2.06e4, 2.065e4, 2.07e4, 2.075e4, 2.08e4, 2.085e4, 2.09e4, 2.095e4, 2.1e4, 2.105e4, 2.11e4, 2.115e4, 2.12e4, 2.125e4, 2.13e4, 2.135e4, 2.14e4, 2.145e4, 2.15e4, 2.155e4, 2.16e4, 2.165e4, 2.17e4, 2.175e4, 2.18e4, 2.185e4, 2.19e4, 2.195e4, 2.2e4, 2.205e4, 2.21e4, 2.215e4, 2.22e4, 2.225e4, 2.23e4, 2.235e4, 2.24e4, 2.245e4, 2.25e4, 2.255e4, 2.26e4, 2.265e4, 2.27e4, 2.275e4, 2.28e4, 2.285e4, 2.29e4, 2.295e4, 2.3e4, 2.305e4, 2.31e4, 2.315e4, 2.32e4, 2.325e4, 2.33e4, 2.335e4, 2.34e4, 2.345e4, 2.35e4, 2.355e4, 2.36e4, 2.365e4, 2.37e4, 2.375e4, 2.38e4, 2.385e4, 2.39e4, 2.395e4, 2.4e4, 2.405e4, 2.41e4, 2.415e4, 2.42e4, 2.425e4, 2.43e4, 2.435e4, 2.44e4, 2.445e4, 2.45e4, 2.455e4, 2.46e4, 2.465e4, 2.47e4, 2.475e4, 2.48e4, 2.485e4, 2.49e4, 2.495e4, 2.5e4, 2.505e4, 2.51e4, 2.515e4, 2.52e4, 2.525e4, 2.53e4, 2.535e4, 2.54e4, 2.545e4, 2.55e4, 2.555e4, 2.56e4, 2.565e4, 2.57e4, 2.575e4, 2.58e4, 2.585e4, 2.59e4, 2.595e4, 2.6e4, 2.605e4, 2.61e4, 2.615e4, 2.62e4, 2.625e4, 2.63e4, 2.635e4, 2.64e4, 2.645e4, 2.65e4, 2.655e4, 2.66e4, 2.665e4, 2.67e4, 2.675e4, 2.68e4, 2.685e4, 2.69e4, 2.695e4, 2.7e4, 2.705e4, 2.71e4, 2.715e4, 2.72e4, 2.725e4, 2.73e4, 2.735e4, 2.74e4, 2.745e4, 2.75e4, 2.755e4, 2.76e4, 2.765e4, 2.77e4, 2.775e4, 2.78e4, 2.785e4, 2.79e4, 2.795e4, 2.8e4, 2.805e4, 2.81e4, 2.815e4, 2.82e4, 2.825e4, 2.83e4, 2.835e4, 2.84e4, 2.845e4, 2.85e4, 2.855e4, 2.86e4, 2.865e4, 2.87e4, 2.875e4, 2.88e4, 2.885e4, 2.89e4, 2.895e4, 2.9e4, 2.905e4, 2.91e4, 2.915e4, 2.92e4, 2.925e4, 2.93e4, 2.935e4, 2.94e4, 2.945e4, 2.95e4, 2.955e4, 2.96e4, 2.965e4, 2.97e4, 2.975e4, 2.98e4, 2.985e4, 2.99e4, 2.995e4, 3e4, 3.005e4, 3.01e4, 3.015e4, 3.02e4, 3.025e4, 3.03e4, 3.035e4, 3.04e4, 3.045e4, 3.05e4, 3.055e4, 3.06e4, 3.065e4, 3.07e4, 3.075e4, 3.08e4, 3.085e4, 3.09e4, 3.095e4, 3.1e4, 3.105e4, 3.11e4, 3.115e4, 3.12e4, 3.125e4, 3.13e4, 3.135e4, 3.14e4, 3.145e4, 3.15e4, 3.155e4, 3.16e4, 3.165e4, 3.17e4, 3.175e4, 3.18e4, 3.185e4, 3.19e4, 3.195e4, 3.2e4, 3.21e4, 3.22e4, 3.23e4, 3.24e4, 3.25e4, 3.26e4, 3.27e4, 3.28e4, 3.29e4, 3.3e4, 3.31e4, 3.32e4, 3.33e4, 3.34e4, 3.35e4, 3.36e4, 3.37e4, 3.38e4, 3.39e4, 3.4e4, 3.41e4, 3.42e4, 3.43e4, 3.44e4, 3.45e4, 3.46e4, 3.47e4, 3.48e4, 3.49e4, 3.5e4, 3.51e4, 3.52e4, 3.53e4, 3.54e4, 3.55e4, 3.56e4, 3.57e4, 3.58e4, 3.59e4, 3.6e4, 3.61e4, 3.62e4, 3.63e4, 3.64e4, 3.65e4, 3.66e4, 3.67e4, 3.68e4, 3.69e4, 3.7e4, 3.71e4, 3.72e4, 3.73e4, 3.74e4, 3.75e4, 3.76e4, 3.77e4, 3.78e4, 3.79e4, 3.8e4, 3.81e4, 3.82e4, 3.83e4, 3.84e4, 3.85e4, 3.86e4, 3.87e4, 3.88e4, 3.89e4, 3.9e4, 3.91e4, 3.92e4, 3.93e4, 3.94e4, 3.95e4, 3.96e4, 3.97e4, 3.98e4, 3.99e4, 4e4, 4.01e4, 4.02e4, 4.03e4, 4.04e4, 4.05e4, 4.06e4, 4.07e4, 4.08e4, 4.09e4, 4.1e4, 4.11e4, 4.12e4, 4.13e4, 4.14e4, 4.15e4, 4.16e4, 4.17e4, 4.18e4, 4.19e4, 4.2e4, 4.21e4, 4.22e4, 4.23e4, 4.24e4, 4.25e4, 4.26e4, 4.27e4, 4.28e4, 4.29e4, 4.3e4, 4.31e4, 4.32e4, 4.33e4, 4.34e4, 4.35e4, 4.36e4, 4.37e4, 4.38e4, 4.39e4, 4.4e4, 4.41e4, 4.42e4, 4.43e4, 4.44e4, 4.45e4, 4.46e4, 4.47e4, 4.48e4, 4.49e4, 4.5e4, 4.51e4, 4.52e4, 4.53e4, 4.54e4, 4.55e4, 4.56e4, 4.57e4, 4.58e4, 4.59e4, 4.6e4, 4.61e4, 4.62e4, 4.63e4, 4.64e4, 4.65e4, 4.66e4, 4.67e4, 4.68e4, 4.69e4, 4.7e4, 4.71e4, 4.72e4, 4.73e4, 4.74e4, 4.75e4, 4.76e4, 4.77e4, 4.78e4, 4.79e4, 4.8e4, 4.81e4, 4.82e4, 4.83e4, 4.84e4, 4.85e4, 4.86e4, 4.87e4, 4.88e4, 4.89e4, 4.9e4, 4.91e4, 4.92e4, 4.93e4, 4.94e4, 4.95e4, 4.96e4, 4.97e4, 4.98e4, 4.99e4, 5e4, 5.01e4, 5.02e4, 5.03e4, 5.04e4, 5.05e4, 5.06e4, 5.07e4, 5.08e4, 5.09e4, 5.1e4, 5.12e4, 5.14e4, 5.16e4, 5.18e4, 5.2e4, 5.22e4, 5.24e4, 5.26e4, 5.28e4, 5.3e4, 5.32e4, 5.34e4, 5.36e4, 5.38e4, 5.4e4, 5.42e4, 5.44e4, 5.46e4, 5.48e4, 5.5e4, 5.52e4, 5.54e4, 5.56e4, 5.58e4, 5.6e4, 5.62e4, 5.64e4, 5.66e4, 5.68e4, 5.7e4, 5.72e4, 5.74e4, 5.76e4, 5.78e4, 5.8e4, 5.82e4, 5.84e4, 5.86e4, 5.88e4, 5.9e4, 5.92e4, 5.94e4, 5.96e4, 5.98e4, 6e4, 6.02e4, 6.04e4, 6.06e4, 6.08e4, 6.1e4, 6.12e4, 6.14e4, 6.16e4, 6.18e4, 6.2e4, 6.22e4, 6.24e4, 6.26e4, 6.28e4, 6.3e4, 6.32e4, 6.34e4, 6.36e4, 6.38e4, 6.4e4, 6.42e4, 6.44e4, 6.46e4, 6.48e4, 6.5e4, 6.52e4, 6.54e4, 6.56e4, 6.58e4, 6.6e4, 6.62e4, 6.64e4, 6.66e4, 6.68e4, 6.7e4, 6.72e4, 6.74e4, 6.76e4, 6.78e4, 6.8e4, 6.82e4, 6.84e4, 6.86e4, 6.88e4, 6.9e4, 6.92e4, 6.94e4, 6.96e4, 6.98e4, 7e4, 7.02e4, 7.04e4, 7.06e4, 7.08e4, 7.1e4, 7.12e4, 7.14e4, 7.16e4, 7.18e4, 7.2e4, 7.22e4, 7.24e4, 7.26e4, 7.28e4, 7.3e4, 7.32e4, 7.34e4, 7.36e4, 7.38e4, 7.4e4, 7.42e4, 7.44e4, 7.46e4, 7.48e4, 7.5e4, 7.52e4, 7.54e4, 7.56e4, 7.58e4, 7.6e4, 7.62e4, 7.64e4, 7.66e4, 7.68e4, 7.7e4, 7.72e4, 7.74e4, 7.76e4, 7.78e4, 7.8e4, 7.82e4, 7.84e4, 7.86e4, 7.88e4, 7.9e4, 7.92e4, 7.94e4, 7.96e4, 7.98e4, 8e4]
    t = [301.154, 300.829, 300.504, 300.179, 299.853, 299.528, 299.203, 298.878, 298.553, 298.227, 297.902, 297.577, 297.252, 296.927, 296.602, 296.277, 295.951, 295.626, 295.301, 294.976, 294.651, 294.326, 294.001, 293.676, 293.351, 293.026, 292.701, 292.375, 292.05, 291.725, 291.4, 291.075, 290.75, 290.425, 290.1, 289.775, 289.45, 289.125, 288.8, 288.475, 288.15, 287.825, 287.5, 287.175, 286.85, 286.525, 286.2, 285.875, 285.55, 285.225, 284.9, 284.575, 284.25, 283.925, 283.601, 283.276, 282.951, 282.626, 282.301, 281.976, 281.651, 281.326, 281.001, 280.676, 280.351, 280.027, 279.702, 279.377, 279.052, 278.727, 278.402, 278.077, 277.753, 277.428, 277.103, 276.778, 276.453, 276.128, 275.804, 275.479, 275.154, 274.829, 274.505, 274.18, 273.855, 273.53, 273.205, 272.881, 272.556, 272.231, 271.906, 271.582, 271.257, 270.932, 270.607, 270.283, 269.958, 269.633, 269.309, 268.984, 268.659, 268.335, 268.01, 267.685, 267.36, 267.036, 266.711, 266.386, 266.062, 265.737, 265.413, 265.088, 264.763, 264.439, 264.114, 263.789, 263.465, 263.14, 262.816, 262.491, 262.166, 261.842, 261.517, 261.193, 260.868, 260.543, 260.219, 259.894, 259.57, 259.245, 258.921, 258.596, 258.272, 257.947, 257.623, 257.298, 256.974, 256.649, 256.325, 256, 255.676, 255.351, 255.027, 254.702, 254.378, 254.053, 253.729, 253.404, 253.08, 252.755, 252.431, 252.106, 251.782, 251.458, 251.133, 250.809, 250.484, 250.16, 249.836, 249.511, 249.187, 248.862, 248.538, 248.214, 247.889, 247.565, 247.241, 246.916, 246.592, 246.267, 245.943, 245.619, 245.294, 244.97, 244.646, 244.322, 243.997, 243.673, 243.349, 243.024, 242.7, 242.376, 242.051, 241.727, 241.403, 241.079, 240.754, 240.43, 240.106, 239.782, 239.457, 239.133, 238.809, 238.483, 238.161, 237.836, 237.512, 237.188, 236.864, 236.54, 236.215, 235.891, 235.567, 235.243, 234.919, 234.595, 234.27, 233.946, 233.622, 233.298, 232.974, 232.65, 232.326, 232.001, 231.677, 231.353, 231.029, 230.705, 230.381, 230.057, 229.733, 229.409, 229.085, 228.76, 228.436, 228.112, 227.788, 227.464, 227.14, 226.816, 226.492, 226.168, 225.844, 225.52, 225.196, 224.872, 224.548, 224.224, 223.9, 223.576, 223.252, 222.928, 222.604, 222.28, 221.956, 221.632, 221.308, 220.984, 220.66, 220.336, 220.013, 219.689, 219.365, 219.041, 218.717, 218.393, 218.069, 217.745, 217.421, 217.097, 216.774, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.65, 216.687, 216.736, 216.786, 216.836, 216.885, 216.935, 216.985, 217.034, 217.084, 217.134, 217.183, 217.233, 217.283, 217.332, 217.382, 217.432, 217.482, 217.531, 217.581, 217.631, 217.68, 217.73, 217.78, 217.829, 217.879, 217.929, 217.978, 218.028, 218.078, 218.127, 218.177, 218.227, 218.276, 218.326, 218.375, 218.425, 218.475, 218.524, 218.574, 218.624, 218.673, 218.723, 218.773, 218.822, 218.872, 218.922, 218.971, 219.021, 219.071, 219.12, 219.17, 219.22, 219.269, 219.319, 219.369, 219.418, 219.468, 219.517, 219.567, 219.617, 219.666, 219.716, 219.766, 219.815, 219.865, 219.915, 219.964, 220.014, 220.063, 220.113, 220.163, 220.212, 220.262, 220.312, 220.361, 220.411, 220.46, 220.51, 220.56, 220.609, 220.659, 220.709, 220.758, 220.808, 220.857, 220.907, 220.957, 221.006, 221.056, 221.106, 221.155, 221.205, 221.254, 221.304, 221.354, 221.403, 221.453, 221.502, 221.552, 221.602, 221.651, 221.701, 221.75, 221.8, 221.85, 221.899, 221.949, 221.999, 222.048, 222.098, 222.147, 222.197, 222.247, 222.296, 222.346, 222.395, 222.445, 222.494, 222.544, 222.594, 222.643, 222.693, 222.742, 222.792, 222.842, 222.891, 222.941, 222.99, 223.04, 223.09, 223.139, 223.189, 223.238, 223.288, 223.337, 223.387, 223.437, 223.486, 223.536, 223.585, 223.635, 223.685, 223.734, 223.784, 223.833, 223.883, 223.932, 223.982, 224.032, 224.081, 224.131, 224.18, 224.23, 224.279, 224.329, 224.379, 224.428, 224.478, 224.527, 224.577, 224.626, 224.676, 224.725, 224.775, 224.825, 224.874, 224.924, 224.973, 225.023, 225.072, 225.122, 225.171, 225.221, 225.271, 225.32, 225.37, 225.419, 225.469, 225.518, 225.568, 225.617, 225.667, 225.716, 225.766, 225.816, 225.865, 225.915, 225.964, 226.014, 226.063, 226.113, 226.162, 226.212, 226.261, 226.311, 226.36, 226.41, 226.46, 226.509, 226.559, 226.608, 226.658, 226.707, 226.757, 226.806, 226.856, 226.905, 226.955, 227.004, 227.054, 227.103, 227.153, 227.202, 227.252, 227.301, 227.351, 227.401, 227.45, 227.5, 227.549, 227.599, 227.648, 227.698, 227.747, 227.797, 227.846, 227.896, 227.945, 227.995, 228.044, 228.094, 228.143, 228.193, 228.242, 228.292, 228.341, 228.391, 228.44, 228.49, 228.589, 228.758, 229.033, 229.31, 229.587, 229.864, 230.141, 230.419, 230.695, 230.973, 231.25, 231.527, 231.804, 232.081, 232.358, 232.635, 232.912, 233.189, 233.466, 233.744, 234.021, 234.298, 234.575, 234.852, 235.129, 235.406, 235.682, 235.959, 236.236, 236.513, 236.79, 237.067, 237.344, 237.621, 237.898, 238.175, 238.452, 238.729, 239.005, 239.282, 239.559, 239.836, 240.113, 240.39, 240.667, 240.943, 241.22, 241.497, 241.774, 242.05, 242.327, 242.604, 242.881, 243.157, 243.434, 243.711, 243.988, 244.264, 244.541, 244.818, 245.094, 245.371, 245.648, 245.924, 246.201, 246.478, 246.754, 247.031, 247.308, 247.584, 247.861, 248.137, 248.414, 248.69, 248.967, 249.244, 249.52, 249.797, 250.073, 250.35, 250.626, 250.903, 251.179, 251.456, 251.732, 252.009, 252.285, 252.561, 252.838, 253.114, 253.391, 253.667, 253.944, 254.22, 254.496, 254.773, 255.049, 255.325, 255.602, 255.878, 256.154, 256.431, 256.707, 256.983, 257.26, 257.536, 257.812, 258.088, 258.365, 258.641, 258.917, 259.193, 259.47, 259.746, 260.022, 260.298, 260.575, 260.851, 261.127, 261.403, 261.679, 261.955, 262.232, 262.508, 262.784, 263.06, 263.336, 263.612, 263.888, 264.164, 264.44, 264.716, 264.992, 265.269, 265.545, 265.821, 266.097, 266.373, 266.649, 266.925, 267.201, 267.477, 267.753, 268.029, 268.304, 268.58, 268.856, 269.132, 269.408, 269.684, 269.96, 270.236, 270.512, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.65, 270.133, 269.582, 269.031, 268.48, 267.93, 267.379, 266.828, 266.277, 265.726, 265.176, 264.625, 264.074, 263.524, 262.973, 262.423, 261.872, 261.322, 260.771, 260.221, 259.67, 259.12, 258.57, 258.019, 257.469, 256.919, 256.369, 255.819, 255.268, 254.718, 254.168, 253.618, 253.068, 252.518, 251.969, 251.419, 250.869, 250.319, 249.769, 249.22, 248.67, 248.12, 247.571, 247.021, 246.471, 245.922, 245.372, 244.823, 244.273, 243.724, 243.175, 242.625, 242.076, 241.527, 240.978, 240.428, 239.879, 239.33, 238.781, 238.232, 237.683, 237.134, 236.585, 236.036, 235.487, 234.939, 234.39, 233.841, 233.292, 232.744, 232.195, 231.646, 231.098, 230.549, 230.001, 229.452, 228.904, 228.355, 227.807, 227.258, 226.71, 226.162, 225.614, 225.065, 224.517, 223.969, 223.421, 222.873, 222.325, 221.777, 221.229, 220.681, 220.133, 219.585, 219.037, 218.489, 217.941, 217.394, 216.846, 216.298, 215.751, 215.203, 214.655, 214.263, 213.872, 213.481, 213.09, 212.699, 212.308, 211.917, 211.526, 211.135, 210.744, 210.353, 209.962, 209.571, 209.181, 208.79, 208.399, 208.008, 207.618, 207.227, 206.837, 206.445, 206.055, 205.665, 205.274, 204.884, 204.493, 204.103, 203.712, 203.322, 202.931, 202.541, 202.151, 201.76, 201.37, 200.98, 200.59, 200.199, 199.809, 199.419, 199.029, 198.639]
    
    return np.interp(h, H, t)

def A(h):

    """
    Функция возвращает значение скорости звука в м/с,
    принимая в качестве входных параметров высоту полета в метрах.
    """

    H = [-2e3,-1.9e3,-1.8e3,-1.7e3,-1.6e3,-1.5e3,-1.4e3,-1.3e3,-1.2e3,-1.1e3,-1e3,-900,-800,-700,-600,-500,-400,-300,-200,-100,0,100,200,300,400,500,600,700,800,900,1e3,1.1e3,1.2e3,1.3e3,1.4e3,1.5e3,1.6e3,1.7e3,1.8e3,1.9e3,2e3,2.1e3,2.2e3,2.3e3,2.4e3,2.5e3,2.6e3,2.7e3,2.8e3,2.9e3,3e3,3.1e3,3.2e3,3.3e3,3.4e3,3.5e3,3.6e3,3.7e3,3.8e3,3.9e3,4e3,4.1e3,4.2e3,4.3e3,4.4e3,4.5e3,4.6e3,4.7e3,4.8e3,4.9e3,5e3,5.1e3,5.2e3,5.3e3,5.4e3,5.5e3,5.6e3,5.7e3,5.8e3,5.9e3,6e3,6.1e3,6.2e3,6.3e3,6.4e3,6.5e3,6.6e3,6.7e3,6.8e3,6.9e3,7e3,7.1e3,7.2e3,7.3e3,7.4e3,7.5e3,7.6e3,7.7e3,7.8e3,7.9e3,8e3,8.1e3,8.2e3,8.3e3,8.4e3,8.5e3,8.6e3,8.7e3,8.8e3,8.9e3,9e3,9.1e3,9.2e3,9.3e3,9.4e3,9.5e3,9.6e3,9.7e3,9.8e3,9.9e3,1e4,1.01e4,1.02e4,1.03e4,1.04e4,1.05e4,1.06e4,1.07e4,1.08e4,1.09e4,1.1e4,1.11e4,1.12e4,1.13e4,1.14e4,1.15e4,1.16e4,1.17e4,1.18e4,1.19e4,1.2e4,1.21e4,1.22e4,1.23e4,1.24e4,1.25e4,1.26e4,1.27e4,1.28e4,1.29e4,1.3e4,1.31e4,1.32e4,1.33e4,1.34e4,1.35e4,1.36e4,1.37e4,1.38e4,1.39e4,1.4e4,1.41e4,1.42e4,1.43e4,1.44e4,1.45e4,1.46e4,1.47e4,1.48e4,1.49e4,1.5e4,1.51e4,1.52e4,1.53e4,1.54e4,1.55e4,1.56e4,1.57e4,1.58e4,1.59e4,1.6e4,1.61e4,1.62e4,1.63e4,1.64e4,1.65e4,1.66e4,1.67e4,1.68e4,1.69e4,1.7e4,1.71e4,1.72e4,1.73e4,1.74e4,1.75e4,1.76e4,1.77e4,1.78e4,1.79e4,1.8e4,1.81e4,1.82e4,1.83e4,1.84e4,1.85e4,1.86e4,1.87e4,1.88e4,1.89e4,1.9e4,1.91e4,1.92e4,1.93e4,1.94e4,1.95e4,1.96e4,1.97e4,1.98e4,1.99e4,2e4,2.01e4,2.02e4,2.03e4,2.04e4,2.05e4,2.06e4,2.07e4,2.08e4,2.09e4,2.1e4,2.11e4,2.12e4,2.13e4,2.14e4,2.15e4,2.16e4,2.17e4,2.18e4,2.19e4,2.2e4,2.21e4,2.22e4,2.23e4,2.24e4,2.25e4,2.26e4,2.27e4,2.28e4,2.29e4,2.3e4,2.31e4,2.32e4,2.33e4,2.34e4,2.35e4,2.36e4,2.37e4,2.38e4,2.39e4,2.4e4,2.41e4,2.42e4,2.43e4,2.44e4,2.45e4,2.46e4,2.47e4,2.48e4,2.49e4,2.5e4,2.51e4,2.52e4,2.53e4,2.54e4,2.55e4,2.56e4,2.57e4,2.58e4,2.59e4,2.6e4,2.61e4,2.62e4,2.63e4,2.64e4,2.65e4,2.66e4,2.67e4,2.68e4,2.69e4,2.7e4,2.71e4,2.72e4,2.73e4,2.74e4,2.75e4,2.76e4,2.77e4,2.78e4,2.79e4,2.8e4,2.81e4,2.82e4,2.83e4,2.84e4,2.85e4,2.86e4,2.87e4,2.88e4,2.89e4,2.9e4,2.91e4,2.92e4,2.93e4,2.94e4,2.95e4,2.96e4,2.97e4,2.98e4,2.99e4,3e4,3.01e4,3.02e4,3.03e4,3.04e4,3.05e4,3.06e4,3.07e4,3.08e4,3.09e4,3.1e4,3.11e4,3.12e4,3.13e4,3.14e4,3.15e4,3.16e4,3.17e4,3.18e4,3.19e4,3.2e4,3.21e4,3.22e4,3.23e4,3.24e4,3.25e4,3.26e4,3.27e4,3.28e4,3.29e4,3.3e4,3.31e4,3.32e4,3.33e4,3.34e4,3.35e4,3.36e4,3.37e4,3.38e4,3.39e4,3.4e4,3.41e4,3.42e4,3.43e4,3.44e4,3.45e4,3.46e4,3.47e4,3.48e4,3.49e4,3.5e4,3.51e4,3.52e4,3.53e4,3.54e4,3.55e4,3.56e4,3.57e4,3.58e4,3.59e4,3.6e4,3.61e4,3.62e4,3.63e4,3.64e4,3.65e4,3.66e4,3.67e4,3.68e4,3.69e4,3.7e4,3.71e4,3.72e4,3.73e4,3.74e4,3.75e4,3.76e4,3.77e4,3.78e4,3.79e4,3.8e4,3.81e4,3.82e4,3.83e4,3.84e4,3.85e4,3.86e4,3.87e4,3.88e4,3.89e4,3.9e4,3.91e4,3.92e4,3.93e4,3.94e4,3.95e4,3.96e4,3.97e4,3.98e4,3.99e4,4e4,4.01e4,4.02e4,4.03e4,4.04e4,4.05e4,4.06e4,4.07e4,4.08e4,4.09e4,4.1e4,4.11e4,4.12e4,4.13e4,4.14e4,4.15e4,4.16e4,4.17e4,4.18e4,4.19e4,4.2e4,4.21e4,4.22e4,4.23e4,4.24e4,4.25e4,4.26e4,4.27e4,4.28e4,4.29e4,4.3e4,4.31e4,4.32e4,4.33e4,4.34e4,4.35e4,4.36e4,4.37e4,4.38e4,4.39e4,4.4e4,4.41e4,4.42e4,4.43e4,4.44e4,4.45e4,4.46e4,4.47e4,4.48e4,4.49e4,4.5e4,4.51e4,4.52e4,4.53e4,4.54e4,4.55e4,4.56e4,4.57e4,4.58e4,4.59e4,4.6e4,4.61e4,4.62e4,4.63e4,4.64e4,4.65e4,4.66e4,4.67e4,4.68e4,4.69e4,4.7e4,4.71e4,4.72e4,4.73e4,4.74e4,4.75e4,4.76e4,4.77e4,4.78e4,4.79e4,4.8e4,4.81e4,4.82e4,4.83e4,4.84e4,4.85e4,4.86e4,4.87e4,4.88e4,4.89e4,4.9e4,4.91e4,4.92e4,4.93e4,4.94e4,4.95e4,4.96e4,4.97e4,4.98e4,4.99e4,5e4,5.01e4,5.02e4,5.03e4,5.04e4,5.05e4,5.06e4,5.07e4,5.08e4,5.09e4,5.1e4,5.11e4,5.12e4,5.13e4,5.14e4,5.15e4,5.16e4,5.17e4,5.18e4,5.19e4,5.2e4,5.21e4,5.22e4,5.23e4,5.24e4,5.25e4,5.26e4,5.27e4,5.28e4,5.29e4,5.3e4,5.31e4,5.32e4,5.33e4,5.34e4,5.35e4,5.36e4,5.37e4,5.38e4,5.39e4,5.4e4,5.41e4,5.42e4,5.43e4,5.44e4,5.45e4,5.46e4,5.47e4,5.48e4,5.49e4,5.5e4,5.51e4,5.52e4,5.53e4,5.54e4,5.55e4,5.56e4,5.57e4,5.58e4,5.59e4,5.6e4,5.61e4,5.62e4,5.63e4,5.64e4,5.65e4,5.66e4,5.67e4,5.68e4,5.69e4,5.7e4,5.71e4,5.72e4,5.73e4,5.74e4,5.75e4,5.76e4,5.77e4,5.78e4,5.79e4,5.8e4,5.81e4,5.82e4,5.83e4,5.84e4,5.85e4,5.86e4,5.87e4,5.88e4,5.89e4,5.9e4,5.91e4,5.92e4,5.93e4,5.94e4,5.95e4,5.96e4,5.97e4,5.98e4,5.99e4,6e4,6.01e4,6.02e4,6.03e4,6.04e4,6.05e4,6.06e4,6.07e4,6.08e4,6.09e4,6.1e4,6.11e4,6.12e4,6.13e4,6.14e4,6.15e4,6.16e4,6.17e4,6.18e4,6.19e4,6.2e4,6.21e4,6.22e4,6.23e4,6.24e4,6.25e4,6.26e4,6.27e4,6.28e4,6.29e4,6.3e4,6.31e4,6.32e4,6.33e4,6.34e4,6.35e4,6.36e4,6.37e4,6.38e4,6.39e4,6.4e4,6.41e4,6.42e4,6.43e4,6.44e4,6.45e4,6.46e4,6.47e4,6.48e4,6.49e4,6.5e4,6.51e4,6.52e4,6.53e4,6.54e4,6.55e4,6.56e4,6.57e4,6.58e4,6.59e4,6.6e4,6.61e4,6.62e4,6.63e4,6.64e4,6.65e4,6.66e4,6.67e4,6.68e4,6.69e4,6.7e4,6.71e4,6.72e4,6.73e4,6.74e4,6.75e4,6.76e4,6.77e4,6.78e4,6.79e4,6.8e4,6.81e4,6.82e4,6.83e4,6.84e4,6.85e4,6.86e4,6.87e4,6.88e4,6.89e4,6.9e4,6.91e4,6.92e4,6.93e4,6.94e4,6.95e4,6.96e4,6.97e4,6.98e4,6.99e4,7e4,7.01e4,7.02e4,7.03e4,7.04e4,7.05e4,7.06e4,7.07e4,7.08e4,7.09e4,7.1e4,7.11e4,7.12e4,7.13e4,7.14e4,7.15e4,7.16e4,7.17e4,7.18e4,7.19e4,7.2e4,7.21e4,7.22e4,7.23e4,7.24e4,7.25e4,7.26e4,7.27e4,7.28e4,7.29e4,7.3e4,7.31e4,7.32e4,7.33e4,7.34e4,7.35e4,7.36e4,7.37e4,7.38e4,7.39e4,7.4e4,7.41e4,7.42e4,7.43e4,7.44e4,7.45e4,7.46e4,7.47e4,7.48e4,7.49e4,7.5e4,7.51e4,7.52e4,7.53e4,7.54e4,7.55e4,7.56e4,7.57e4,7.58e4,7.59e4,7.6e4,7.61e4,7.62e4,7.63e4,7.64e4,7.65e4,7.66e4,7.67e4,7.68e4,7.69e4,7.7e4,7.71e4,7.72e4,7.73e4,7.74e4,7.75e4,7.76e4,7.77e4,7.78e4,7.79e4,7.8e4,7.81e4,7.82e4,7.83e4,7.84e4,7.85e4,7.86e4,7.87e4,7.88e4,7.89e4,7.9e4,7.91e4,7.92e4,7.93e4,7.94e4,7.95e4,7.96e4,7.97e4,7.98e4,7.99e4,8e4]
    a = [347.888,347.512,347.135,346.759,346.382,346.005,345.627,345.249,344.87,344.491,344.111,343.732,343.35,342.971,342.589,342.207,341.826,341.443,341.062,340.678,340.294,339.91,339.526,339.14,338.755,338.37,337.984,337.596,337.209,336.823,336.435,336.046,335.658,335.269,334.879,334.489,334.098,333.707,333.315,332.923,332.532,332.139,331.746,331.352,330.958,330.563,330.168,329.773,329.377,328.98,328.584,328.186,327.789,327.39,326.991,326.592,326.192,325.79,325.392,324.991,324.589,324.16,323.784,323.381,322.977,322.573,322.169,321.764,321.358,320.952,320.545,320.138,319.731,319.323,318.914,318.505,318.095,317.685,317.275,316.863,316.452,316.04,315.627,315.214,314.8,314.385,313.971,313.555,313.139,312.723,312.306,311.888,311.47,311.051,310.632,310.212,309.792,309.371,308.95,308.528,308.105,307.682,307.258,306.834,306.409,305.984,305.558,305.131,304.704,304.277,303.848,303.419,302.99,302.56,302.129,301.698,301.265,300.833,300.4,299.966,299.532,299.096,298.661,298.225,297.788,297.35,296.912,296.474,296.034,295.594,295.154,295.07,295.069,295.07,295.07,295.069,295.07,295.07,295.07,295.07,295.07,295.07,295.067,295.07,295.07,295.069,295.07,295.069,295.07,295.07,295.07,295.069,295.069,295.07,295.069,295.07,295.07,295.069,295.069,295.07,295.069,295.07,295.07,295.069,295.07,295.07,295.07,295.069,295.069,295.07,295.069,295.07,295.07,295.07,295.069,295.069,295.07,295.07,295.069,295.069,295.07,295.069,295.07,295.069,295.069,295.07,295.07,295.07,295.069,295.071,295.069,295.07,295.069,295.069,295.069,295.07,295.07,295.069,295.07,295.07,295.069,295.07,295.07,295.07,295.069,295.069,295.07,295.069,295.07,295.07,295.07,295.07,295.069,295.069,295.07,295.069,295.07,295.069,295.07,295.069,295.069,295.095,295.162,295.23,295.297,295.365,295.433,295.5,295.568,295.635,295.703,295.77,295.838,295.905,295.973,296.04,296.108,296.175,296.242,296.31,296.377,296.444,296.511,296.579,296.646,296.713,296.78,296.848,296.915,296.982,297.049,297.116,297.184,297.251,297.318,297.385,297.452,297.519,297.586,297.653,297.72,297.787,297.854,297.921,297.988,298.055,298.122,298.189,298.255,298.322,298.389,298.456,298.523,298.589,298.656,298.723,298.79,298.856,298.923,298.989,299.056,299.123,299.19,299.256,299.323,299.389,299.456,299.522,299.589,299.655,299.722,299.788,299.855,299.921,299.988,300.054,300.12,300.187,300.254,300.32,300.386,300.452,300.518,300.585,300.651,300.718,300.784,300.85,300.915,300.982,301.049,301.114,301.18,301.246,301.313,301.379,301.445,301.51,301.576,301.643,301.709,301.775,301.841,301.906,301.972,302.039,302.103,302.17,302.235,302.301,302.368,302.434,302.5,302.564,302.631,302.697,302.762,302.828,302.894,302.96,303.025,303.09,303.201,303.385,303.569,303.752,303.935,304.119,304.302,304.484,304.667,304.85,305.032,305.215,305.398,305.579,305.762,305.944,306.126,306.307,306.489,306.67,306.852,307.033,307.214,307.396,307.577,307.758,307.938,308.119,308.3,308.48,308.66,308.84,309.021,309.201,309.381,309.56,309.74,309.92,310.099,310.278,310.458,310.636,310.816,310.994,311.173,311.352,311.531,311.709,311.887,312.066,312.244,312.422,312.6,312.778,312.955,313.133,313.311,313.488,313.666,313.842,314.02,314.197,314.373,314.55,314.727,314.9,315.08,315.256,315.433,315.609,315.785,315.96,316.136,316.312,316.488,316.663,316.839,317.014,317.19,317.364,317.539,317.714,317.889,318.063,318.238,318.412,318.587,318.762,318.936,319.11,319.284,319.458,319.632,319.805,319.979,320.153,320.326,320.499,320.672,320.845,321.018,321.191,320.902,321.537,321.71,321.882,322.054,322.227,322.399,322.571,322.743,322.914,323.087,323.258,323.431,323.601,323.774,323.945,324.116,324.287,324.458,324.629,324.8,324.978,325.141,325.311,325.482,325.653,325.824,325.994,326.164,326.334,326.504,326.673,326.844,327.013,327.183,327.351,327.521,327.69,327.859,328.029,328.197,328.366,328.536,328.704,328.825,329.041,329.211,329.411,329.547,329.715,329.798,329.798,329.799,329.798,329.799,329.799,329.799,329.799,329.799,329.837,329.799,329.799,329.798,329.798,329.798,329.799,329.798,329.799,329.798,329.798,329.799,329.799,329.798,329.798,329.797,329.799,329.799,329.799,329.799,329.799,329.799,329.799,329.732,329.799,329.799,329.799,329.799,329.799,329.799,329.762,329.725,329.606,329.484,329.318,329.148,328.981,328.811,328.645,328.474,328.339,328.201,328.003,327.8,327.633,327.462,327.295,327.124,326.956,326.785,326.618,326.446,326.279,326.107,325.939,325.768,325.6,325.428,325.26,325.088,324.92,324.747,324.579,324.407,324.238,324.065,323.897,323.724,323.555,323.382,323.213,323.04,322.871,322.698,322.528,322.355,322.185,322.012,321.842,321.668,321.498,321.324,321.154,320.98,320.81,320.635,320.465,320.29,320.119,319.945,319.774,319.599,319.429,319.254,319.083,318.907,318.736,318.56,318.389,318.213,318.042,317.866,317.694,317.518,317.346,317.17,316.998,316.821,316.649,316.473,316.3,316.123,315.951,315.774,315.601,315.424,315.251,315.074,314.901,314.723,314.55,314.372,314.199,314.021,313.847,313.669,313.495,313.316,313.142,312.964,312.79,312.611,312.437,312.258,312.083,311.904,311.729,311.55,311.375,311.195,311.02,310.841,310.665,310.486,310.31,310.13,309.954,309.774,309.598,309.418,309.242,309.061,308.885,308.704,308.528,308.347,308.17,307.988,307.811,307.629,307.452,307.271,307.094,306.912,306.735,306.553,306.376,306.194,306.015,305.832,305.654,305.471,305.294,305.111,304.932,304.749,304.571,304.387,304.209,304.025,303.846,303.662,303.483,303.3,303.12,302.936,302.756,302.571,302.392,302.207,302.027,301.842,301.662,301.477,301.297,301.111,300.931,300.746,300.565,300.379,300.198,300.012,299.831,299.645,299.463,299.277,299.096,298.909,298.648,298.379,298.277,298.171,297.989,297.802,297.619,297.432,297.249,297.061,296.879,296.691,296.508,296.319,296.136,295.947,295.764,295.576,295.392,295.203,295.019,294.83,294.646,294.456,294.272,294.083,293.898,293.708,293.576,293.44,293.307,293.171,293.039,292.903,292.771,292.635,292.503,292.366,292.234,292.097,291.965,291.828,291.696,291.559,291.426,291.289,291.157,291.02,290.887,290.75,290.617,290.48,290.373,290.264,290.104,289.938,289.805,289.668,289.534,289.396,289.263,289.125,288.991,288.853,288.72,288.581,288.447,288.309,288.175,288.037,287.903,287.764,287.667,287.567,287.391,287.211,287.08,286.945,286.81,286.671,286.536,286.397,286.263,286.123,285.988,285.849,285.714,285.575,285.44,285.3,285.165,285.025,284.889,284.749,284.614,284.474,284.17,283.855,283.888,283.923,283.787,283.646,283.51,283.37,283.233,283.093,282.956,282.815,282.679,282.538]
    
    return np.interp(h, H, a)

def Nu(t):

    """
    Функция возвращает значение коэффициента кинематической вязкости в м^2/с,
    принимая в качестве входных параметров температуру воздуха в К (можно передать
    функцию Т(), дающую температуру воздуха от высоты).
    """

    T = [223.15, 253.15, 273.15, 283.15, 293.15, 303.15, 313.15, 323.15]
    nu = [9.23*1e-6, 11.61*1e-6, 13.28*1e-6, 14.16*1e-6, 15.06*1e-6, 16*1e-6, 16.96*1e-6, 17.95*1e-6]

    return np.interp(t, T, nu)
    
### Окончание параметров стандартной атмосферы


### Параметры, относящиеся к лобовому сопротивлению

def Eta_M(m, x):

    """
    Функция возвращает значение коэффициента eta_M (трения плоской пластинки),
    обозначенного на рис. 9  в методичке Захарченко или на рис. 4.3 в ДПБЛА.
    В качестве аргумента требует число Маха и координату точки перехода.
    """

    if x < 0.1:

        M = [0, 0.285, 0.555, 0.762142857, 0.926428571, 1.117142857, 1.337857143, 1.543571429, 1.722142857, 1.885714286, 2.052857143, 2.226428571, 2.415714286, 2.562142857, 2.792142857, 2.969285714, 3.115714286, 3.252857143, 3.44, 3.628571429, 3.883571429, 4.040714286, 4.219285714, 4.390714286, 4.576428571, 4.807142857, 4.945, 5]
        eta_m = [1, 0.987339972, 0.968278805, 0.949786629, 0.932290185, 0.906543385, 0.871550498, 0.838549075, 0.812802276, 0.786770982, 0.762446657, 0.735135135, 0.708250356, 0.685775249, 0.655049787, 0.632290185, 0.613513514, 0.596443812, 0.573399716, 0.551351351, 0.521052632, 0.505263158, 0.485490754, 0.470128023, 0.452062589, 0.433997155, 0.423186344, 0.418492176]

        return np.interp(m, M, eta_m)
    
    if x >= 0.1 and x < 0.35:

        M = [0, 0.165548737, 0.355358927, 0.657199943, 0.904095904, 1.12244898, 1.312972742, 1.52561724, 1.771086057, 1.993720565, 2.174254317, 2.364778079, 2.53175396, 2.752247752, 2.952047952, 3.142571714, 3.32453261, 3.508634223, 3.672042243, 3.80405309, 3.940345369, 4.08734123, 4.203653489, 4.374910803, 4.489795918, 4.665334665, 4.807335522, 4.935064935, 5]
        eta_m = [1, 0.996151105, 0.984746971, 0.962081254, 0.935851746, 0.908339273, 0.87740556, 0.845046329, 0.807127584, 0.773057733, 0.748681397, 0.724305061, 0.703635068, 0.674411974, 0.647469708, 0.622523165, 0.599287242, 0.578902352, 0.557947256, 0.54383464, 0.527441197, 0.512758375, 0.502209551, 0.483535282, 0.474982181, 0.457733428, 0.446899501, 0.436065574, 0.431789024]

        return np.interp(m, M, eta_m)
    
    if x >= 0.35 and x < 0.55:

        M = [0, 0.137857143, 0.355714286, 0.560714286, 0.777857143, 0.926428571, 1.058571429, 1.215, 1.356428571, 1.537857143, 1.684285714, 1.912142857, 2.088571429, 2.252857143, 2.413571429, 2.574285714, 2.758571429, 2.932857143, 3.092142857, 3.306428571, 3.495, 3.712142857, 3.916428571, 4.108571429, 4.354285714, 4.552857143, 4.678571429, 4.862142857, 5]
        eta_m = [1, 0.998717035, 0.989451176, 0.973770492, 0.953670706, 0.936564505, 0.921881682, 0.901069138, 0.883677833, 0.862295082, 0.843050606, 0.812401996, 0.787027798, 0.761938703, 0.741696365, 0.720741269, 0.696650036, 0.675267284, 0.654882395, 0.62808268, 0.607127584, 0.581325731, 0.560370634, 0.541411262, 0.51831789, 0.501069138, 0.491375624, 0.477690663, 0.468282252]

        return np.interp(m, M, eta_m)

    if x >= 0.55 and x < 0.7:

        M = [0, 0.141428571, 0.373571429, 0.594285714, 0.851428571, 1.026428571, 1.247857143, 1.483571429, 1.764285714, 1.92, 2.074285714, 2.252857143, 2.458571429, 2.659285714, 2.842857143, 3.037857143, 3.244285714, 3.417857143, 3.632857143, 3.756428571, 3.882142857, 4.02, 4.137857143, 4.252142857, 4.361428571, 4.512142857, 4.677857143, 4.825714286, 4.934285714, 5]
        eta_m = [1, 0.997430774, 0.987011133, 0.972023979, 0.947901798, 0.929917214, 0.906080502, 0.882529261, 0.849414787, 0.827861833, 0.806308878, 0.782186697, 0.755067085, 0.729517556, 0.704538967, 0.681558664, 0.657293748, 0.636311733, 0.613188695, 0.598772481, 0.587639166, 0.573508421, 0.564373394, 0.55324008, 0.545960605, 0.533257208, 0.520553811, 0.510847845, 0.504424779, 0.500570939]

        return np.interp(m, M, eta_m)

    if x >= 0.7 and x < 0.85:

        M = [0, 0.233571429, 0.45, 0.595714286, 0.727142857, 0.851428571, 1.075, 1.168571429, 1.376428571, 1.454285714, 1.636428571, 1.731428571, 1.933571429, 2.019285714, 2.2, 2.285, 2.469285714, 2.546428571, 2.782142857, 2.930714286, 3.17, 3.254285714, 3.487142857, 3.602857143, 3.851428571, 3.963571429, 4.085714286, 4.215714286, 4.323571429, 4.425714286, 4.543571429, 4.626428571, 4.749285714, 4.877857143, 5]
        eta_m = [1, 0.997002569, 0.991721382, 0.984156437, 0.976306023, 0.967170996, 0.949614616, 0.941621467, 0.919069369, 0.911789894, 0.891807023, 0.881815587, 0.85783614, 0.848558379, 0.828575507, 0.81915501, 0.797316586, 0.789466172, 0.76206109, 0.746788467, 0.721809877, 0.713103055, 0.6915501, 0.680702255, 0.660576649, 0.651727091, 0.643020268, 0.633028832, 0.626034827, 0.617756209, 0.610904939, 0.604339138, 0.597345133, 0.589780188, 0.58150157]

        return np.interp(m, M, eta_m)
    
    if x >= 0.85 and x < 0.95:

        M = [0, 0.249285714, 0.576428571, 0.806428571, 1.071428571, 1.411428571, 1.722142857, 2.11, 2.502857143, 3.208571429, 3.802142857, 4.325, 4.699285714, 5]
        eta_m = [1, 0.996863863, 0.992729865, 0.988310763, 0.980185317, 0.967355666, 0.954240912, 0.935851746, 0.911617962, 0.866856736, 0.825659301, 0.788738418, 0.761938703, 0.741696365]

        return np.interp(m, M, eta_m)

    if x >= 0.95:

        M = [0, 0.312857143, 0.697857143, 1.055, 1.474285714, 1.829285714, 2.229285714, 2.517857143, 2.849285714, 3.175714286, 3.553571429, 3.889285714, 4.199285714, 4.463571429, 4.655714286, 4.875714286, 5]
        eta_m = [1, 0.997866287, 0.994736842, 0.989331437, 0.981792319, 0.971692745, 0.962731152, 0.952631579, 0.93997155, 0.926600284, 0.912375533, 0.896728307, 0.881792319, 0.868136558, 0.859032717, 0.850213371, 0.845519203]

        return np.interp(m, M, eta_m)

def C_f(re, x):

    """
    Функция возвращает значение коэффициента 2c_f (удвоенный коэф трения плоской пластинки),
    обозначенного на рис. 7  в методичке Захарченко или на рис. 4.2 в ДПБЛА.
    В качестве аргумента требует число Рейнольдса и координату точки перехода.
    """

    if x < 0.05:

        Re = [1e6, 1.05*1e6, 2*1e6, 3*1e6, 4*1e6, 5*1e6, 6*1e6, 7*1e6, 8*1e6, 9*1e6, 1e7, 1.05*1e7, 2*1e7, 3*1e7, 4*1e7, 5*1e7, 6*1e7, 7*1e7, 8*1e7, 9*1e7, 1e8, 1.05*1e8, 2*1e8, 3*1e8, 4*1e8, 5*1e8]
        c_f = [9*1e-3, 8.35*1e-3, 7.9*1e-3, 7.35*1e-3, 6.95*1e-3, 6.72*1e-3, 6.5*1e-3, 6.4*1e-3, 6.22*1e-3, 6.1*1e-3, 5.98*1e-3, 5.6*1e-3, 5.4*1e-3, 5.05*1e-3, 4.85*1e-3, 4.7*1e-3, 4.505*1e-3, 4.48*1e-3, 4.4*1e-3, 4.35*1e-3, 4.25*1e-3, 4*1e-3, 3.85*1e-3, 3.6*1e-3, 3.5*1e-3, 3.45*1e-3]

        return np.interp(re, Re, c_f)

    if x >= 0.05 and x < 0.15:

        Re = [1e6, 1.05*1e6, 2*1e6, 3*1e6, 4*1e6, 5*1e6, 6*1e6, 7*1e6, 8*1e6, 9*1e6, 1e7, 1.05*1e7, 2*1e7, 3*1e7, 4*1e7, 5*1e7, 6*1e7, 7*1e7, 8*1e7, 9*1e7, 1e8, 1.05*1e8, 2*1e8, 3*1e8, 4*1e8, 5*1e8]
        c_f = [8.5*1e-3, 7.9*1e-3, 7.5*1e-3, 6.98*1e-3, 6.6*1e-3, 6.3*1e-3, 6.1*1e-3, 5.95*1e-3, 5.8*1e-3, 5.7*1e-3, 5.6*1e-3, 5.25*1e-3, 5.0*1e-3, 4.7*1e-3, 4.5*1e-3, 4.4*1e-3, 4.2*1e-3, 4.1*1e-3, 4.05*1e-3, 3.95*1e-3, 3.9*1e-3, 3.7*1e-3, 3.52*1e-3, 3.4*1e-3, 3.25*1e-3, 3.2*1e-3]

        return np.interp(re, Re, c_f)
    
    if x >= 0.15 and x < 0.25:

        Re = [1e6, 1.05*1e6, 2*1e6, 3*1e6, 4*1e6, 5*1e6, 6*1e6, 7*1e6, 8*1e6, 9*1e6, 1e7, 1.05*1e7, 2*1e7, 3*1e7, 4*1e7, 5*1e7, 6*1e7, 7*1e7, 8*1e7, 9*1e7, 1e8, 1.05*1e8, 2*1e8, 3*1e8, 4*1e8, 5*1e8]
        c_f = [8*1e-3, 7.45*1e-3, 6.95*1e-3, 6.45*1e-3, 6.05*1e-3, 5.8*1e-3, 5.6*1e-3, 5.48*1e-3, 5.4*1e-3, 5.22*1e-3, 5.1*1e-3, 4.8*1e-3, 4.55*1e-3, 4.3*1e-3, 4.1*1e-3, 3.95*1e-3, 3.85*1e-3, 3.75*1e-3, 3.7*1e-3, 3.65*1e-3, 3.58*1e-3, 3.4*1e-3, 3.25*1e-3, 3.05*1e-3, 2.95*1e-3, 2.9*1e-3]

        return np.interp(re, Re, c_f)

    if x >= 0.25 and x < 0.35:

        Re = [1e6, 1.05*1e6, 2*1e6, 3*1e6, 4*1e6, 5*1e6, 6*1e6, 7*1e6, 8*1e6, 9*1e6, 1e7, 1.05*1e7, 2*1e7, 3*1e7, 4*1e7, 5*1e7, 6*1e7, 7*1e7, 8*1e7, 9*1e7, 1e8, 1.05*1e8, 2*1e8, 3*1e8, 4*1e8, 5*1e8]
        c_f = [7.5*1e-3, 6.9*1e-3, 6.45*1e-3, 5.9*1e-3, 5.52*1e-3, 5.3*1e-3, 5.1*1e-3, 4.98*1e-3, 4.85*1e-3, 4.75*1e-3, 4.65*1e-3, 4.4*1e-3, 4.1*1e-3, 3.9*1e-3, 3.7*1e-3, 3.52*1e-3, 3.45*1e-3, 3.4*1e-3, 3.35*1e-3, 3.25*1e-3, 3.22*1e-3, 3.05*1e-3, 2.95*1e-3, 2.75*1e-3, 2.6*1e-3, 2.55*1e-3]

        return np.interp(re, Re, c_f)

    if x >= 0.35 and x < 0.45:

        Re = [1e6, 1.05*1e6, 2*1e6, 3*1e6, 4*1e6, 5*1e6, 6*1e6, 7*1e6, 8*1e6, 9*1e6, 1e7, 1.05*1e7, 2*1e7, 3*1e7, 4*1e7, 5*1e7, 6*1e7, 7*1e7, 8*1e7, 9*1e7, 1e8, 1.05*1e8, 2*1e8, 3*1e8, 4*1e8, 5*1e8]
        c_f = [6.95*1e-3, 6.25*1e-3, 5.85*1e-3, 5.4*1e-3, 5.0*1e-3, 4.75*1e-3, 4.6*1e-3, 4.48*1e-3, 4.4*1e-3, 4.25*1e-3, 4.2*1e-3, 3.85*1e-3, 3.6*1e-3, 3.45*1e-3, 3.25*1e-3, 3.2*1e-3, 3.05*1e-3, 2.95*1e-3, 2.9*1e-3, 2.85*1e-3, 2.8*1e-3, 2.6*1e-3, 2.5*1e-3, 2.4*1e-3, 2.3*1e-3, 2.25*1e-3]

        return np.interp(re, Re, c_f)

    if x >= 0.45 and x < 0.55:

        Re = [1e6, 1.05*1e6, 2*1e6, 3*1e6, 4*1e6, 5*1e6, 6*1e6, 7*1e6, 8*1e6, 9*1e6, 1e7, 1.05*1e7, 2*1e7, 3*1e7, 4*1e7, 5*1e7, 6*1e7, 7*1e7, 8*1e7, 9*1e7, 1e8, 1.05*1e8, 2*1e8, 3*1e8, 4*1e8, 5*1e8]
        c_f = [6.3*1e-3, 5.7*1e-3, 5.3*1e-3, 4.8*1e-3, 4.5*1e-3, 4.25*1e-3, 4.08*1e-3, 3.95*1e-3, 3.85*1e-3, 3.75*1e-3, 3.7*1e-3, 3.4*1e-3, 3.2*1e-3, 2.95*1e-3, 2.8*1e-3, 2.7*1e-3, 2.6*1e-3, 2.505*1e-3, 2.5*1e-3, 2.45*1e-3, 2.4*1e-3, 2.25*1e-3, 2.2*1e-3, 2.05*1e-3, 1.98*1e-3, 1.92*1e-3]

        return np.interp(re, Re, c_f)

    if x >= 0.55 and x < 0.65:

        Re = [1e6, 1.05*1e6, 2*1e6, 3*1e6, 4*1e6, 5*1e6, 6*1e6, 7*1e6, 8*1e6, 9*1e6, 1e7, 1.05*1e7, 2*1e7, 3*1e7, 4*1e7, 5*1e7, 6*1e7, 7*1e7, 8*1e7, 9*1e7, 1e8, 1.05*1e8, 2*1e8, 3*1e8, 4*1e8, 5*1e8]
        c_f = [5.7*1e-3, 5.1*1e-3, 4.72*1e-3, 4.25*1e-3, 3.92*1e-3, 3.7*1e-3, 3.5*1e-3, 3.4*1e-3, 3.3*1e-3, 3.2*1e-3, 3.1*1e-3, 2.85*1e-3, 2.7*1e-3, 2.45*1e-3, 2.35*1e-3, 2.25*1e-3, 2.2*1e-3, 2.1*1e-3, 2.05*1e-3, 2.02*1e-3, 1.98*1e-3, 1.85*1e-3, 1.8*1e-3, 1.7*1e-3, 1.65*1e-3, 1.6*1e-3]

        return np.interp(re, Re, c_f)

    if x >= 0.65 and x < 0.75:

        Re = [1e6, 1.05*1e6, 2*1e6, 3*1e6, 4*1e6, 5*1e6, 6*1e6, 7*1e6, 8*1e6, 9*1e6, 1e7, 1.05*1e7, 2*1e7, 3*1e7, 4*1e7, 5*1e7, 6*1e7, 7*1e7, 8*1e7, 9*1e7, 1e8, 1.05*1e8, 2*1e8, 3*1e8, 4*1e8, 5*1e8]
        c_f = [5.1*1e-3, 4.5*1e-3, 4.14*1e-3, 3.7*1e-3, 3.34*1e-3, 3.15*1e-3, 2.92*1e-3, 2.85*1e-3, 2.75*1e-3, 2.65*1e-3, 2.5*1e-3, 2.3*1e-3, 2.2*1e-3, 1.95*1e-3, 1.9*1e-3, 1.8*1e-3, 1.75*1e-3, 1.7*1e-3, 1.6*1e-3, 1.55*1e-3, 1.5*1e-3, 1.45*1e-3, 1.4*1e-3, 1.35*1e-3, 1.3*1e-3, 1.25*1e-3]

        return np.interp(re, Re, c_f)

    if x >= 0.75 and x < 0.85:

        Re = [1e6, 1.05*1e6, 2*1e6, 3*1e6, 4*1e6, 5*1e6, 6*1e6, 7*1e6, 8*1e6, 9*1e6, 1e7, 1.05*1e7, 2*1e7, 3*1e7, 4*1e7, 5*1e7, 6*1e7, 7*1e7, 8*1e7, 9*1e7, 1e8, 1.05*1e8, 2*1e8, 3*1e8, 4*1e8, 5*1e8]
        c_f = [4.4*1e-3, 3.8*1e-3, 3.46*1e-3, 3.05*1e-3, 2.66*1e-3, 2.5*1e-3, 2.22*1e-3, 2.2*1e-3, 2.1*1e-3, 2.0*1e-3, 1.8*1e-3, 1.65*1e-3, 1.6*1e-3, 1.35*1e-3, 1.3*1e-3, 1.25*1e-3, 1.2*1e-3, 1.15*1e-3, 1.05*1e-3, 1.00*1e-3, 0.95*1e-3, 0.9*1e-3, 0.88*1e-3, 0.85*1e-3, 0.82*1e-3, 0.8*1e-3]

        return np.interp(re, Re, c_f)

    if x >= 0.85 and x < 0.95:

        Re = [1e6, 1.05*1e6, 2*1e6, 3*1e6, 4*1e6, 5*1e6, 6*1e6, 7*1e6, 8*1e6, 9*1e6, 1e7, 1.05*1e7, 2*1e7, 3*1e7, 4*1e7, 5*1e7, 6*1e7, 7*1e7, 8*1e7, 9*1e7, 1e8, 1.05*1e8, 2*1e8]
        c_f = [3.6*1e-3, 3.05*1e-3, 2.7*1e-3, 2.35*1e-3, 2.15*1e-3, 1.95*1e-3, 1.85*1e-3, 1.75*1e-3, 1.72*1e-3, 1.7*1e-3, 1.6*1e-3, 1.4*1e-3, 1.3*1e-3, 1.15*1e-3, 1.1*1e-3, 1.05*1e-3, 0.95*1e-3, 0.85*1e-3, 0.75*1e-3, 0.7*1e-3, 0.65*1e-3, 0.6*1e-3, 0.55*1e-3]

        return np.interp(re, Re, c_f)

    if x >= 0.95:

        Re = [1e6, 1.05*1e6, 2*1e6, 3*1e6, 4*1e6, 5*1e6, 6*1e6, 7*1e6, 8*1e6, 9*1e6, 1e7, 1.05*1e7, 2*1e7, 3*1e7, 4*1e7, 5*1e7, 6*1e7, 7*1e7, 8*1e7, 9*1e7, 1e8]
        c_f = [2.75*1e-3, 2.25*1e-3, 1.95*1e-3, 1.6*1e-3, 1.4*1e-3, 1.2*1e-3, 1.1*1e-3, 1.02*1e-3, 0.98*1e-3, 0.95*1e-3, 0.9*1e-3, 0.75*1e-3, 0.7*1e-3, 0.53*1e-3, 0.47*1e-3, 0.45*1e-3, 0.4*1e-3, 0.35*1e-3, 0.32*1e-3, 0.3*1e-3, 0.28*1e-3]

        return np.interp(re, Re, c_f)

def K_kon(m, l):

    """
    Функция возвращает поправочный коэффициент для расчета сопротивления трения
    конического корпуса (конического, а НЕ конического + цилиндрический), график
    на рис. 4.10 в ДПБЛА. В качестве аргументов подаются число Маха и удлинение носовой части.
    При числах Маха больше 7 и удлинении меньше 3 погрешность коэффициента может составлять до 5%.
    Во избежании этого старайтесь выбирать удлинение из ряда значений (1.5, 2, 3, 4, 5).
    """

    if l >= 4.5:

        M = [0, 0.819546959, 1.651819801, 2.265207432, 2.738610333, 3.316365487, 3.970475948, 4.400610842, 4.838381267, 5.372868414, 5.820819547, 6.240773734, 6.675998982, 7.101043523, 7.444642403, 7.772970221, 8.236192415, 8.59251718, 8.966658183, 9.31280224, 9.625858997, 9.857470094, 10]
        K = [1, 1, 1, 1.018617021, 1.03856383, 1.094414894, 1.162234043, 1.215425532, 1.27393617, 1.345744681, 1.410904255, 1.472074468, 1.542553191, 1.606382979, 1.659574468, 1.716755319, 1.789893617, 1.85106383, 1.912234043, 1.980053191, 2.034574468, 2.073138298, 2.097074468]

        return np.interp(m, M, K)

    if l >= 3.5 and l < 4.5:

        M = [0, 0.542122678, 1.264952914, 1.840162891, 1.97251209, 2.143038941, 2.3237465, 2.476457114, 2.807330109, 3.288368542, 3.675235429, 4.03410537, 4.392975312, 4.756935607, 5.110715195, 5.395775006, 5.716467294, 5.976075337, 6.240773734, 6.495291423, 6.737083227, 6.973784678, 7.213031306, 7.449732756, 7.719521507, 8.080936625, 8.304912191, 8.55179435, 8.775769916, 9.09137185, 9.310257063, 9.569865106, 9.793840672, 9.928735047, 10]
        K = [1, 1, 1, 1.005319149, 1.011968085, 1.027925532, 1.051861702, 1.069148936, 1.119680851, 1.182180851, 1.236702128, 1.287234043, 1.344414894, 1.406914894, 1.464095745, 1.519946809, 1.57712766, 1.632978723, 1.6875, 1.739361702, 1.789893617, 1.844414894, 1.900265957, 1.953457447, 2.019946809, 2.093085106, 2.152925532, 2.216755319, 2.277925532, 2.35106383, 2.409574468, 2.480053191, 2.537234043, 2.575797872, 2.602393617]

        return np.interp(m, M, K)

    if l >= 2.5 and l < 3.5:

        M = [0, 0.295315682, 0.575356415, 0.791751527, 1.056517312, 1.397657841, 1.634419552, 1.830448065, 2.018839104, 2.179226069, 2.362525458, 2.571283096, 2.75712831, 2.996435845, 3.261201629, 3.518329939, 3.897657841, 4.24898167, 4.50101833, 4.74287169, 5.025458248, 5.285132383, 5.537169043, 5.804480652, 6.239816701, 6.545315682, 6.878818737, 7.161405295, 7.525458248, 7.787678208, 8.126272912, 8.378309572, 8.709266802, 9.014765784, 9.294806517, 9.582484725, 9.809063136, 10]
        K = [1, 1, 1, 1, 1, 1.006648936, 1.021276596, 1.042553191, 1.078457447, 1.109042553, 1.14893617, 1.188829787, 1.220744681, 1.268617021, 1.324468085, 1.375, 1.460106383, 1.545212766, 1.614361702, 1.682180851, 1.763297872, 1.83643617, 1.918882979, 2.002659574, 2.13962766, 2.238031915, 2.35106383, 2.450797872, 2.587765957, 2.683510638, 2.819148936, 2.914893617, 3.0625, 3.1875, 3.305851064, 3.430851064, 3.527925532, 3.606382979]

        return np.interp(m, M, K)

    if l >= 1.75 and l < 2.5:

        M = [0, 0.356778797, 0.848623853, 1.172273191, 1.460244648, 1.704892966, 1.918960245, 2.150866463, 2.44648318, 2.726809378, 3.017329256, 3.297655454, 3.654434251, 4.011213048, 4.332313965, 4.729867482, 5.089194699, 5.494393476, 5.830784913, 6.164627931, 6.401630989, 6.732925586, 7.003058104, 7.273190622, 7.5254842, 7.708970438, 7.953618756, 8.195718654, 8.432721713, 8.669724771, 8.924566769, 9.202344546, 9.492864424, 9.668705403, 9.852191641, 10]
        K = [1, 1, 1, 1, 1.006648936, 1.026595745, 1.074468085, 1.144946809, 1.25, 1.345744681, 1.434840426, 1.550531915, 1.678191489, 1.829787234, 1.966755319, 2.154255319, 2.328457447, 2.541223404, 2.73537234, 2.929521277, 3.069148936, 3.277925532, 3.448138298, 3.625, 3.795212766, 3.920212766, 4.095744681, 4.260638298, 4.438829787, 4.606382979, 4.796542553, 5.017287234, 5.251329787, 5.405585106, 5.558510638, 5.679521277]

        return np.interp(m, M, K)

    if l < 1.75:

        M = [0, 0.37601626, 0.701219512, 1.051829268, 1.244918699, 1.410060976, 1.598069106, 1.798780488, 1.969004065, 2.162093496, 2.37550813, 2.614329268, 2.87601626, 3.091971545, 3.37652439, 3.615345528, 3.887195122, 4.075203252, 4.316565041, 4.504573171, 4.715447154, 4.93648374, 5.147357724, 5.37601626, 5.617378049, 5.843495935, 6.06453252, 6.270325203, 6.402439024, 6.5625, 6.714939024, 6.892784553, 7.073170732, 7.256097561, 7.477134146, 7.647357724, 7.825203252, 7.977642276, 8.180894309, 8.330792683, 8.478150407, 8.658536585, 8.861788618, 9.016768293, 9.171747967, 9.37754065, 9.532520325, 9.738313008, 9.883130081, 10]
        K = [0.989473684, 0.989473684, 0.989473684, 0.994736842, 1.005263158, 1.031578947, 1.064473684, 1.107894737, 1.161842105, 1.236842105, 1.323684211, 1.425, 1.543421053, 1.656578947, 1.802631579, 1.930263158, 2.076315789, 2.198684211, 2.353947368, 2.467105263, 2.602631579, 2.739473684, 2.894736842, 3.085526316, 3.289473684, 3.464473684, 3.648684211, 3.813157895, 3.931578947, 4.072368421, 4.219736842, 4.373684211, 4.532894737, 4.710526316, 4.903947368, 5.055263158, 5.228947368, 5.392105263, 5.573684211, 5.732894737, 5.893421053, 6.078947368, 6.288157895, 6.444736842, 6.618421053, 6.836842105, 6.997368421, 7.214473684, 7.372368421, 7.472368421]

        return np.interp(m, M, K)

def C_x_nos(m, l, form):

    """
    Функция возвращает значение сопротивления носовой части, график
    на рис. 4.11, 4.12, 4.13 в ДПБЛА. В качестве аргументов подаются:
        1) Число Маха.\n
        2) Удлинение носовой части.\n
        3) Форма головной части в качестве строки.\n

    Форма головной части может быть одна из следующих строк:
        1) "Коническая".\n
        2) "Параболическая" (Имеется ввиду заостренная параболическая).\n
        3) "Плоская".\n
        4) "Эллиптическая" (при удлинении - 0.5 выраждается в полусферическую головную часть. При этом, если у вас сферическая головная часть,
        передать в функцию необходимо строку "Эллептическая". Учет сферической части происходит за счет удлинения головной части, которое
        для сферической головной части равно 0.5).\n
    
    Пример вызова функции: C_x_nos(2.3, 2.5, "Коническая")\n
    При удлинении меньше 2 погрешность коэффициента может составлять до 10%, особенно для конуса.
    Во избежании этого, старайтесь выбирать удлинение из ряда значений (1.5, 2, 2.5, 3, 4, 5).
    Данная функция не предназначена для расчета носового сопротивления при числах Маха больше 5 из-за
    того, что влияние пограничного слоя не учитывается, а на гиперзвуковых скоростях его влияние существенно.
    Но расчет в первом приближении провести можно.
    Данная функция не вернет сопротивление сложной носовой части, об этом смотри на стр. 213-215 в ДПБЛА
    """

    if form == "Коническая":

        if l >= 4.5:

            M = [0, 0.214212853, 0.414144849, 0.604556273, 0.699081945, 0.750085005, 0.802448147, 0.845970758, 0.884053043, 0.908534512, 0.939816389, 0.958857531, 0.971098266, 0.986739204, 0.993539612, 0.997619857, 1.002380143, 1.012580755, 1.019381163, 1.024821489, 1.028901734, 1.035702142, 1.047262836, 1.060863652, 1.083985039, 1.105066304, 1.131587895, 1.166950017, 1.196191772, 1.230873852, 1.261475689, 1.296157769, 1.329479769, 1.358041482, 1.392043523, 1.419925196, 1.45800748, 1.490649439, 1.526011561, 1.555253315, 1.582454947, 1.613736824, 1.647058824, 1.693981639, 1.736144169, 1.773546413, 1.812988779, 1.852431146, 1.904794288, 1.945596736, 2, 2.1875, 2.372622283, 2.566236413, 2.77513587, 2.958559783, 3.116508152, 3.35767663, 3.59375, 3.821331522, 4.013247283, 4.262907609, 4.538043478, 4.729959239, 4.891304348, 5]
            C = [-0.01, -0.008, -0.005014885, 0.001759134, 0.003044655, 0.004465494, 0.006359946, 0.00811908, 0.010419486, 0.01285521, 0.016441137, 0.019891746, 0.024289581, 0.028822733, 0.032882273, 0.037347767, 0.04120433, 0.04729364, 0.050270636, 0.053179973, 0.054803789, 0.056359946, 0.05744249, 0.058322057, 0.058930988, 0.059133965, 0.058863329, 0.058254398, 0.057780785, 0.057171854, 0.056562923, 0.055886333, 0.055548038, 0.055209743, 0.054803789, 0.054262517, 0.053856563, 0.053315291, 0.052774019, 0.052503383, 0.051962111, 0.051488498, 0.051150203, 0.050608931, 0.050135318, 0.049729364, 0.049255751, 0.049052774, 0.048917456, 0.048782138, 0.048376184, 0.047090663, 0.045805142, 0.044654939, 0.043437077, 0.042286874, 0.041542625, 0.040392422, 0.039580514, 0.038768606, 0.03849797, 0.038768606, 0.039106901, 0.039580514, 0.039580514, 0.039377537]

            return np.interp(m, M, C)

        if l >= 3.5 and l < 4.5:

            M = [0, 0.291070211, 0.528289025, 0.601226994, 0.670074983, 0.736877982, 0.785957737, 0.824130879, 0.873210634, 0.908657123, 0.931833674, 0.944103613, 0.957055215, 0.969325153, 0.976823449, 0.982276755, 0.992501704, 0.999318337, 1.008861622, 1.019768234, 1.032038173, 1.044989775, 1.05657805, 1.06475801, 1.069529652, 1.076346285, 1.081799591, 1.090661213, 1.103612815, 1.127471029, 1.165644172, 1.205862304, 1.252897069, 1.295160191, 1.346966599, 1.392638037, 1.430129516, 1.474437628, 1.535105658, 1.597137014, 1.646216769, 1.69870484, 1.746421268, 1.78868439, 1.826175869, 1.870483981, 1.917518746, 1.957055215, 2, 2.21563981, 2.420446852, 2.648950575, 2.936696005, 3.17704807, 3.395396073, 3.615436696, 3.840555179, 4.055517942, 4.289099526, 4.592078538, 4.773188896, 5]
            C = [-0.01, -0.006, -0.000811908, 0.001759134, 0.003518268, 0.006630582, 0.009742896, 0.012719892, 0.018200271, 0.024018945, 0.029566982, 0.03511502, 0.041271989, 0.04729364, 0.053450609, 0.061637348, 0.068403248, 0.075169147, 0.082341001, 0.085520974, 0.089309878, 0.09188092, 0.093031123, 0.093369418, 0.093437077, 0.093301759, 0.093098782, 0.09255751, 0.091813261, 0.090324763, 0.087956698, 0.085656292, 0.083288227, 0.081393775, 0.079228687, 0.077537212, 0.075981055, 0.074560217, 0.072733424, 0.071041949, 0.070094723, 0.068876861, 0.067794317, 0.067185386, 0.066441137, 0.066035183, 0.065493911, 0.065290934, 0.06488498, 0.061569689, 0.059607578, 0.05811908, 0.056156969, 0.054600812, 0.053653586, 0.052638701, 0.051894452, 0.051082544, 0.050541272, 0.049458728, 0.049188092, 0.048376184]
            
            return np.interp(m, M, C)

        if l >= 2.75 and l < 3.5:

            M = [0, 0.23858214, 0.351738241, 0.450579414, 0.554873892, 0.634628494, 0.679618269, 0.732106339, 0.766189502, 0.803680982, 0.844580777, 0.870483981, 0.887525562, 0.899795501, 0.91206544, 0.918200409, 0.924335378, 0.932515337, 0.938650307, 0.944785276, 0.950920245, 0.957736878, 0.965235174, 0.97068848, 0.976823449, 0.982958419, 0.990456714, 0.993865031, 0.993865031, 0.999318337, 1.003408316, 1.008861622, 1.013633265, 1.019768234, 1.025903204, 1.038854806, 1.047034765, 1.052488071, 1.05657805, 1.061349693, 1.067484663, 1.072256305, 1.077709611, 1.080436264, 1.086571234, 1.092706203, 1.098841172, 1.109747785, 1.124744376, 1.135650988, 1.14860259, 1.165644172, 1.183367416, 1.199045671, 1.214042263, 1.233810498, 1.248807089, 1.271301977, 1.295841854, 1.319700068, 1.350374915, 1.379004772, 1.413087935, 1.445126108, 1.475800954, 1.51670075, 1.549420586, 1.588275392, 1.625085208, 1.66325835, 1.713019768, 1.764826176, 1.819359237, 1.881390593, 1.93933197, 2, 2.161475965, 2.323967502, 2.420446852, 2.560934326, 2.720040623, 2.872376439, 3.045023697, 3.2718348, 3.46310088, 3.628977657, 3.860866622, 4.070751523, 4.295870007, 4.581922817, 4.779959377, 5]
            C = [-0.01, -0.007, -0.005, -0.0025, 0, 0.005, 0.007983762, 0.01150203, 0.014479026, 0.018200271, 0.024627876, 0.030649526, 0.035723951, 0.039715832, 0.043166441, 0.04729364, 0.050202977, 0.054803789, 0.058322057, 0.063058187, 0.068809202, 0.073951286, 0.080717185, 0.086874154, 0.093978349, 0.099391069, 0.105886333, 0.113464141, 0.119959405, 0.126251691, 0.132949932, 0.141407307, 0.148105548, 0.153518268, 0.160081191, 0.166644114, 0.169147497, 0.170365359, 0.171177267, 0.17165088, 0.171921516, 0.171921516, 0.171921516, 0.17165088, 0.171177267, 0.170568336, 0.169688769, 0.167523681, 0.164682003, 0.161975643, 0.158998647, 0.155142084, 0.151623816, 0.148579161, 0.14594046, 0.143166441, 0.140595399, 0.137212449, 0.134167794, 0.131393775, 0.127875507, 0.125101488, 0.121786198, 0.119418133, 0.11759134, 0.114952639, 0.113261164, 0.111028417, 0.109404601, 0.107983762, 0.106495264, 0.104871448, 0.103585927, 0.102232747, 0.100879567, 0.100202977, 0.097496617, 0.094451962, 0.092692828, 0.090324763, 0.088227334, 0.086332882, 0.084235453, 0.081596752, 0.0797023, 0.078146143, 0.076048714, 0.074763194, 0.074221922, 0.073071719, 0.072665765, 0.072395129]
            
            return np.interp(m, M, C)

        if l >= 2.25 and l < 2.75:

            M = [0, 0.097345133, 0.188563649, 0.281143635, 0.379850238, 0.476514636, 0.611300204, 0.677331518, 0.72089857, 0.772634445, 0.810074881, 0.845473111, 0.869298843, 0.894486045, 0.914227366, 0.934649421, 0.944179714, 0.957113683, 0.969366916, 0.989108237, 0.995915589, 1.006126617, 1.016337645, 1.029271613, 1.047651464, 1.059904697, 1.06943499, 1.083049694, 1.095302927, 1.10483322, 1.115724983, 1.130020422, 1.149081007, 1.174948945, 1.200136147, 1.225323349, 1.249149081, 1.2804629, 1.324029952, 1.356705242, 1.397549353, 1.445881552, 1.489448604, 1.534377127, 1.584070796, 1.65010211, 1.703199455, 1.762423417, 1.829135466, 1.894486045, 1.94622192, 2, 2.180094787, 2.367975626, 2.576167908, 2.78436019, 2.960392688, 3.163507109, 3.371699391, 3.578199052, 3.766079892, 4.016587678, 4.32464455, 4.553148274, 4.842586324, 5]
            C = [-0.01, -0.0095, -0.008, -0.0065, -0.0047, -0.001, 0.010479026, 0.018200271, 0.022056834, 0.028146143, 0.03511502, 0.043504736, 0.05270636, 0.064411367, 0.076860622, 0.090257104, 0.100947226, 0.113937754, 0.13308525, 0.150202977, 0.163193505, 0.178958051, 0.192760487, 0.202841678, 0.211299053, 0.214005413, 0.21556157, 0.21691475, 0.217253045, 0.217050068, 0.216102842, 0.21420839, 0.210622463, 0.204668471, 0.198376184, 0.191407307, 0.186265223, 0.179431664, 0.171177267, 0.16623816, 0.160960758, 0.155683356, 0.15135318, 0.147902571, 0.144181326, 0.140121786, 0.137686062, 0.135047361, 0.132611637, 0.131326116, 0.130649526, 0.130446549, 0.125778078, 0.121312585, 0.117794317, 0.114276049, 0.111569689, 0.108863329, 0.106495264, 0.10473613, 0.103179973, 0.100744249, 0.099188092, 0.09797023, 0.097023004, 0.096278755]
            return np.interp(m, M, C)

        if l >= 1.75 and l < 2.25:

            M = [0, 0.137154555, 0.247697032, 0.339815763, 0.412828386, 0.477652678, 0.515182532, 0.571818492, 0.622313204, 0.689184579, 0.737632207, 0.775844422, 0.80313886, 0.835209826, 0.856363016, 0.874104401, 0.885022177, 0.904128284, 0.919140225, 0.930740362, 0.940293415, 0.953940635, 0.96485841, 0.979870351, 0.990105766, 0.997611737, 1.011941317, 1.033094507, 1.052882975, 1.07062436, 1.088365745, 1.099283521, 1.109518936, 1.120436711, 1.127942682, 1.136813374, 1.148413511, 1.157284203, 1.164790174, 1.175025589, 1.18321392, 1.194814057, 1.20436711, 1.21801433, 1.236438076, 1.247355851, 1.268509041, 1.285568066, 1.310815421, 1.336745138, 1.364721938, 1.392698738, 1.430228591, 1.462299556, 1.496417605, 1.534629819, 1.576253838, 1.625383828, 1.679972706, 1.735926305, 1.787103378, 1.854657114, 1.907198908, 1.963834869, 2, 2.095625636, 2.219396406, 2.348253645, 2.482197355, 2.624618515, 2.816208884, 2.933197694, 3.084096304, 3.251949813, 3.429976263, 3.635130553, 3.791115632, 4.003051882, 4.214988132, 4.467616141, 4.698202781, 4.88640217, 5]
            C = [-0.014, -0.012, -0.01, -0.00737, -0.0056, -0.00468, -0.00334, 0.0032, 0.022868742, 0.031258457, 0.039377537, 0.04864682, 0.056630582, 0.067997294, 0.078281461, 0.091407307, 0.100405954, 0.121447903, 0.136535859, 0.151082544, 0.16556157, 0.18037889, 0.194316644, 0.208728011, 0.221109608, 0.233964817, 0.248240866, 0.256495264, 0.264749662, 0.2702977, 0.273477673, 0.275033829, 0.27631935, 0.276928281, 0.277266576, 0.277266576, 0.277266576, 0.276387009, 0.27564276, 0.274627876, 0.273207037, 0.270906631, 0.267117727, 0.262719892, 0.257577808, 0.253991881, 0.248782138, 0.244113667, 0.238836265, 0.233626522, 0.227943166, 0.222733424, 0.216779432, 0.21217862, 0.207916103, 0.203044655, 0.198917456, 0.194857916, 0.190866035, 0.187483085, 0.184641407, 0.181596752, 0.179972936, 0.179296346, 0.178484438, 0.17435724, 0.170838972, 0.167185386, 0.163802436, 0.160757781, 0.157036536, 0.154803789, 0.152300406, 0.150405954, 0.148037889, 0.145466847, 0.144181326, 0.142016238, 0.140460081, 0.139580514, 0.138430311, 0.13714479, 0.136603518]

            return np.interp(m, M, C)

        if l < 1.75:

            M = [0, 0.076766304, 0.161005435, 0.241168478, 0.292119565, 0.346467391, 0.419157609, 0.498641304, 0.601902174, 0.65625, 0.69701087, 0.737771739, 0.755434783, 0.783967391, 0.805706522, 0.832201087, 0.855298913, 0.872961957, 0.889266304, 0.906929348, 0.918478261, 0.93138587, 0.94361413, 0.951766304, 0.96263587, 0.974184783, 0.983695652, 0.987771739, 1.001358696, 1.012228261, 1.023777174, 1.040081522, 1.057065217, 1.093070652, 1.121603261, 1.137907609, 1.150815217, 1.169836957, 1.191576087, 1.215353261, 1.241168478, 1.265625, 1.29076087, 1.317255435, 1.342391304, 1.367527174, 1.398097826, 1.422554348, 1.444972826, 1.464673913, 1.489130435, 1.518342391, 1.548233696, 1.59375, 1.626358696, 1.666440217, 1.706521739, 1.741847826, 1.799592391, 1.847146739, 1.90013587, 1.952445652, 1.987771739, 2, 2.038474519, 2.090786365, 2.170097874, 2.301721228, 2.424907189, 2.544718191, 2.716841039, 2.905838677, 3.079649004, 3.218022275, 3.38002025, 3.54876814, 3.695578805, 3.887951401, 4.075261559, 4.271009112, 4.507256159, 4.716503544, 4.908876139, 5]
            C = [-0.014, -0.013, -0.011, -0.009, -0.006, -0.003, 0.002, 0.02, 0.046414073, 0.055548038, 0.066441137, 0.078890392, 0.086941813, 0.102165088, 0.117117727, 0.134167794, 0.155209743, 0.172462788, 0.190054127, 0.206292287, 0.222598106, 0.238565629, 0.252097429, 0.265696888, 0.278484438, 0.293843031, 0.306021651, 0.315290934, 0.328416779, 0.346820027, 0.363125846, 0.374018945, 0.387415426, 0.400879567, 0.407171854, 0.40947226, 0.410960758, 0.412043302, 0.412516915, 0.412110961, 0.410284168, 0.40744249, 0.403788904, 0.399120433, 0.393031123, 0.387415426, 0.38037889, 0.373612991, 0.368200271, 0.363328823, 0.358457375, 0.35202977, 0.345737483, 0.336671177, 0.330987821, 0.324966171, 0.319350474, 0.314479026, 0.307577808, 0.302909337, 0.298037889, 0.293640054, 0.291136671, 0.289106901, 0.286197564, 0.28173207, 0.277266576, 0.270635995, 0.265764547, 0.261569689, 0.256968877, 0.252774019, 0.24932341, 0.247225981, 0.244857916, 0.242422192, 0.241271989, 0.240054127, 0.238836265, 0.237550744, 0.236129905, 0.235182679, 0.234370771, 0.234032476]

            return np.interp(m, M, C)

    if form == "Параболическая":

        if l >= 4.5:

            M = [0, 0.191055959, 0.367127137, 0.513697026, 0.612034652, 0.674315149, 0.711308827, 0.752985249, 0.807305081, 0.841957387, 0.880355889, 0.897682042, 0.921095762, 0.940295013, 0.970732849, 1.000702412, 1.020369937, 1.040974011, 1.059236713, 1.070007024, 1.087801452, 1.108405526, 1.134160618, 1.167408101, 1.207211426, 1.293373917, 1.346288925, 1.443690002, 1.554202763, 1.644111449, 1.739639429, 1.862795598, 1.947084992, 2, 2.135933533, 2.334410339, 2.595199631, 2.846757443, 3.130625433, 3.371797831, 3.677590584, 3.93722594, 4.2234018, 4.50265405, 4.734594969, 4.898453727, 5]
            C = [-0.027803774, -0.027396226, -0.027124528, -0.0264, -0.025313208, -0.024407547, -0.023184906, -0.021645283, -0.019290566, -0.016483019, -0.012724528, -0.010233962, -0.007064151, -0.003215094, 0.004709434, 0.013811321, 0.023411321, 0.033011321, 0.037132075, 0.038535849, 0.040211321, 0.041524528, 0.042158491, 0.042158491, 0.042158491, 0.041615094, 0.041343396, 0.040754717, 0.04034717, 0.040392453, 0.040166038, 0.03989434, 0.039667925, 0.039396226, 0.039486792, 0.039124528, 0.038716981, 0.038083019, 0.037313208, 0.036724528, 0.036226415, 0.035683019, 0.03509434, 0.034460377, 0.034007547, 0.033781132, 0.033554717]

            return np.interp(m, M, C)

        if l >= 3.5 and l < 4.5:

            M = [0, 0.148961009, 0.289983656, 0.368900304, 0.446416064, 0.5155265, 0.5813682, 0.632734065, 0.686434742, 0.740135419, 0.774690637, 0.815316367, 0.840532337, 0.876955405, 0.891898202, 0.919448984, 0.928788233, 0.981088022, 1.011907541, 1.027317301, 1.038991361, 1.057202895, 1.071211767, 1.082885828, 1.095960775, 1.115106234, 1.142657016, 1.176745272, 1.205229979, 1.239785197, 1.286948401, 1.321503619, 1.369133785, 1.437310297, 1.492411861, 1.562923185, 1.65117908, 1.739434975, 1.83329442, 1.923885127, 2, 2.131317794, 2.343641819, 2.53634895, 2.688668359, 2.872144011, 3.064851142, 3.261020078, 3.414493423, 3.595661205, 3.762981768, 3.956842834, 4.144934226, 4.344564967, 4.531502423, 4.701130856, 4.881144703, 5]
            C = [-0.020377358, -0.020196226, -0.019743396, -0.019245283, -0.018566038, -0.017932075, -0.017298113, -0.016528302, -0.015532075, -0.013630189, -0.012181132, -0.0096, -0.007698113, -0.003803774, -0.001313208, 0.003939623, 0.005977358, 0.021509434, 0.036498113, 0.048090566, 0.054701887, 0.058324528, 0.061086792, 0.062581132, 0.063577358, 0.064392453, 0.065071698, 0.065433962, 0.065207547, 0.064890566, 0.064483019, 0.064211321, 0.06389434, 0.063396226, 0.062943396, 0.0624, 0.061811321, 0.061449057, 0.060543396, 0.059954717, 0.059501887, 0.059456604, 0.058460377, 0.0576, 0.056739623, 0.055698113, 0.054611321, 0.053750943, 0.053116981, 0.052437736, 0.051849057, 0.050988679, 0.050581132, 0.049901887, 0.049222642, 0.048679245, 0.048226415, 0.047909434]
            
            return np.interp(m, M, C)

        if l >= 2.75 and l < 3.5:

            M = [0, 0.179439252, 0.313084112, 0.430373832, 0.512149533, 0.578037383, 0.657009346, 0.709813084, 0.757943925, 0.827102804, 0.877102804, 0.91682243, 0.943457944, 0.96682243, 0.98271028, 0.998598131, 1.007943925, 1.018224299, 1.028037383, 1.037383178, 1.04953271, 1.076168224, 1.1, 1.124299065, 1.154205607, 1.185046729, 1.205607477, 1.244859813, 1.292990654, 1.341121495, 1.392056075, 1.455607477, 1.514485981, 1.570093458, 1.643925234, 1.702336449, 1.753738318, 1.796261682, 1.873364486, 1.946728972, 2, 2.125893475, 2.251556375, 2.422181231, 2.555914226, 2.709246023, 2.852201983, 3.020521098, 3.194604565, 3.341019138, 3.493198063, 3.646529859, 3.862116671, 4.068480516, 4.225270925, 4.414341711, 4.596495273, 4.813234955, 5]
            C = [-0.016890566, -0.016528302, -0.01589434, -0.014898113, -0.013403774, -0.011818868, -0.009509434, -0.007471698, -0.004483019, 0.000498113, 0.005932075, 0.01245283, 0.018837736, 0.026535849, 0.035049057, 0.046098113, 0.055833962, 0.06629434, 0.073675472, 0.083637736, 0.09165283, 0.099532075, 0.1032, 0.105916981, 0.108271698, 0.109901887, 0.110716981, 0.111079245, 0.11085283, 0.110264151, 0.109358491, 0.108362264, 0.107456604, 0.106550943, 0.105418868, 0.104377358, 0.103607547, 0.10274717, 0.101886792, 0.100709434, 0.099849057, 0.099033962, 0.097539623, 0.095818868, 0.094279245, 0.09314717, 0.091969811, 0.090701887, 0.089343396, 0.088483019, 0.087486792, 0.086716981, 0.085675472, 0.084679245, 0.083909434, 0.083139623, 0.082596226, 0.081871698, 0.081101887]
            
            return np.interp(m, M, C)

        if l >= 2.25 and l < 2.75:

            M = [0, 0.215736633, 0.409526033, 0.565024516, 0.69764184, 0.795236983, 0.874620593, 0.924118608, 0.968013075, 0.991828158, 1.002568293, 1.010506654, 1.024048564, 1.045528835, 1.074013542, 1.099696474, 1.13565258, 1.1590007, 1.185150595, 1.203362129, 1.22671025, 1.246789633, 1.272939528, 1.317300957, 1.364931123, 1.424235349, 1.494746673, 1.568059771, 1.634368433, 1.684333411, 1.741302825, 1.824422134, 1.917814616, 2, 2.134960848, 2.350299401, 2.549516352, 2.700368494, 2.847766006, 3.030861354, 3.197835099, 3.349838784, 3.519115615, 3.689543989, 3.835789959, 4.000460617, 4.145555044, 4.307922616, 4.542837402, 4.788116076, 5]
            C = [-0.011139623, -0.010596226, -0.009826415, -0.008196226, -0.004437736, 0.000633962, 0.007924528, 0.016573585, 0.027532075, 0.042611321, 0.055879245, 0.07530566, 0.091018868, 0.103516981, 0.119275472, 0.129283019, 0.138792453, 0.142596226, 0.145901887, 0.147667925, 0.149071698, 0.150113208, 0.151064151, 0.151924528, 0.152150943, 0.151698113, 0.150611321, 0.149071698, 0.14789434, 0.146762264, 0.145675472, 0.144045283, 0.142143396, 0.140060377, 0.138656604, 0.13589434, 0.133086792, 0.131366038, 0.129690566, 0.127743396, 0.125886792, 0.124166038, 0.122354717, 0.120860377, 0.119683019, 0.117781132, 0.116739623, 0.115471698, 0.113977358, 0.112437736, 0.11130566]

            return np.interp(m, M, C)

        if l < 2.25:

            M = [0, 0.237002342, 0.429976581, 0.603747073, 0.661826698, 0.698360656, 0.752693208, 0.789227166, 0.815456674, 0.854332553, 0.883840749, 0.913348946, 0.936299766, 0.952693208, 0.962997658, 0.970960187, 0.987822014, 0.995784543, 1.00234192, 1.01264637, 1.02295082, 1.030913349, 1.042154567, 1.051990632, 1.068852459, 1.093208431, 1.120374707, 1.156440281, 1.18969555, 1.215925059, 1.258548009, 1.293676815, 1.318969555, 1.34941452, 1.382201405, 1.415925059, 1.453864169, 1.507728337, 1.55971897, 1.607962529, 1.654800937, 1.71147541, 1.762997658, 1.819672131, 1.874004684, 1.930210773, 2, 2.083141409, 2.204053432, 2.335329341, 2.472362966, 2.597881161, 2.724550898, 2.863887609, 2.977890373, 3.121833257, 3.251957623, 3.399355136, 3.55481345, 3.721787195, 3.880700138, 4.035006909, 4.176646707, 4.312528789, 4.457623215, 4.62459696, 4.821510825, 5]
            C = [-0.00194717, -0.001177358, -0.000543396, 0.001720755, 0.002716981, 0.003939623, 0.006339623, 0.008784906, 0.011366038, 0.016030189, 0.02069434, 0.026898113, 0.032467925, 0.037675472, 0.046279245, 0.058007547, 0.071230189, 0.082188679, 0.092558491, 0.101524528, 0.109992453, 0.119049057, 0.129916981, 0.139924528, 0.149116981, 0.160981132, 0.172075472, 0.182173585, 0.190007547, 0.194309434, 0.200649057, 0.204181132, 0.206354717, 0.208573585, 0.20970566, 0.210430189, 0.210611321, 0.210611321, 0.209932075, 0.208935849, 0.207939623, 0.206535849, 0.205132075, 0.203773585, 0.202460377, 0.201011321, 0.198520755, 0.197433962, 0.195124528, 0.192633962, 0.190324528, 0.187969811, 0.185841509, 0.183803774, 0.18194717, 0.18, 0.177826415, 0.175788679, 0.173615094, 0.171532075, 0.169992453, 0.168316981, 0.166822642, 0.165690566, 0.164558491, 0.163245283, 0.161660377, 0.160392453]

            return np.interp(m, M, C)

    if form == "Плоская":

        M = [0, 0.053244592, 0.092623405, 0.125346644, 0.150305047, 0.167498613, 0.180809762, 0.19412091, 0.205213533, 0.220188575, 0.248474764, 0.276206323, 0.318358292, 0.366611204, 0.415973378, 0.472545757, 0.519689407, 0.58291736, 0.665002773, 0.743205768, 0.814198558, 0.946200776, 1.016084304, 1.109816972, 1.210759845, 1.327787022, 1.424292845, 1.505268996, 1.601220189, 1.692734332, 1.753189129, 1.835274542, 1.930116473, 2.032168608, 2.125346644, 2.210759845, 2.321686079, 2.419855796, 2.501386578, 2.615640599, 2.719911259, 2.826955075, 2.955074875, 3.07099279, 3.206322795, 3.356073211, 3.48363838, 3.612312812, 3.74875208, 3.867997781, 4]
        C = [-0.052197802, -0.046428571, -0.034615385, -0.018406593, 0.006043956, 0.036538462, 0.072252747, 0.135714286, 0.184065934, 0.232142857, 0.299450549, 0.359340659, 0.431593407, 0.491208791, 0.557417582, 0.631043956, 0.683241758, 0.743681319, 0.809340659, 0.874450549, 0.926648352, 1.025549451, 1.076648352, 1.135989011, 1.193681319, 1.257142857, 1.302747253, 1.336538462, 1.374175824, 1.405769231, 1.423076923, 1.445879121, 1.46978022, 1.494230769, 1.514285714, 1.52967033, 1.548076923, 1.561538462, 1.572252747, 1.585714286, 1.596153846, 1.605494505, 1.615659341, 1.620054945, 1.625274725, 1.633516484, 1.635989011, 1.639835165, 1.642032967, 1.645054945, 1.647527473]

        return np.interp(m, M, C)
    
    if form == "Эллиптическая":

        if l >=3:

            M = [0, 0.156111111, 0.322222222, 0.442222222, 0.560555556, 0.701666667, 0.803888889, 0.897222222, 0.961666667, 1.013888889, 1.063888889, 1.117777778, 1.183333333, 1.277777778, 1.401111111, 1.561111111, 2.077777778, 2.571666667, 2.969444444, 3.497222222, 4]
            C = [-0.077747253, -0.075274725, -0.070604396, -0.068681319, -0.057417582, -0.043131868, -0.030769231, -0.015384615, 0.01456044, 0.049725275, 0.078296703, 0.097802198, 0.108791209, 0.116758242, 0.121978022, 0.123626374, 0.121978022, 0.117582418, 0.115384615, 0.113736264, 0.111538462]

            return np.interp(m, M, C)

        if l >= 1.5 and l < 3:

            M = [0, 0.156111111, 0.322222222, 0.442222222, 0.560555556, 0.701666667, 0.8, 0.887222222, 0.943888889, 0.992777778, 1.046666667, 1.126111111, 1.233333333, 1.357222222, 1.475, 1.618333333, 1.761111111, 1.912777778, 2.116666667, 2.338333333, 2.580555556, 2.784444444, 2.988333333, 3.211111111, 3.453888889, 3.686666667, 3.902222222, 4]
            C = [-0.077747253, -0.075274725, -0.070604396, -0.068681319, -0.057417582, -0.038186813, -0.021703297, 0.010989011, 0.042582418, 0.084615385, 0.121978022, 0.153021978, 0.177472527, 0.188461538, 0.193956044, 0.19532967, 0.192307692, 0.192032967, 0.192307692, 0.192307692, 0.190659341, 0.190659341, 0.190659341, 0.190659341, 0.193131868, 0.19532967, 0.19532967, 0.198901099]

            return np.interp(m, M, C)

        if l >= 0.75 and l < 1.5:

            M = [0, 0.156067759, 0.322132741, 0.442099417, 0.560399889, 0.633157456, 0.683143571, 0.748125521, 0.831435712, 0.880866426, 0.935295751, 0.974729242, 1.043043599, 1.111357956, 1.196334352, 1.273535129, 1.355734518, 1.444598723, 1.52624271, 1.636767565, 1.721188559, 1.821160789, 1.917800611, 2.045542905, 2.155512358, 2.258816995, 2.379894474, 2.495973341, 2.60427659, 2.727575673, 2.923076923, 3.075256873, 3.213551791, 3.381838378, 3.559011386, 3.728964177, 3.901693974, 4]
            C = [-0.077747253, -0.075274725, -0.070604396, -0.068681319, -0.057417582, -0.045604396, -0.03489011, -0.018131868, 0.008516484, 0.039285714, 0.086263736, 0.126373626, 0.184340659, 0.237637363, 0.285714286, 0.321703297, 0.356318681, 0.386538462, 0.411263736, 0.439010989, 0.456868132, 0.474450549, 0.48956044, 0.502747253, 0.51043956, 0.513186813, 0.517857143, 0.521153846, 0.524725275, 0.525824176, 0.53021978, 0.533516484, 0.533516484, 0.533516484, 0.533516484, 0.531868132, 0.52967033, 0.527472527]

            return np.interp(m, M, C)

        if l >= 0.35 and l < 0.75:

            M = [0, 0.192637697, 0.353722668, 0.455023526, 0.508718516, 0.550788818, 0.603376695, 0.64655411, 0.695267091, 0.747301412, 0.794907279, 0.831442015, 0.877387213, 0.913921949, 0.956545807, 0.988098533, 1.015222807, 1.032383061, 1.061168004, 1.10102408, 1.138665929, 1.190146692, 1.231109881, 1.273180183, 1.318018267, 1.378355937, 1.448104069, 1.535012455, 1.640188209, 1.717686133, 1.805148076, 1.907002491, 2.022142264, 2.130085801, 2.282313867, 2.394685857, 2.494879601, 2.626626073, 2.741765846, 2.854137836, 2.997508995, 3.133130363, 3.23775256, 3.415997786, 3.563797398, 3.709382784, 3.834486576, 3.934680321, 4]
            C = [-0.076923077, -0.073076923, -0.068681319, -0.066483516, -0.062637363, -0.056868132, -0.046428571, -0.03489011, -0.019230769, 0.002747253, 0.035989011, 0.071153846, 0.11456044, 0.157417582, 0.210164835, 0.267307692, 0.325824176, 0.367582418, 0.406318681, 0.455769231, 0.490384615, 0.531043956, 0.56043956, 0.588461538, 0.612912088, 0.63956044, 0.663186813, 0.692032967, 0.721428571, 0.738186813, 0.754395604, 0.770604396, 0.782417582, 0.793681319, 0.802472527, 0.808791209, 0.811538462, 0.815659341, 0.817307692, 0.819505495, 0.82032967, 0.82032967, 0.821428571, 0.821428571, 0.821428571, 0.820054945, 0.817857143, 0.817857143, 0.815384615]

            return np.interp(m, M, C)

        if l < 0.35:

            M = [0, 0.144204104, 0.206322795, 0.258458125, 0.302273988, 0.335551858, 0.386577926, 0.441486412, 0.475873544, 0.519689407, 0.562396007, 0.619523017, 0.66333888, 0.70160843, 0.74875208, 0.794786467, 0.831946755, 0.865224626, 0.906821963, 0.94786467, 1.012201886, 1.062673322, 1.112035496, 1.173599556, 1.225180255, 1.321131448, 1.380476983, 1.456461453, 1.546311703, 1.633943428, 1.725457571, 1.829728231, 1.936217415, 2.079866889, 2.203549639, 2.312257349, 2.419301165, 2.524681087, 2.621186911, 2.741541875, 2.840820854, 2.973377704, 3.141430948, 3.266777593, 3.424292845, 3.556295064, 3.68718802, 3.806988353, 3.906267332, 4]
            C = [-0.075, -0.055769231, -0.048901099, -0.041758242, -0.031318681, -0.018406593, 0.001648352, 0.026648352, 0.050824176, 0.078296703, 0.10989011, 0.15989011, 0.2, 0.233791209, 0.293681319, 0.351648352, 0.418406593, 0.475274725, 0.526098901, 0.571428571, 0.621978022, 0.656318681, 0.687637363, 0.724450549, 0.754120879, 0.802472527, 0.828021978, 0.860164835, 0.892857143, 0.921703297, 0.948901099, 0.975, 0.998901099, 1.023351648, 1.042307692, 1.057417582, 1.06978022, 1.078846154, 1.086538462, 1.094230769, 1.097252747, 1.098351648, 1.101098901, 1.101098901, 1.103571429, 1.103296703, 1.101373626, 1.1, 1.098351648, 1.098351648]

            return np.interp(m, M, C)

def C_x_corm(m, l, eta, form):

    """
    Функция возвращает сопротивление кормовой части летательного аппарата.\n
    Графики представлеы в ДПБЛА на стр. 226.

    В качестве аргументов функция принимает:
        1) число Маха.\n
        2) Удлинение кормовой части.\n
        3) Сужение кормовой части.\n
        4) Форму кормовой части в качестве строки.\n
    
    Форма кормовой части (имеется ввиду форму образующих) может быть одной из двух строк:
        1) "Прямолинейные" (Термин относится ОБРАЗУЮЩЕЙ, за подробностями - к графику в ДПБЛА стр. 226).\n
        2) "Параболические" (Термин относится к ОБРАЗУЮЩЕЙ, за подробностями - к графику в ДПБЛА стр. 226).\n

    Пример вызова функции: "C_x_corm(1.6, 2, 0.5, "Прямолинейные")"
    Для минимизирования погрешностей и приближения результата к истинному, используйте по возможности:
        1) Удлинение из ряда (1, 1.5, 2, 2.5, 3) или добивайтесь небольших отклонений от этих значений.\n
        2) Сужение из ряда (0, 0.5, 0.75) или добивайтесь небольших отклонений от этих значений.\n
    Данная функция может давать результаты, отличные от действительности при скорости меньше 0.6 Маха из-за недостатка
    информации на используемых графиках. В качестве значений меньше 0.6 Маха используются значения в точке 0.6 Маха.
    """

    if form == "Прямолинейные":

        if eta < 0.25:

            if l >= 2.5:

                M = [0.598317799, 0.637417595, 0.678335985, 0.713343942, 0.749261196, 0.794726074, 0.824278245, 0.868833826, 0.897931348, 0.922482382, 0.949306661, 0.967492612, 0.982041373, 1.000681973, 1.0093203, 1.019322573, 1.027506251, 1.037963173, 1.049784042, 1.062059559, 1.075699023, 1.088883837, 1.105251193, 1.121163901, 1.134348716, 1.159809048, 1.179358945, 1.209365765, 1.226642419, 1.247101614, 1.27483519, 1.308024551, 1.328029098, 1.351216185, 1.389861332, 1.423050693, 1.451238918, 1.49170266, 1.534439645, 1.568538304, 1.645373949, 1.680836554, 1.716299159, 1.746305979, 1.78676972, 1.824050921, 1.87679018, 1.928165492, 1.970447829, 2, 2.067584224, 2.249486442, 2.441557108, 2.622329499, 2.838126541, 3.033586689, 3.328471652, 3.678718159, 4.082066557, 4.585969597, 4.878594906, 5.222062449, 5.5]
                C = [0.061114966, 0.062757344, 0.064839232, 0.066874855, 0.069303724, 0.072819801, 0.075665047, 0.080453389, 0.084293315, 0.087601203, 0.092088827, 0.095234791, 0.098380754, 0.102151284, 0.103562341, 0.104487624, 0.105250983, 0.105783021, 0.106384455, 0.106823965, 0.107194078, 0.107402267, 0.107494795, 0.107425399, 0.107309739, 0.106823965, 0.106268795, 0.105320379, 0.104695813, 0.103678001, 0.102243812, 0.100578302, 0.099676151, 0.098635207, 0.096738376, 0.095373583, 0.094170715, 0.092435808, 0.090839695, 0.089521166, 0.086860976, 0.085658108, 0.084663428, 0.083715013, 0.082581541, 0.081563729, 0.080222068, 0.079065464, 0.078070784, 0.077399954, 0.0758, 0.07247282, 0.069396253, 0.066782327, 0.064145269, 0.061993986, 0.059079343, 0.05593338, 0.052671756, 0.049271339, 0.047559565, 0.045778395, 0.044459866]

                return np.interp(m, M, C)

            if l < 2.5:

                M = [0.598772448, 0.62786997, 0.661059332, 0.715617186, 0.771538986, 0.805637645, 0.846556035, 0.877017504, 0.910661514, 0.935667197, 0.952489202, 0.97931348, 0.996590134, 1.002955217, 1.006592407, 1.011593544, 1.022959764, 1.038417822, 1.051147988, 1.059786315, 1.071607183, 1.085246647, 1.102068652, 1.114798818, 1.126619686, 1.137985906, 1.148897477, 1.161627643, 1.177994999, 1.20390998, 1.23346215, 1.250738804, 1.268015458, 1.285292112, 1.320754717, 1.370311434, 1.409865879, 1.441236645, 1.482155035, 1.529893158, 1.574448738, 1.633098431, 1.665833144, 1.730393271, 1.778131393, 1.827233462, 1.874516936, 1.922709707, 1.967265288, 2, 2.033983573, 2.13449692, 2.239527721, 2.33100616, 2.484599589, 2.58963039, 2.703696099, 2.841478439, 2.989425051, 3.140759754, 3.307905544, 3.520225873, 3.697535934, 3.979876797, 4.204620123, 4.433880903, 4.656365503, 4.886755647, 5.200718686, 5.5]
                C = [0.067013648, 0.068910479, 0.071408744, 0.075318066, 0.080407125, 0.084177654, 0.090423317, 0.095373583, 0.101318529, 0.106800833, 0.11154291, 0.118945177, 0.124658802, 0.129007634, 0.132731899, 0.135114504, 0.137867222, 0.14006477, 0.141151978, 0.141776544, 0.142377978, 0.142886884, 0.143418922, 0.143673375, 0.143812167, 0.143881564, 0.143789035, 0.143580847, 0.143187601, 0.142262318, 0.141036317, 0.140134166, 0.139046958, 0.137682165, 0.134674994, 0.130650012, 0.127897294, 0.125630349, 0.122785103, 0.119662272, 0.117117742, 0.113994911, 0.112329401, 0.109160305, 0.107078418, 0.105089059, 0.103284756, 0.101619246, 0.100092528, 0.099306037, 0.097709924, 0.094402036, 0.091279204, 0.088665279, 0.084663428, 0.082049503, 0.079597502, 0.07679852, 0.074115198, 0.071524404, 0.068864215, 0.065695119, 0.063219986, 0.059634513, 0.056881795, 0.054360398, 0.052209114, 0.050289151, 0.048022207, 0.046241036]

                return np.interp(m, M, C)
                
        if eta >= 0.25 and eta < 0.625:

            if l < 1.75:

                M = [0.59763851, 0.617166213, 0.654859219, 0.717075386, 0.773841962, 0.847411444, 0.905540418, 0.972297911, 1.03133515, 1.094459582, 1.131698456, 1.164396004, 1.174386921, 1.191189827, 1.210263397, 1.227974569, 1.247956403, 1.273387829, 1.291553134, 1.310626703, 1.335603996, 1.36239782, 1.385558583, 1.416893733, 1.454586739, 1.500908265, 1.545867393, 1.592188919, 1.638510445, 1.688010899, 1.737965486, 1.796548592, 1.852406903, 1.90599455, 1.949137148, 2, 2.027029805, 2.198869476, 2.352620761, 2.491675231, 2.609249743, 2.732476876, 2.873792395, 3.008324769, 3.156423433, 3.330524152, 3.496711202, 3.676464543, 3.822302158, 4.006577595, 4.205549846, 4.481397739, 4.715416238, 4.944912641, 5.178931141, 5.41294964, 5.5]
                C = [0.081448068, 0.081702521, 0.08246588, 0.083900069, 0.085426787, 0.087809392, 0.090053204, 0.093106639, 0.096414527, 0.100693963, 0.103307888, 0.105250983, 0.105759889, 0.106384455, 0.106893361, 0.107170946, 0.107309739, 0.107147814, 0.106754569, 0.106176266, 0.105297247, 0.104302568, 0.103400416, 0.102174416, 0.10067083, 0.098820264, 0.097085357, 0.095211659, 0.093384224, 0.091371733, 0.089359241, 0.087046033, 0.084825353, 0.082882258, 0.081101087, 0.078903539, 0.077885728, 0.072958594, 0.068355309, 0.064099005, 0.061138099, 0.058315984, 0.055008096, 0.052116586, 0.049201943, 0.045963451, 0.043141337, 0.040342355, 0.038283599, 0.035877863, 0.033472126, 0.030395559, 0.028267407, 0.026439972, 0.024866991, 0.023363405, 0.022900763]

                return np.interp(m, M, C)

            if l >= 1.75 and l < 2.25:

                M = [0.601633394, 0.674682396, 0.742740472, 0.799909256, 0.855716878, 0.905626134, 0.954627949, 1.012250454, 1.057622505, 1.09800363, 1.116606171, 1.138838475, 1.155626134, 1.179219601, 1.202359347, 1.233666062, 1.263611615, 1.300816697, 1.343920145, 1.384754991, 1.429673321, 1.465970962, 1.514519056, 1.575317604, 1.638384755, 1.686479129, 1.755444646, 1.831215971, 1.921960073, 2, 2.034943474, 2.241829394, 2.434018499, 2.599075026, 2.796916752, 2.968756423, 3.146248715, 3.350873587, 3.550976362, 3.771428571, 4.130935252, 4.411305242, 4.721068859, 4.975436793, 5.255806783, 5.5]
                C = [0.05938006, 0.059773306, 0.060282211, 0.061068702, 0.062364099, 0.063728892, 0.065463798, 0.067777007, 0.070067083, 0.072495952, 0.073421235, 0.07425399, 0.074762896, 0.07524867, 0.075456859, 0.075526255, 0.075433727, 0.075017349, 0.074300254, 0.073490632, 0.072172103, 0.070830442, 0.069188064, 0.066990516, 0.064792968, 0.063196854, 0.060652325, 0.058107796, 0.054869304, 0.05216285, 0.051815869, 0.048415452, 0.045385149, 0.043118205, 0.040666204, 0.038584316, 0.036479297, 0.034281749, 0.032454314, 0.030256766, 0.027388388, 0.025144576, 0.022877631, 0.021119593, 0.01919963, 0.01764978]

                return np.interp(m, M, C)

            if l >= 2.25:
                
                M = [0.598911071, 0.676950998, 0.750453721, 0.845281307, 0.926043557, 1.001814882, 1.057622505, 1.136116152, 1.197368421, 1.243647913, 1.290834846, 1.340290381, 1.390653358, 1.451451906, 1.531760436, 1.598911071, 1.654264973, 1.728675136, 1.78584392, 1.88430127, 1.94646098, 2, 2.034943474, 2.290441932, 2.543679342, 2.742651593, 2.963103803, 3.20729702, 3.485405961, 3.737512847, 4.002055498, 4.249640288, 4.484789311, 4.690544707, 4.889516958, 5.237718397, 5.5]
                C = [0.051954661, 0.052047189, 0.052232246, 0.052440435, 0.052648624, 0.053018737, 0.05327319, 0.053758964, 0.053874624, 0.053689567, 0.053319454, 0.052926209, 0.052232246, 0.051121906, 0.049733981, 0.048137867, 0.046680546, 0.044899375, 0.043557715, 0.041568355, 0.040296091, 0.039694656, 0.039208883, 0.035762202, 0.032778163, 0.030626879, 0.028568124, 0.026601897, 0.024427481, 0.022831367, 0.02130465, 0.019986121, 0.01864446, 0.017881101, 0.017002082, 0.015683553, 0.014804534]

                return np.interp(m, M, C)

        if eta >= 0.625:

            if l < 1.25:

                M = [0.597914778, 0.683136899, 0.770172257, 0.862647325, 0.960562103, 1.006799637, 1.035811423, 1.079329102, 1.119220308, 1.152311877, 1.193109701, 1.238893926, 1.274705349, 1.317769719, 1.354034451, 1.40344515, 1.438803264, 1.481414325, 1.51087942, 1.553037171, 1.620126927, 1.692656392, 1.75793291, 1.819129646, 1.867633726, 1.915231188, 1.954215775, 2, 2.062076053, 2.235046249, 2.377492292, 2.491675231, 2.634121274, 2.764131552, 2.958581706, 3.163206578, 3.376875642, 3.597327852, 3.797430627, 4.009969168, 4.217985612, 4.456526208, 4.646454265, 4.858992806, 5.056834532, 5.252415211, 5.434429599, 5.5]
                C = [0.050104094, 0.050104094, 0.050659264, 0.052232246, 0.053897756, 0.05505436, 0.055563266, 0.056326625, 0.056928059, 0.057436965, 0.057945871, 0.058431645, 0.05870923, 0.05870923, 0.05870923, 0.05826972, 0.057969003, 0.057251908, 0.056743003, 0.055678927, 0.05382836, 0.051630812, 0.049340736, 0.046773074, 0.045015036, 0.043118205, 0.041406431, 0.039347675, 0.038653713, 0.034883183, 0.032153597, 0.030233634, 0.028313671, 0.026694425, 0.024658802, 0.022738839, 0.0209808, 0.019292158, 0.017996762, 0.016793893, 0.015683553, 0.014642609, 0.01376359, 0.013115892, 0.012630118, 0.012190608, 0.011751099, 0.011519778]

                return np.interp(m, M, C)

            if l >= 1.25 and l < 1.75:

                M = [0.600725953, 0.683303085, 0.769056261, 0.841651543, 0.882032668, 0.94646098, 1.024500907, 1.060344828, 1.098911071, 1.146098004, 1.193284936, 1.246823956, 1.31215971, 1.390653358, 1.439655172, 1.516333938, 1.594373866, 1.672867514, 1.753176044, 1.811705989, 1.879764065, 1.933303085, 2, 2.03946557, 2.233915725, 2.362795478, 2.472456321, 2.571942446, 2.717780062, 2.900924974, 3.119116136, 3.370092497, 3.583761562, 3.829085303, 4.003186023, 4.223638232, 4.407913669, 4.638540596, 4.837512847, 5.051181912, 5.241109969, 5.441212744, 5.5]
                C = [0.042609299, 0.041637752, 0.04006477, 0.038306731, 0.036918806, 0.035322693, 0.034004164, 0.033564654, 0.033333333, 0.033217673, 0.033217673, 0.033448994, 0.033448994, 0.033310201, 0.032940088, 0.032269257, 0.031482767, 0.030164238, 0.029377747, 0.028359935, 0.027249595, 0.026370576, 0.024936387, 0.02475133, 0.022715707, 0.021258385, 0.020171177, 0.019292158, 0.018228082, 0.016840157, 0.015544761, 0.014064307, 0.013000231, 0.011959288, 0.011265325, 0.01054823, 0.010108721, 0.009784872, 0.009183437, 0.00876706, 0.008489475, 0.008281286, 0.008165626]

                return np.interp(m, M, C)
                
            if l >= 1.75:

                M = [0.596562641, 0.703301673, 0.780642243, 0.844414292, 0.922207146, 0.972410674, 1.033016735, 1.101311624, 1.136137494, 1.169154229, 1.216644052, 1.263681592, 1.366350068, 1.450927182, 1.508819539, 1.609226594, 1.725463591, 1.797376753, 1.862505654, 2, 2.039884868, 2.209498355, 2.40625, 2.599609375, 2.8359375, 2.932051809, 3.065481086, 3.214740954, 3.365131579, 3.532483553, 3.769942434, 4.004009046, 4.221114309, 4.442742599, 4.634971217, 4.828330592, 5.042043586, 5.256887336, 5.5]
                C = [0.038306731, 0.035600278, 0.033356465, 0.03118205, 0.028544992, 0.027064539, 0.025537821, 0.0240805, 0.023479065, 0.02308582, 0.022507518, 0.022068008, 0.021327782, 0.021188989, 0.020957668, 0.020656951, 0.019639139, 0.019338422, 0.018783252, 0.017557252, 0.017464724, 0.015891742, 0.014272496, 0.012884571, 0.01142725, 0.010825815, 0.010108721, 0.009715475, 0.009021513, 0.008558871, 0.008003701, 0.007610456, 0.007078418, 0.006800833, 0.006523248, 0.006523248, 0.006407587, 0.006407587, 0.006407587]

                return np.interp(m, M, C)

    if form == "Параболические":

        if eta < 0.25:

            if l < 2.5:

                M = [0.595227168, 0.617255622, 0.64341441, 0.667278568, 0.693437357, 0.717760441, 0.744378155, 0.766865535, 0.788435062, 0.80403855, 0.823313447, 0.83708123, 0.855438274, 0.869664984, 0.879302432, 0.889857733, 0.90316659, 0.91142726, 0.919229004, 0.928407526, 0.937127123, 0.947223497, 0.954107389, 0.96099128, 0.971546581, 0.977971547, 0.987150069, 0.994033961, 1, 1.004130335, 1.016062414, 1.023864158, 1.031665902, 1.040385498, 1.050481872, 1.05782469, 1.067462139, 1.082147774, 1.098210188, 1.114731528, 1.133547499, 1.152822396, 1.173932997, 1.202386416, 1.238641579, 1.264800367, 1.302432308, 1.332721432, 1.355667737, 1.380908674, 1.409821019, 1.441027994, 1.471317118, 1.507572281, 1.575034419, 1.6080771, 1.648462598, 1.725562184, 1.778797614, 1.83708123, 1.906379073, 1.974300138, 2, 2.013250518, 2.104347826, 2.188612836, 2.27515528, 2.362836439, 2.457349896, 2.546169772, 2.630434783, 2.720393375, 2.811490683, 2.917391304, 3.001656315, 3.084782609, 3.187267081, 3.288612836, 3.370600414, 3.517494824, 3.642753623, 3.780538302, 3.897826087, 4.033333333, 4.166563147, 4.439855072, 4.551449275, 4.625465839, 4.697204969, 4.806521739, 4.930641822, 5.04679089, 5.169772257, 5.262008282, 5.358799172, 5.444202899, 5.5]
                C = [0.058133087, 0.059496303, 0.061645102, 0.064071165, 0.066520333, 0.069061922, 0.071996303, 0.074838262, 0.077680222, 0.080013863, 0.083387246, 0.085790203, 0.089232902, 0.092213494, 0.094639556, 0.096903882, 0.100115527, 0.103003697, 0.105822551, 0.109080407, 0.112176525, 0.115503697, 0.118068392, 0.121210721, 0.125369686, 0.129020333, 0.132809612, 0.136437153, 0.140341959, 0.144408503, 0.14900647, 0.152426063, 0.156862292, 0.160027726, 0.161714418, 0.162546211, 0.163678373, 0.164764325, 0.165780961, 0.166381701, 0.166913124, 0.167259704, 0.167398336, 0.167305915, 0.166913124, 0.166196858, 0.164787431, 0.163401109, 0.162222736, 0.160975046, 0.158895564, 0.15672366, 0.154713494, 0.152356747, 0.148036044, 0.146048983, 0.14357671, 0.138840111, 0.135743993, 0.132532348, 0.128766174, 0.125485213, 0.124283734, 0.122989834, 0.118253235, 0.11409427, 0.110281885, 0.106330869, 0.102148799, 0.098428835, 0.094778189, 0.091196858, 0.087707948, 0.083895564, 0.081099815, 0.078465804, 0.075485213, 0.072735675, 0.070633087, 0.067144177, 0.064348429, 0.061483364, 0.059149723, 0.056608133, 0.054251386, 0.049676525, 0.047989834, 0.046973198, 0.046095194, 0.044893715, 0.043715342, 0.042768022, 0.041936229, 0.041404806, 0.040942699, 0.040596118, 0.040434381]
                
                return np.interp(m, M, C)

            if l >= 2.5:

                M = [0.592490842, 0.64514652, 0.714285714, 0.762820513, 0.800824176, 0.830586081, 0.855769231, 0.887362637, 0.919413919, 0.941849817, 0.961996337, 0.981227106, 1.000457875, 1.021520147, 1.045787546, 1.071428571, 1.086996337, 1.104395604, 1.120879121, 1.134157509, 1.156135531, 1.182234432, 1.203754579, 1.225732601, 1.25503663, 1.277930403, 1.302197802, 1.320970696, 1.343406593, 1.371794872, 1.404304029, 1.437728938, 1.471611722, 1.500457875, 1.532967033, 1.573717949, 1.616300366, 1.648351648, 1.68452381, 1.721153846, 1.758699634, 1.799908425, 1.845695971, 1.885989011, 1.93040293, 1.962912088, 2, 2.024218588, 2.074311737, 2.13237425, 2.192713724, 2.249637756, 2.297453943, 2.347547092, 2.401055682, 2.465949079, 2.519457669, 2.600289795, 2.672014076, 2.738045953, 2.805216311, 2.862140344, 2.922479818, 3.009004347, 3.118298489, 3.197992134, 3.276547299, 3.351687021, 3.432519147, 3.50879735, 3.615814531, 3.738770441, 3.827571931, 3.903850135, 4.00175947, 4.14179259, 4.229455599, 4.317118609, 4.395673774, 4.469675016, 4.509521838, 4.58352308, 4.662078245, 4.746325812, 4.837404264, 4.925067274, 5.029807493, 5.110639619, 5.216518319, 5.328089422, 5.425998758, 5.5]
                C = [0.054574861, 0.056862292, 0.060859519, 0.064256007, 0.067398336, 0.070540665, 0.073590573, 0.077726433, 0.08271719, 0.086991682, 0.091658965, 0.095771719, 0.10099353, 0.105660813, 0.110582255, 0.11568854, 0.11857671, 0.120771719, 0.12211183, 0.123220887, 0.124306839, 0.125092421, 0.125369686, 0.125554529, 0.125415896, 0.124930684, 0.124075786, 0.123267098, 0.122134935, 0.120448244, 0.118484288, 0.116451017, 0.114556377, 0.112962107, 0.111229205, 0.109172828, 0.107093346, 0.105591497, 0.10383549, 0.10224122, 0.100531423, 0.098914048, 0.097342884, 0.095887246, 0.094385397, 0.093345656, 0.092121072, 0.091497227, 0.090226433, 0.088770795, 0.087268946, 0.08590573, 0.084773567, 0.083572089, 0.082416821, 0.081030499, 0.079875231, 0.07823475, 0.076709797, 0.075439002, 0.074098891, 0.072920518, 0.071788355, 0.070147874, 0.068114603, 0.066658965, 0.065226433, 0.063863216, 0.062430684, 0.061044362, 0.059172828, 0.05707024, 0.055545287, 0.054297597, 0.052634011, 0.05030037, 0.048960259, 0.047550832, 0.046372458, 0.045240296, 0.044662662, 0.043599815, 0.04262939, 0.041728281, 0.040873383, 0.0400878, 0.039279113, 0.038701479, 0.038031423, 0.037476895, 0.037037893, 0.036737523]
                
                return np.interp(m, M, C)
                
        if eta >= 0.25 and eta < 0.625:

            if l < 1.75:

                M = [0.595510765, 0.665139716, 0.711864407, 0.745304627, 0.768666972, 0.780119102, 0.80989464, 0.839670179, 0.864864865, 0.896472744, 0.932661475, 0.967017865, 1.018323408, 1.066422355, 1.10032066, 1.116811727, 1.13559322, 1.160329821, 1.185982593, 1.207512597, 1.237746221, 1.255153459, 1.282638571, 1.312414109, 1.344480073, 1.3715071, 1.412276683, 1.463124141, 1.503435639, 1.556115437, 1.610627577, 1.670636738, 1.714154833, 1.762711864, 1.826385708, 1.894182318, 1.951901054, 2, 2.016058848, 2.088997099, 2.168773311, 2.267923746, 2.383029424, 2.48787816, 2.587028595, 2.68731869, 2.786469126, 2.94830087, 3.07480315, 3.20586407, 3.318690427, 3.462287609, 3.60132615, 3.754040613, 3.956900124, 4.113033568, 4.327289681, 4.492540406, 4.669187733, 4.889142147, 5.102258599, 5.272067965, 5.5]
                C = [0.056169131, 0.057486137, 0.059126617, 0.061182994, 0.064071165, 0.068669131, 0.075924214, 0.082324399, 0.090272643, 0.098428835, 0.10642329, 0.112731054, 0.121072089, 0.12788817, 0.131816081, 0.133479667, 0.135143253, 0.136991682, 0.138539741, 0.139487061, 0.140411275, 0.140711645, 0.140827172, 0.140573013, 0.139972274, 0.139117375, 0.137615527, 0.135328096, 0.133341035, 0.130568392, 0.127402957, 0.12400647, 0.121557301, 0.118784658, 0.115180222, 0.111321627, 0.108109982, 0.105360444, 0.10478281, 0.101501848, 0.09805915, 0.093599815, 0.088840111, 0.084195933, 0.080730129, 0.076825323, 0.073243993, 0.067883549, 0.063932532, 0.060143253, 0.057231978, 0.053743068, 0.050554529, 0.047527726, 0.043946396, 0.04133549, 0.037985213, 0.035743993, 0.03366451, 0.031284658, 0.029505545, 0.028512015, 0.027680222]

                return np.interp(m, M, C)

            if l >= 1.75 and l < 2.25:

                M = [0.596611722, 0.644688645, 0.691849817, 0.736263736, 0.779761905, 0.820054945, 0.857142857, 0.891941392, 0.919413919, 0.93956044, 0.956043956, 0.973443223, 0.992673993, 1.015567766, 1.035714286, 1.063644689, 1.093864469, 1.11996337, 1.141941392, 1.169413919, 1.190934066, 1.215201465, 1.240384615, 1.271520147, 1.315018315, 1.355311355, 1.402930403, 1.443681319, 1.482142857, 1.518315018, 1.556776557, 1.601648352, 1.64514652, 1.684981685, 1.730311355, 1.777930403, 1.826007326, 1.869047619, 1.909340659, 1.947802198, 2, 2.014276847, 2.198634389, 2.386405959, 2.584419615, 2.790399338, 3.003207118, 3.239913097, 3.475481068, 3.651872543, 3.884026485, 4.091144217, 4.356300435, 4.67266708, 4.983343679, 5.202979516, 5.379370991, 5.5]
                C = [0.050670055, 0.050878004, 0.051524954, 0.052749538, 0.054158965, 0.056192237, 0.058502773, 0.061182994, 0.064417745, 0.067375231, 0.070656192, 0.073821627, 0.077703327, 0.081631238, 0.084842884, 0.089001848, 0.092560074, 0.095240296, 0.097273567, 0.099306839, 0.10064695, 0.101871534, 0.102749538, 0.103396488, 0.103812384, 0.103812384, 0.103373383, 0.102610906, 0.101640481, 0.100415896, 0.098775416, 0.096857671, 0.094916821, 0.093114603, 0.091243068, 0.089024954, 0.086922366, 0.085166359, 0.083387246, 0.081631238, 0.08, 0.07930, 0.073290203, 0.06762939, 0.062222736, 0.05672366, 0.051386322, 0.046534196, 0.04228281, 0.039232902, 0.035882625, 0.033133087, 0.030060074, 0.027102588, 0.024792052, 0.023590573, 0.023012939, 0.022666359]

                return np.interp(m, M, C)

            if l >= 2.25:

                M = [0.599038241, 0.658117701, 0.70116785, 0.74696588, 0.795969773, 0.837188001, 0.884817953, 0.913212732, 0.942523471, 0.97046027, 0.997939089, 1.02999771, 1.061598351, 1.08907717, 1.124799634, 1.150904511, 1.171513625, 1.198992443, 1.226013281, 1.262651706, 1.301122052, 1.330890772, 1.360201511, 1.396381956, 1.438058163, 1.485688115, 1.551179299, 1.61254866, 1.678497825, 1.740783146, 1.807190291, 1.877719258, 1.95511793, 2, 2.021824576, 2.285788167, 2.416632189, 2.61119156, 2.953661564, 3.093607778, 3.244931734, 3.43266446, 3.61584609, 3.892325197, 4.133533306, 4.351985933, 4.568163012, 4.782064543, 4.986863881, 5.262205213, 5.5]
                C = [0.04616451, 0.04616451, 0.04646488, 0.046834566, 0.04745841, 0.048451941, 0.049861368, 0.051039741, 0.052518484, 0.054597967, 0.057231978, 0.060466728, 0.063770795, 0.066404806, 0.069963031, 0.072158041, 0.073821627, 0.075531423, 0.076871534, 0.078165434, 0.078974122, 0.079320702, 0.079320702, 0.079089649, 0.078419593, 0.077102588, 0.075046211, 0.073036044, 0.07086414, 0.06892329, 0.066705176, 0.064487061, 0.061922366, 0.060235675, 0.059842884, 0.053904806, 0.051201479, 0.047296673, 0.041104436, 0.038770795, 0.036529575, 0.034242144, 0.032139556, 0.029066543, 0.026871534, 0.025231054, 0.023821627, 0.022666359, 0.021557301, 0.020286506, 0.019454713]
                
                return np.interp(m, M, C)

        if eta >= 0.625:

            if l < 1.25:

                M = [0.59478022, 0.646520147, 0.695970696, 0.742216117, 0.777930403, 0.816391941, 0.84478022, 0.872252747, 0.899725275, 0.925824176, 0.948717949, 0.974358974, 1.011904762, 1.048534799, 1.079212454, 1.109432234, 1.155677656, 1.198717949, 1.238553114, 1.264194139, 1.304029304, 1.326465201, 1.352564103, 1.378205128, 1.407967033, 1.442765568, 1.481684982, 1.528846154, 1.557692308, 1.592490842, 1.620421245, 1.655677656, 1.691849817, 1.737179487, 1.776556777, 1.809981685, 1.867216117, 1.924908425, 1.980311355, 2, 2.021824576, 2.159495242, 2.284650393, 2.381361192, 2.466694249, 2.58616053, 2.703351262, 2.80006206, 2.903599504, 3.064025652, 3.221038477, 3.397393463, 3.569197352, 3.688663633, 3.787649979, 3.962867191, 4.11532892, 4.263239553, 4.400910219, 4.60912288, 4.794580058, 5.026685974, 5.233760861, 5.420355813, 5.5]
                C = [0.042097967, 0.04232902, 0.042883549, 0.043692237, 0.044593346, 0.04586414, 0.047088725, 0.048636784, 0.050623845, 0.052749538, 0.05478281, 0.057231978, 0.061182994, 0.065157116, 0.068507394, 0.071719039, 0.075739372, 0.07883549, 0.081446396, 0.08301756, 0.084704251, 0.085420518, 0.086113678, 0.086460259, 0.086645102, 0.086575786, 0.086113678, 0.084842884, 0.083872458, 0.08237061, 0.081284658, 0.079898336, 0.078350277, 0.076478743, 0.074815157, 0.073428835, 0.071233826, 0.068877079, 0.066497227, 0.065480591, 0.064995379, 0.06090573, 0.05737061, 0.054713494, 0.05254159, 0.049607209, 0.047042514, 0.044593346, 0.04228281, 0.039302218, 0.036899261, 0.033895564, 0.031192237, 0.029436229, 0.028073013, 0.025970425, 0.02405268, 0.022550832, 0.021187616, 0.019269871, 0.017791128, 0.016173752, 0.015180222, 0.014556377, 0.014325323]

                return np.interp(m, M, C)

            if l >= 1.25 and l < 1.75:

                M = [0.596153846, 0.668040293, 0.732600733, 0.820970696, 0.867673993, 0.905677656, 0.93543956, 0.970695971, 1.004578755, 1.060897436, 1.093864469, 1.117216117, 1.150641026, 1.178113553, 1.215201465, 1.247710623, 1.291666667, 1.334249084, 1.375, 1.414835165, 1.460164835, 1.518315018, 1.561813187, 1.623626374, 1.695512821, 1.769230769, 1.837454212, 1.918040293, 1.953754579, 2, 2.013860157, 2.13105089, 2.234588333, 2.387050062, 2.526996276, 2.671493587, 2.84443525, 2.942283823, 3.033305751, 3.190318577, 3.287029375, 3.405357882, 3.553268515, 3.697765825, 3.892325197, 4.084609019, 4.288270583, 4.487381051, 4.63415391, 4.75362019, 4.943628465, 5.199627638, 5.5]
                C = [0.034842884, 0.034935305, 0.035073937, 0.035651571, 0.036344732, 0.037176525, 0.037962107, 0.039348429, 0.040942699, 0.043761553, 0.045494455, 0.046672828, 0.048151571, 0.049029575, 0.050092421, 0.050831793, 0.051432532, 0.051756007, 0.051640481, 0.051317006, 0.050554529, 0.049491682, 0.048451941, 0.046857671, 0.044986137, 0.043207024, 0.04133549, 0.039256007, 0.038308688, 0.036876155, 0.036760628, 0.034842884, 0.033133087, 0.030891867, 0.028789279, 0.026779113, 0.024584104, 0.023428835, 0.022365989, 0.020794824, 0.019939926, 0.018784658, 0.017421442, 0.016312384, 0.01504159, 0.013932532, 0.012939002, 0.012338262, 0.011621996, 0.010951941, 0.010050832, 0.009542514, 0.009011091]

                return np.interp(m, M, C)
                
            if l >= 1.75:

                M = [0.594285714, 0.676571429, 0.76800000, 0.85760000, 0.911542857, 0.983771429, 1.056457143, 1.137371429, 1.179885714, 1.239314286, 1.297828571, 1.392457143, 1.476571429, 1.553828571, 1.655314286, 1.729371429, 1.781028571, 1.863314286, 1.9424, 2, 2.01727348, 2.20045511, 2.418907737, 2.587298304, 2.728382292, 2.93318163, 3.126603227, 3.322300372, 3.449731072, 3.588539512, 3.814956558, 4.075506827, 4.237070749, 4.420252379, 4.650082747, 4.841228796, 5.043752586, 5.255378568, 5.5]
                C = [0.030152495, 0.03012939, 0.030152495, 0.030452865, 0.0307770, 0.031330869, 0.032601664, 0.033479667, 0.033641405, 0.033756932, 0.033756932, 0.033086876, 0.032000924, 0.030891867, 0.029343808, 0.028119224, 0.027287431, 0.025808688, 0.024237523, 0.022989834, 0.022874307, 0.020956562, 0.018784658, 0.017444547, 0.016427911, 0.0150878, 0.014024954, 0.012962107, 0.012407579, 0.011876155, 0.010951941, 0.010050832, 0.009681146, 0.009172828, 0.008572089, 0.008225508, 0.007855823, 0.007601664, 0.007185767]

                return np.interp(m, M, C)

def C_x_dn(m, l, eta, s, c):

    """
    Функция возвращает коэффициент донного сопротивления корпуса летательного аппарата.
    Следует помнить, что донное сопротивление мало и им можно пренебречь при работающем двигателе.
    Если хочется учесть донное сопротивление при работающем двигателе, необходимо
    передать в функцию отношение площади поперечного сечения донного среза к площади миделя, но
    в качестве площади донного среза нужно взять площадь кольца на донном срезе, которое остается свободным
    от влияния реактивной струи. Из-за малости этой площади, донное сопротивление при работающем двигателе
    и принимается равным нулю. \n
    Графики представлеы в ДПБЛА на стр. 228, 230.

    В качестве аргументов функция принимает:
        1) число Маха.\n
        2) Удлинение кормовой части.\n
        3) Сужение кормовой части.\n
        4) Отношение площади поперечного сечения донного среза к площади миделя.\n
        5) относительную толщину профиля оперения (отношение толщины профиля к его длине
        (рекомендумые значения: от 0.03 до 0.08)). Передайте ноль, если оперения нет.\n
    
    Данная функция не предназначена для расчетов при числах Маха меньше 0.6 из-за недостатка информации на используемых графиках.
    Но расчет все еще можно провести в первом приближении.
    """
    if c == 0:

        M = [0.609258602, 0.687300461, 0.755587088, 0.807023767, 0.842497339, 0.885065626, 0.90546293, 0.926747073, 0.940936502, 0.95601277, 0.980844271, 1.010109968, 1.042923022, 1.073075559, 1.112983327, 1.159098971, 1.232706634, 1.301880099, 1.381695637, 1.493437389, 1.613160695, 1.72135509, 1.829549486, 1.935083363, 2.069882937, 2.193153601, 2.327953175, 2.464526428, 2.612628592, 2.75540972, 2.911493437, 3.065803476, 3.229868748, 3.467541681, 3.659098971, 3.90297978, 4.085668677, 4.459914863, 4.640830082, 4.816424264, 5, 10, 20]
        P = [0.122378855, 0.123876652, 0.127136564, 0.133656388, 0.141674009, 0.157004405, 0.168017621, 0.17876652, 0.185286344, 0.189162996, 0.192422907, 0.194977974, 0.195859031, 0.196123348, 0.194977974, 0.193127753, 0.189427313, 0.185550661, 0.181409692, 0.176475771, 0.170660793, 0.164933921, 0.159735683, 0.154449339, 0.146960352, 0.13938326, 0.131806167, 0.125374449, 0.118942731, 0.112687225, 0.106872247, 0.100528634, 0.094977974, 0.085991189, 0.078502203, 0.071013216, 0.066079295, 0.054713656, 0.049603524, 0.045374449, 0.04246696, 0.01, 0.001]

    if c > 0 and c < 0.0275:

        M = [0.609258602, 0.685526783, 0.742284498, 0.783965945, 0.816779, 0.860234126, 0.895707698, 0.941823342, 0.979070592, 1.002128414, 1.022525718, 1.036715147, 1.050904576, 1.065980844, 1.081943952, 1.104114934, 1.118304363, 1.129833274, 1.143135864, 1.162646328, 1.174175239, 1.18659099, 1.205214615, 1.229159276, 1.265519688, 1.302766939, 1.340901029, 1.375487762, 1.406527137, 1.437566513, 1.465058531, 1.506739979, 1.554629301, 1.630010642, 1.678786804, 1.717807733, 1.766583895, 1.805604824, 1.839304718, 1.881873005, 1.910251862, 1.952820149, 2.006030507, 2.058354026, 2.112451224, 2.15590635, 2.192266761, 2.241042923, 2.310216389, 2.374955658, 2.433487052, 2.484036893, 2.542568287, 2.585136573, 2.989535296, 3.330968429, 3.714969847, 4.153955303, 4.559240866, 4.853671515, 5, 10, 20]
        P = [0.130484581, 0.133215859, 0.137356828, 0.142290749, 0.148810573, 0.159559471, 0.168898678, 0.182731278, 0.195506608, 0.202819383, 0.207312775, 0.209955947, 0.212070485, 0.213656388, 0.214713656, 0.215594714, 0.215770925, 0.215770925, 0.215418502, 0.214361233, 0.213744493, 0.213127753, 0.212422907, 0.21154185, 0.210396476, 0.209162996, 0.207929515, 0.206784141, 0.205638767, 0.204493392, 0.203259912, 0.201321586, 0.198854626, 0.194185022, 0.190396476, 0.187048458, 0.182026432, 0.178325991, 0.175242291, 0.17154185, 0.169251101, 0.165814978, 0.161674009, 0.157621145, 0.153744493, 0.150660793, 0.148105727, 0.144933921, 0.14061674, 0.136740088, 0.133480176, 0.130660793, 0.127577093, 0.125374449, 0.106343612, 0.092599119, 0.077973568, 0.065198238, 0.053127753, 0.046167401, 0.043436123, 0.01, 0.001]

    if c >= 0.0275 and c < 0.035:

        M = [0.609366684, 0.669682455, 0.71846727, 0.776122051, 0.835550825, 0.886109633, 0.942877417, 0.989001242, 1.03157708, 1.058186979, 1.068830938, 1.090118858, 1.109632783, 1.131807699, 1.153982615, 1.179705517, 1.20010644, 1.233812312, 1.312755012, 1.454674472, 1.49725031, 1.532730176, 1.573532021, 1.669327657, 1.832535036, 1.962036544, 2.082668086, 2.239666489, 2.357637041, 2.489799539, 2.601561114, 2.945715806, 3.280113536, 3.702323931, 4.13429129, 4.532552776, 4.84477559, 5, 10, 20]
        P = [0.131982379, 0.134889868, 0.138061674, 0.144845815, 0.155418502, 0.168986784, 0.185286344, 0.201145374, 0.21339207, 0.219471366, 0.220881057, 0.22246696, 0.222907489, 0.222643172, 0.221497797, 0.219911894, 0.218678414, 0.217356828, 0.214713656, 0.210660793, 0.209603524, 0.20845815, 0.205726872, 0.198061674, 0.18246696, 0.169339207, 0.158854626, 0.147136564, 0.14, 0.131982379, 0.125903084, 0.109162996, 0.094801762, 0.078678414, 0.065550661, 0.054185022, 0.04660793, 0.044052863, 0.01, 0.001]

    if c >= 0.035 and c < 0.045:

        M = [0.609258602, 0.6633558, 0.728095069, 0.776871231, 0.812344803, 0.844271018, 0.881518269, 0.915218162, 0.953352253, 0.98261795, 1.028733593, 1.063320326, 1.079283434, 1.088151827, 1.097907059, 1.11032281, 1.127172756, 1.145796382, 1.162646328, 1.187477829, 1.232706634, 1.286803831, 1.356864136, 1.398545584, 1.443774388, 1.491663711, 1.536892515, 1.561724016, 1.578573962, 1.598971266, 1.614047535, 1.635331678, 1.661936857, 1.69652359, 1.727562966, 1.77279177, 1.827775807, 1.882759844, 1.953706988, 2.017559418, 2.077864491, 2.148811635, 2.231287691, 2.314650585, 2.412202909, 2.499113161, 2.595778645, 2.954948563, 3.35402625, 3.721177723, 4.115821213, 4.576090812, 4.845689961, 5, 10, 20]
        P = [0.134185022, 0.136123348, 0.141321586, 0.146696035, 0.15277533, 0.160088106, 0.169779736, 0.17876652, 0.190572687, 0.200528634, 0.214889868, 0.225726872, 0.229867841, 0.231277533, 0.232070485, 0.232599119, 0.232687225, 0.232511013, 0.231894273, 0.230660793, 0.228370044, 0.225462555, 0.221762115, 0.220088106, 0.218502203, 0.217885463, 0.217797357, 0.217709251, 0.217356828, 0.216211454, 0.215242291, 0.212599119, 0.208546256, 0.203259912, 0.198854626, 0.194008811, 0.188546256, 0.1830837, 0.175682819, 0.168986784, 0.163171806, 0.156563877, 0.15030837, 0.144052863, 0.137885463, 0.13277533, 0.127577093, 0.110484581, 0.093920705, 0.079911894, 0.067400881, 0.053303965, 0.047048458, 0.044581498, 0.01, 0.001]

    if c >= 0.045 and c < 0.055:

        M = [0.609150559, 0.673878347, 0.727965951, 0.775846781, 0.814860791, 0.84500798, 0.871608441, 0.908849087, 0.937222912, 0.973576875, 1.017024295, 1.044511438, 1.056038305, 1.063131761, 1.072885263, 1.087072176, 1.101259088, 1.118992729, 1.135839688, 1.158006739, 1.18017379, 1.212094343, 1.242241532, 1.283915588, 1.335343146, 1.387657386, 1.430218124, 1.461251995, 1.495832594, 1.514452917, 1.533959922, 1.555240291, 1.577407342, 1.603121121, 1.62440149, 1.645681858, 1.667848909, 1.696222735, 1.721936514, 1.732576698, 1.751197021, 1.7769108, 1.823904948, 1.864692321, 1.915233197, 1.964000709, 2.013654903, 2.065969143, 2.105869835, 2.154637347, 2.214931725, 2.280546196, 2.344387303, 2.403794999, 2.452562511, 2.511970207, 2.56960454, 2.625465508, 2.959744636, 3.26653662, 3.598155701, 3.916474552, 4.265827274, 4.647987232, 5, 10, 20]
        P = [0.136651982, 0.14, 0.144405286, 0.14969163, 0.156563877, 0.163612335, 0.17092511, 0.180969163, 0.189515419, 0.200704846, 0.216035242, 0.227665198, 0.23339207, 0.235154185, 0.236563877, 0.237709251, 0.238237885, 0.238590308, 0.238590308, 0.238237885, 0.237709251, 0.236563877, 0.235242291, 0.233303965, 0.230660793, 0.228017621, 0.225991189, 0.224845815, 0.223876652, 0.223612335, 0.223612335, 0.223612335, 0.223436123, 0.222643172, 0.221585903, 0.219735683, 0.216828194, 0.212863436, 0.208546256, 0.206343612, 0.203348018, 0.199911894, 0.194273128, 0.189603524, 0.183876652, 0.178414097, 0.173039648, 0.167665198, 0.163700441, 0.159207048, 0.154096916, 0.148986784, 0.144493392, 0.140440529, 0.137356828, 0.133832599, 0.130660793, 0.127929515, 0.11339207, 0.100088106, 0.085726872, 0.073480176, 0.062378855, 0.051013216, 0.043171806, 0.01, 0.001]

    if c >= 0.055 and c < 0.065:

        M = [0.609366684, 0.654603513, 0.724676246, 0.783218024, 0.818697889, 0.855951747, 0.902962569, 0.931346461, 0.967713323, 1.002306191, 1.03689906, 1.051978002, 1.068830938, 1.093666844, 1.125598723, 1.155756608, 1.18946248, 1.220507362, 1.288806103, 1.368635799, 1.413872627, 1.465318432, 1.50257229, 1.519425226, 1.536278162, 1.554905091, 1.575306014, 1.593932943, 1.615220862, 1.632073798, 1.647152741, 1.680858613, 1.737626397, 1.782863225, 1.838744013, 1.922121696, 2.020578322, 2.113712968, 2.22103956, 2.323931169, 2.417065815, 2.515522441, 2.590030158, 3.116019159, 3.483235764, 3.931169062, 4.361362427, 4.743657974, 4.850984566, 5, 10, 20]
        P = [0.138325991, 0.140881057, 0.145903084, 0.151894273, 0.158325991, 0.16784141, 0.180528634, 0.19030837, 0.202907489, 0.214713656, 0.228810573, 0.234449339, 0.238942731, 0.242378855, 0.244317181, 0.244933921, 0.244933921, 0.244140969, 0.241145374, 0.236740088, 0.234361233, 0.232334802, 0.230572687, 0.230044053, 0.229515419, 0.229779736, 0.23030837, 0.230660793, 0.230396476, 0.229603524, 0.227577093, 0.222026432, 0.211982379, 0.203348018, 0.196211454, 0.187488987, 0.175682819, 0.165286344, 0.155947137, 0.147488987, 0.140881057, 0.134889868, 0.13092511, 0.105726872, 0.089955947, 0.071982379, 0.058854626, 0.04845815, 0.046079295, 0.044229075, 0.01, 0.001]

    if c >= 0.065 and c < 0.075:

        M = [0.609366684, 0.651942523, 0.71314529, 0.742416179, 0.785879014, 0.818697889, 0.852403761, 0.888770623, 0.929572468, 0.961504346, 0.991662232, 1.016498137, 1.045769026, 1.075039915, 1.092779847, 1.112293773, 1.133581692, 1.147773638, 1.160191591, 1.174383537, 1.190349477, 1.210750399, 1.247117261, 1.298563065, 1.362426823, 1.419194607, 1.472414405, 1.522973213, 1.552244101, 1.593932943, 1.617881852, 1.638282775, 1.652474721, 1.66311868, 1.672875643, 1.685293596, 1.712790491, 1.741174384, 1.766010289, 1.794394181, 1.819230087, 1.852048962, 1.883093844, 1.927443676, 1.969132517, 2.025013305, 2.074685116, 2.135000887, 2.192655668, 2.276033351, 2.371828987, 2.467624623, 2.582047188, 3.001596594, 3.396310094, 3.757317722, 4.068653539, 4.483767962, 4.83945361, 5, 10, 20]
        P = [0.140528634, 0.142290749, 0.146167401, 0.148722467, 0.153832599, 0.159471366, 0.16907489, 0.179471366, 0.193568282, 0.206167401, 0.217973568, 0.227665198, 0.236740088, 0.244581498, 0.24845815, 0.252070485, 0.255242291, 0.256475771, 0.257092511, 0.257444934, 0.257004405, 0.255594714, 0.252863436, 0.249162996, 0.245550661, 0.243171806, 0.241409692, 0.24061674, 0.240528634, 0.24123348, 0.241674009, 0.241674009, 0.241409692, 0.240881057, 0.24, 0.23753304, 0.231982379, 0.226519824, 0.22185022, 0.216740088, 0.21277533, 0.207753304, 0.2030837, 0.196740088, 0.19092511, 0.183259912, 0.177004405, 0.169867841, 0.163436123, 0.154713656, 0.146696035, 0.140176211, 0.134273128, 0.114361233, 0.094537445, 0.078854626, 0.068370044, 0.055594714, 0.047312775, 0.045286344, 0.01, 0.001]

    if c >= 0.075 and c < 0.09:

        M = [0.609258602, 0.655374246, 0.700603051, 0.742284498, 0.781305427, 0.802589571, 0.831855268, 0.871763037, 0.906349769, 0.928520752, 0.947144377, 0.979070592, 1.003015254, 1.023412558, 1.052678255, 1.076622916, 1.096133381, 1.10943597, 1.12273856, 1.134267471, 1.1484569, 1.154664775, 1.164420007, 1.174175239, 1.183043632, 1.191025186, 1.19900674, 1.210535651, 1.226498758, 1.253103938, 1.290351188, 1.329372118, 1.367506208, 1.407413977, 1.436679674, 1.468605889, 1.491663711, 1.51738205, 1.538666194, 1.557289819, 1.573252927, 1.590989713, 1.60695282, 1.62025541, 1.637105357, 1.647747428, 1.656615821, 1.667257893, 1.678786804, 1.689428875, 1.700070947, 1.710713019, 1.719581412, 1.731110323, 1.741752394, 1.755054984, 1.77279177, 1.788754878, 1.808265342, 1.826888968, 1.84994679, 1.866796736, 1.890741398, 1.919120255, 1.949272792, 1.982085846, 2.033522526, 2.084072366, 2.128414331, 2.179851011, 2.225966655, 2.27030862, 2.317311103, 2.354558354, 2.394466123, 2.431713374, 2.463639589, 2.510642072, 2.546115644, 2.5833695, 3.129655906, 3.634267471, 4.077687123, 4.421780773, 4.856332033, 5, 10, 20]
        P = [0.145286344, 0.147136564, 0.149603524, 0.152951542, 0.157268722, 0.161057269, 0.168105727, 0.178942731, 0.190572687, 0.198854626, 0.206784141, 0.219030837, 0.22784141, 0.234889868, 0.244669604, 0.25215859, 0.257797357, 0.261057269, 0.263700441, 0.265814978, 0.267929515, 0.268722467, 0.269339207, 0.269867841, 0.270044053, 0.270044053, 0.26969163, 0.268986784, 0.26784141, 0.265726872, 0.263259912, 0.260881057, 0.258854626, 0.257004405, 0.255859031, 0.254889868, 0.254361233, 0.254096916, 0.254096916, 0.254185022, 0.254537445, 0.255154185, 0.256123348, 0.257092511, 0.258590308, 0.259559471, 0.26, 0.260352423, 0.260352423, 0.259911894, 0.259118943, 0.257797357, 0.256475771, 0.253744493, 0.250748899, 0.247488987, 0.243348018, 0.24, 0.236299559, 0.232951542, 0.228810573, 0.225462555, 0.220792952, 0.215330396, 0.20969163, 0.204405286, 0.196211454, 0.188281938, 0.18185022, 0.174713656, 0.168986784, 0.163436123, 0.158237885, 0.154537445, 0.151013216, 0.148105727, 0.145903084, 0.142907489, 0.140792952, 0.138854626, 0.115154185, 0.09277533, 0.073127753, 0.059559471, 0.04784141, 0.045638767, 0.01, 0.001]

    if c >= 0.09:

        M = [0.609150559, 0.659691435, 0.710232311, 0.75367973, 0.789147012, 0.809540699, 0.832594432, 0.866288349, 0.889342082, 0.908849087, 0.929242774, 0.946089732, 0.966483419, 0.981557014, 0.995743926, 1.007270793, 1.019684341, 1.021457705, 1.023231069, 1.024117751, 1.025004433, 1.026777797, 1.030324526, 1.0365313, 1.041851392, 1.048058166, 1.056924987, 1.067565171, 1.07997872, 1.090618904, 1.123426139, 1.192587338, 1.253768399, 1.354850151, 1.418691257, 1.496719276, 1.580067388, 1.643908494, 1.675829048, 1.702429509, 1.727256606, 1.749423657, 1.783117574, 1.818584855, 1.858485547, 1.918779926, 1.983507714, 2.030501862, 2.0730626, 2.123603476, 2.17769108, 2.23000532, 2.288526334, 2.3346338, 2.408228409, 2.439262281, 2.4827097, 2.558077673, 2.642312467, 2.742507537, 3.098953715, 3.496187267, 4.014896258, 4.517644973, 4.883844653, 5, 10, 20]
        P = [0.148193833, 0.14969163, 0.152511013, 0.156123348, 0.161057269, 0.164581498, 0.170484581, 0.180440529, 0.187577093, 0.194449339, 0.202731278, 0.211718062, 0.224493392, 0.236475771, 0.248810573, 0.261674009, 0.277444934, 0.282555066, 0.284405286, 0.285110132, 0.285814978, 0.286343612, 0.286696035, 0.286872247, 0.286872247, 0.286872247, 0.286696035, 0.286431718, 0.285726872, 0.284933921, 0.282819383, 0.28, 0.277709251, 0.274801762, 0.273127753, 0.271894273, 0.271189427, 0.270484581, 0.269603524, 0.268105727, 0.266079295, 0.263259912, 0.256828194, 0.249251101, 0.240528634, 0.228986784, 0.217885463, 0.208370044, 0.20061674, 0.191806167, 0.184493392, 0.177180617, 0.169427313, 0.162907489, 0.154625551, 0.151101322, 0.147312775, 0.141057269, 0.136123348, 0.130660793, 0.11339207, 0.096740088, 0.074713656, 0.056475771, 0.047312775, 0.044493392, 0.01, 0.001]
        
    p = np.interp(m, M, P)
    
    otn = (1-eta)/(2*l*eta**2)

    if m < 0.7:

        OTN = [0, 0.005031447, 0.009811321, 0.016436059, 0.024654088, 0.0360587, 0.047798742, 0.060293501, 0.073207547, 0.08721174, 0.10197065, 0.113207547, 0.124863732, 0.137610063, 0.151865828, 0.168134172, 0.185157233, 0.19966457, 0.213081761, 0.231278826, 0.252410901, 0.26884696, 0.283354298, 0.306331237, 0.326960168, 0.367714885, 0.412410901, 0.45769392, 0.498448637, 0.6]
        K = [1, 0.96056338, 0.933388567, 0.89958575, 0.863794532, 0.81988401, 0.778127589, 0.734714167, 0.691135046, 0.645898923, 0.6004971, 0.568019884, 0.535542668, 0.501739851, 0.465120133, 0.424192212, 0.382767191, 0.349627175, 0.32029826, 0.283678542, 0.244407622, 0.217232809, 0.194200497, 0.162220381, 0.135708368, 0.090140845, 0.051367026, 0.01971831, 0.0003314, 0.0001657]
        
    if m >= 0.7 and m < 0.9:

        OTN = [0, 0.006041958, 0.014937063, 0.025762238, 0.038685315, 0.050433566, 0.065454545, 0.081314685, 0.097678322, 0.110685315, 0.126041958, 0.144503497, 0.164643357, 0.183188811, 0.20979021, 0.234461538, 0.265342657, 0.3, 0.338517483, 0.37820979, 0.422937063, 0.465986014, 0.520531469, 0.566853147, 0.573566434, 0.6]
        K = [1, 0.950787075, 0.908533554, 0.867274234, 0.821541011, 0.782601491, 0.736536868, 0.684341342, 0.635459818, 0.598674399, 0.558077879, 0.511184756, 0.461806131, 0.416901408, 0.361888981, 0.313670257, 0.262468931, 0.211267606, 0.162717481, 0.12079536, 0.08069594, 0.051201326, 0.022203811, 0.001988401, 0.0004971, 0.0004971]
    
    if m >= 0.9 and m < 1.05:

        OTN = [0, 0.011140584, 0.026134301, 0.046070082, 0.068016194, 0.087700684, 0.107385174, 0.125394388, 0.15043976, 0.175903951, 0.19977663, 0.223146726, 0.251877705, 0.276252967, 0.299455535, 0.335725255, 0.375764345, 0.408767276, 0.447047327, 0.477118526, 0.521345805, 0.568169761, 0.6]
        K = [1, 0.934217067, 0.875559238, 0.811764706, 0.745153273, 0.686826843, 0.632974316, 0.582932891, 0.522286661, 0.465120133, 0.416570008, 0.373156587, 0.325103563, 0.289312345, 0.257497929, 0.213918807, 0.172659486, 0.143496272, 0.114001657, 0.093454847, 0.066445733, 0.044241922, 0.032808616]
    
    if m >= 1.05 and m < 1.15:

        OTN = [0, 0.01171875, 0.030887277, 0.057672991, 0.091238839, 0.121875, 0.165234375, 0.192020089, 0.222907366, 0.249776786, 0.28125, 0.306696429, 0.328710938, 0.353404018, 0.387137277, 0.423883929, 0.462137277, 0.501897321, 0.547767857, 0.581752232, 0.6]
        K = [1, 0.933719967, 0.855012428, 0.777299089, 0.687986744, 0.610439105, 0.511019056, 0.453189727, 0.391880696, 0.344821872, 0.296934548, 0.262966031, 0.236454018, 0.209610605, 0.177133389, 0.146313173, 0.118475559, 0.092460646, 0.068765534, 0.053686827, 0.047058824]
    
    if m >= 1.15 and m < 1.25:

        OTN = [0, 0.013141741, 0.033482143, 0.055831473, 0.074832589, 0.09718192, 0.118024554, 0.138616071, 0.169503348, 0.206584821, 0.246177455, 0.280580357, 0.315401786, 0.357170759, 0.388141741, 0.428236607, 0.467159598, 0.52156808, 0.569196429, 0.6]
        K = [1, 0.923115162, 0.853852527, 0.788400994, 0.736039768, 0.681027341, 0.634134217, 0.589063795, 0.522949461, 0.446230323, 0.375144988, 0.322783761, 0.276222038, 0.227671914, 0.196354598, 0.161391881, 0.132891466, 0.09991715, 0.077216239, 0.065948633]
    
    if m >= 1.25 and m < 1.35:

        OTN = [0, 0.010037641, 0.025261397, 0.045671267, 0.075784191, 0.109995818, 0.143621916, 0.185780008, 0.229109159, 0.270430782, 0.306733584, 0.351401087, 0.394144709, 0.444500209, 0.485654538, 0.53818486, 0.586700125, 0.6]
        K = [1, 0.943330572, 0.882850041, 0.817398509, 0.738525269, 0.661971831, 0.592046396, 0.511019056, 0.434797017, 0.366197183, 0.313670257, 0.256835128, 0.210936205, 0.166694283, 0.137862469, 0.108533554, 0.089146645, 0.084175642]
    
    if m >= 1.35 and m < 1.45:

        OTN = [0, 0.014970728, 0.041232227, 0.080540842, 0.113074993, 0.165681628, 0.219375523, 0.265793142, 0.316476164, 0.389824366, 0.432227488, 0.471787009, 0.518873711, 0.566462225, 0.6]
        K = [1, 0.928914664, 0.842087821, 0.73968517, 0.669096935, 0.570339685, 0.474565037, 0.4001657, 0.328251864, 0.23927092, 0.197183099, 0.165865783, 0.137862469, 0.116155758, 0.104059652]
    
    if m >= 1.45 and m < 1.55:

        OTN = [0, 0.008276439, 0.022572105, 0.041214992, 0.062533092, 0.088282012, 0.113780131, 0.138358646, 0.171882402, 0.215103804, 0.241772328, 0.266518044, 0.300209001, 0.3213599, 0.344015605, 0.368008917, 0.404040686, 0.433217222, 0.459133343, 0.485634666, 0.517653616, 0.5571966, 0.585369932, 0.6]
        K = [1, 0.962717481, 0.909362055, 0.861640431, 0.807953604, 0.747307374, 0.691466446, 0.64026512, 0.592046396, 0.516321458, 0.466611433, 0.433637117, 0.383761392, 0.356917978, 0.333222867, 0.29908865, 0.262137531, 0.230654515, 0.205799503, 0.186412593, 0.164871582, 0.147307374, 0.144324772, 0.144324772]
    
    if m >= 1.55 and m < 1.65:

        OTN = [0, 0.010612813, 0.022896936, 0.035097493, 0.055905292, 0.081225627, 0.115738162, 0.136462396, 0.153509749, 0.175571031, 0.205153203, 0.239164345, 0.282033426, 0.313788301, 0.33735376, 0.37270195, 0.404707521, 0.453091922, 0.508746518, 0.541504178, 0.571420613, 0.6]
        K = [1, 0.948301574, 0.905882353, 0.872245236, 0.827174814, 0.774316487, 0.701739851, 0.661640431, 0.632145816, 0.597514499, 0.554929577, 0.503065452, 0.435625518, 0.392046396, 0.362054681, 0.32013256, 0.285998343, 0.242087821, 0.201325601, 0.181441591, 0.166528583, 0.154266777]
    
    if m >= 1.65 and m < 1.75:

        OTN = [0, 0.020462138, 0.043429844, 0.073914254, 0.101642539, 0.133797327, 0.162778396, 0.195434298, 0.236859688, 0.266926503, 0.300083519, 0.331904232, 0.372577951, 0.409910913, 0.443151448, 0.482989978, 0.520907572, 0.556653675, 0.594988864, 0.6]
        K = [1, 0.917647059, 0.867274234, 0.798342999, 0.74034797, 0.677216239, 0.626677713, 0.57912179, 0.521292461, 0.475062138, 0.426346313, 0.386412593, 0.341507871, 0.305716653, 0.278044739, 0.249710025, 0.227174814, 0.208450704, 0.191052196, 0.189063795]
    
    if m >= 1.75 and m < 1.85:

        OTN = [0, 0.019626949, 0.052032294, 0.10857461, 0.141481069, 0.171213808, 0.222995546, 0.261998886, 0.311859688, 0.359966592, 0.417511136, 0.480150334, 0.537026726, 0.580122494, 0.6]
        K = [1, 0.921458161, 0.852195526, 0.736039768, 0.673570837, 0.625683513, 0.556089478, 0.503893952, 0.435128418, 0.377630489, 0.323280862, 0.281524441, 0.251035626, 0.231814416, 0.224357912]
    
    if m >= 1.85 and m < 1.95:

        OTN = [0, 0.022608454, 0.046134594, 0.063153504, 0.085177976, 0.106368187, 0.126974416, 0.152252503, 0.180951057, 0.211818687, 0.245105673, 0.280311457, 0.312931034, 0.344215795, 0.375667408, 0.410789766, 0.447914349, 0.481868743, 0.521412681, 0.552614016, 0.58256396, 0.6]
        K = [1, 0.916818558, 0.870753935, 0.835128418, 0.790057995, 0.749627175, 0.711516156, 0.667771334, 0.624026512, 0.582767191, 0.542004971, 0.49925435, 0.45932063, 0.422203811, 0.388898094, 0.356752278, 0.329411765, 0.308367854, 0.289146645, 0.277547639, 0.267439934, 0.262966031]
    
    if m >= 1.95 and m < 2.25:

        OTN = [0, 0.012911287, 0.028238234, 0.045814244, 0.069804248, 0.091878384, 0.124031653, 0.149604332, 0.176759683, 0.210245731, 0.253810912, 0.29029571, 0.341774261, 0.361932528, 0.405081216, 0.445314452, 0.481382757, 0.506538942, 0.531361933, 0.569512703, 0.6]
        K = [1, 0.947970174, 0.908533554, 0.876387738, 0.833140017, 0.792709196, 0.736039768, 0.690969345, 0.655178128, 0.607787904, 0.553935377, 0.516818558, 0.461640431, 0.44043082, 0.404805302, 0.377796189, 0.354929577, 0.34001657, 0.331565866, 0.324772162, 0.323612262]
    
    if m >= 2.25 and m < 2.75:

        OTN = [0, 0.01332593, 0.031732371, 0.067129373, 0.109522488, 0.172071072, 0.247362576, 0.334397557, 0.411521377, 0.514714048, 0.6]
        K = [1, 0.944987572, 0.896934548, 0.833471417, 0.772162386, 0.690969345, 0.610273405, 0.535542668, 0.477547639, 0.430488815, 0.412096106]
    
    if m >= 2.75 and m < 3.25:

        OTN = [0, 0.013708114, 0.02866242, 0.055995569, 0.08457491, 0.115397397, 0.145638327, 0.180780947, 0.223733038, 0.265272778, 0.319274439, 0.37983938, 0.43085018, 0.477790086, 0.529548601, 0.570008308, 0.6]
        K = [1, 0.945153273, 0.910521955, 0.863463132, 0.816735708, 0.776967688, 0.744490472, 0.708864954, 0.669096935, 0.637116819, 0.6004971, 0.570173985, 0.545318973, 0.528417564, 0.515824358, 0.512676056, 0.511516156]
    
    if m >= 3.25 and m < 3.75:

        OTN = [0, 0.008635483, 0.020011071, 0.035787434, 0.05637974, 0.078051481, 0.103625796, 0.128452809, 0.162662607, 0.194713534, 0.237641849, 0.28571824, 0.341184611, 0.391918074, 0.448380847, 0.504179352, 0.572432881, 0.6]
        K = [1, 0.964705882, 0.932062966, 0.90024855, 0.868931234, 0.83993372, 0.808616404, 0.784258492, 0.753106877, 0.728086164, 0.695774648, 0.663960232, 0.633802817, 0.609942005, 0.585252693, 0.566031483, 0.551284176, 0.548301574]
    
    if m >= 3.75 and m < 4.25:

        OTN = [0, 0.005728518, 0.012702366, 0.027065172, 0.04400166, 0.062349523, 0.080780407, 0.099128269, 0.118223329, 0.137069323, 0.154503944, 0.175259444, 0.19252802, 0.20747198, 0.22656704, 0.244333748, 0.262847655, 0.282523869, 0.299626401, 0.369779992, 0.43154836, 0.484018265, 0.555500208, 0.6]
        K = [1, 0.975476388, 0.954763877, 0.92062966, 0.890969345, 0.866280033, 0.845236123, 0.826677713, 0.809279205, 0.793869097, 0.78094449, 0.765700083, 0.753438277, 0.742833471, 0.730240265, 0.718806959, 0.708367854, 0.697597349, 0.688483844, 0.656503728, 0.633305717, 0.617067109, 0.601491301, 0.595360398]
    
    if m >= 4.25 and m < 4.75:

        OTN = [0, 0.005726933, 0.013611841, 0.022575737, 0.033365611, 0.0514594, 0.067229216, 0.083912021, 0.103499793, 0.129146493, 0.160022133, 0.197205699, 0.235219256, 0.275888781, 0.320625259, 0.35830682, 0.396071379, 0.458901646, 0.529865818, 0.586886153, 0.6]
        K = [1, 0.978127589, 0.956420878, 0.934548467, 0.912841756, 0.885004143, 0.865617233, 0.847555924, 0.830323115, 0.809610605, 0.787903894, 0.764540182, 0.741342171, 0.71930406, 0.698260149, 0.682352941, 0.669096935, 0.648550124, 0.628666114, 0.617232809, 0.615410108]
    
    if m >= 4.75:

        OTN = [0, 0.008621166, 0.021718707, 0.038132081, 0.053550705, 0.073197016, 0.096905222, 0.120696325, 0.149129594, 0.177562863, 0.203675048, 0.230450401, 0.261785023, 0.293782813, 0.325283227, 0.354959934, 0.38762089, 0.415142305, 0.443741365, 0.473749655, 0.504504007, 0.5364189, 0.567587731, 0.594611771, 0.6]
        K = [1, 0.971333886, 0.938359569, 0.908533554, 0.886164043, 0.863794532, 0.842253521, 0.824855012, 0.805799503, 0.787903894, 0.772825186, 0.758574979, 0.742833471, 0.728417564, 0.715824358, 0.704888152, 0.693620547, 0.684672742, 0.675393538, 0.666777133, 0.657497929, 0.648715824, 0.64076222, 0.634134217, 0.632642916]
    

    k = np.interp(otn, OTN, K)

    return p*k*s

def C_x_dn_kr(m, h, b):

    """
    Функция возвращает коэффициент донного сопротивления для крына (оперения) с затупленной задней кромкой.
    Читай об этой в главе 2.4 на стр. 242 в ДПБЛА.\n
    В качестве аргументов принимет:
        1) Число Маха.\n
        2) Толщину (высоту) задней кромки профиля крыла (оперения).\n
        3) Хорда крыла 
    """

    M = [1, 1.191460642, 1.247726627, 1.320403524, 1.387610117, 1.50951975, 1.595481671, 1.695510088, 1.765842569, 1.845552714, 1.948707019, 2.077649901, 2.22144075, 2.326157999, 2.437908497, 2.604362035, 2.769252629, 2.948991191, 3.150610969, 3.383489628, 3.665601023, 3.990693379, 4.222790566, 4.502557545, 4.763569196, 5.167590224, 5.562233589, 5.897485081, 6.149119068, 6.351520318, 6.5]
    P = [0.35, 0.35, 0.347618525, 0.342317823, 0.33571115, 0.315276558, 0.292153205, 0.266878841, 0.248979368, 0.233384548, 0.216867867, 0.198507463, 0.182451712, 0.172080773, 0.160096576, 0.148112379, 0.136512291, 0.125834065, 0.11523266, 0.104477612, 0.091725198, 0.080201932, 0.073134328, 0.065913082, 0.060151449, 0.05154741, 0.045785777, 0.042559263, 0.040331431, 0.038948639, 0.03725856]

    p = np.interp(m, M, P)

    return p*(h/b)

def Eta_c(c):

    """
    Функция возвращает поправочный коэффициент eta_C, который учитывает влияние толщины профиля
    на профильное сопротивление аэродиамических поверхностей.\n В качестве аргумента принимает относительную толщину профиля аэродинамической поверхности
    """

    C = [0, 0.004427297, 0.009751628, 0.015336388, 0.020573909, 0.025377381, 0.031106824, 0.037906921, 0.043549554, 0.048121534, 0.055529298, 0.060217024, 0.066235833, 0.072457198, 0.077723656, 0.082324572, 0.089095732, 0.093465156, 0.09757415, 0.102811671, 0.106197251, 0.11001688, 0.11432843, 0.12]
    eta_c = [1.00035727, 1.010217935, 1.022936763, 1.037084673, 1.050946767, 1.063808503, 1.079528403, 1.097534834, 1.112540193, 1.125116113, 1.145837799, 1.158985352, 1.176848875, 1.19528403, 1.211289746, 1.226009289, 1.247731333, 1.262165059, 1.276741693, 1.295605573, 1.309181851, 1.323329761, 1.341050375, 1.362915327]
    
    return np.interp(c, C, eta_c)

def C_x_v(m, l_k, eta_k, tg_chi, c, m_kr):
    
    """
    Функция возвращает волновое сопротивление крыла с ромбовидным профилем (график на стр. 234 в ДПБЛА),
    используемое для расчета волнового сопротивления любого профиля (формула 4.51 стр. 239 ДПБЛА).
    В качестве аргументов требует:
        1) число Маха.\n
        2) удлинение консолей крыла (двух).\n
        3) сужение консолей крыла (передайте число, либо, если концевая хорда равна нулю и сужение равно бесконечности, строку "inf").\n
        4) тангенс угла стреловидности (угол должен быть определен по линии максимальных толщин вашего профиля (не ромба)).\n
        5) относительную толщину профиля крыла.\n
        6) критическое число Маха, которое можно определить по учбенику ДПБЛА, либо воспользовавшись формулой через подъемную силу.\n

    Волнового сопротивления нет, если нет скачка уплотнения. Поэтому, если
    число Маха, передаваемое в функцию, меньше критического числа Маха, функция вернет ноль.
    """

    if m < m_kr:

        return 0

    if type(eta_k) != str and eta_k < 2.5:

        if tg_chi*l_k == 0:

            if l_k*(c)**(1/3) < 0.75:

                X = [0, 0.041055718, 0.082111437, 0.123167155, 0.167381006, 0.20212046, 0.221069253, 0.23054365, 0.241597113, 0.255808707, 0.265283104, 0.279494699, 0.293706294, 0.312655087, 0.333182946, 0.363185202, 0.390029326, 0.421610647, 0.472140762, 0.514775547, 0.571621926, 0.644258967, 0.716896007, 0.775321453, 0.866907286, 0.944281525, 1.010602301, 1.08797654, 1.187457704, 1.264831942, 1.332731784, 1.406947891, 1.478005865, 1.579066095, 1.729077374, 1.89645838, 2.052785924, 2.213850665, 2.376494473, 2.543875479, 2.727047146, 2.881795624, 3.025490638, 3.184976314, 3.355515452, 3.526054591, 3.74870291, 3.977667494, 4.165576359, 4.34716896, 4.587187007, 4.888788631, 5.008797654, 5.233025039, 5.351454997, 5.667268216, 5.938867584, 6.174148432, 6.40942928, 6.654184525, 6.846830589, 7]
                C_xv = [2.822082019, 2.87444795, 2.929337539, 2.995583596, 3.067507886, 3.129337539, 3.171608833, 3.186119874, 3.196845426, 3.205047319, 3.208832808, 3.213249211, 3.215141956, 3.215772871, 3.215141956, 3.210094637, 3.20126183, 3.186750789, 3.152050473, 3.109148265, 3.046687697, 2.966561514, 2.878233438, 2.809463722, 2.688958991, 2.581072555, 2.492744479, 2.408201893, 2.304100946, 2.202523659, 2.092113565, 1.994321767, 1.911041009, 1.838485804, 1.738170347, 1.63659306, 1.548895899, 1.464984227, 1.388643533, 1.311671924, 1.234700315, 1.174763407, 1.117350158, 1.059936909, 1.004416404, 0.948895899, 0.884542587, 0.824605678, 0.789905363, 0.757728707, 0.717350158, 0.677602524, 0.661198738, 0.635962145, 0.622712934, 0.595583596, 0.579179811, 0.56340694, 0.550157729, 0.536277603, 0.527444795, 0.523659306]

            if l_k*(c)**(1/3) >= 0.75 and l_k*(c)**(1/3) < 1.25:

                X = [0, 0.082111437, 0.186329799, 0.301601624, 0.408978119, 0.522670878, 0.647417099, 0.773742387, 0.909542071, 1.012181367, 1.117978795, 1.206406497, 1.290097, 1.392736296, 1.509587187, 1.628017144, 1.768554027, 1.926460636, 2.087525378, 2.231220393, 2.363861945, 2.578614933, 2.777577261, 3.008120911, 3.227611099, 3.563952177, 3.837130611, 3.980825626, 4.216106474, 4.462440785, 4.800360929, 5.007218588, 5.281976088, 5.626212497, 6.024137153, 6.388901421, 6.74103316, 7]
                C_xv = [2.741324921, 2.739432177, 2.730599369, 2.713564669, 2.688958991, 2.651104101, 2.60126183, 2.527444795, 2.43785489, 2.353943218, 2.257413249, 2.173501577, 2.087697161, 1.981072555, 1.89148265, 1.807570978, 1.714826498, 1.61829653, 1.529337539, 1.451735016, 1.391167192, 1.297160883, 1.212618297, 1.124921136, 1.044164038, 0.938170347, 0.862460568, 0.822712934, 0.7829653, 0.737539432, 0.688328076, 0.659936909, 0.630283912, 0.599369085, 0.574132492, 0.551419558, 0.533753943, 0.523659306]

            if l_k*(c)**(1/3) > 1.25:

                X = [0, 0.120009023, 0.270020302, 0.443717573, 0.628468306, 0.806902775, 0.99481164, 1.176404241, 1.440108279, 1.643807805, 1.83171667, 2.057523122, 2.337017821, 2.537559215, 2.704940221, 2.878637492, 3.04917663, 3.244980826, 3.437626889, 3.65553801, 3.88608166, 4.002932551, 4.21768554, 4.430859463, 4.854049177, 5.255131965, 5.373561922, 5.692533273, 6.000451162, 6.30047372, 6.497856982, 6.807353936, 7]
                C_xv = [2.097791798, 2.099053628, 2.094006309, 2.078233438, 2.047318612, 2.010725552, 1.957728707, 1.893375394, 1.788643533, 1.696529968, 1.616403785, 1.521766562, 1.394321767, 1.314195584, 1.244794953, 1.176025237, 1.109148265, 1.039747634, 0.98044164, 0.911671924, 0.850473186, 0.81829653, 0.78044164, 0.741324921, 0.682018927, 0.632807571, 0.620820189, 0.595583596, 0.573501577, 0.557097792, 0.544479495, 0.529968454, 0.523028391]

            return (np.interp((l_k*(m**2 - 1)**(1/2)), X, C_xv))*(l_k*c**2)
        
        if tg_chi*l_k > 0 and tg_chi*l_k < 1.5:

            X = [0, 0.06474171, 0.167381006, 0.260545906, 0.364764268, 0.454771035, 0.536882472, 0.631626438, 0.732686668, 0.851116625, 0.934807128, 0.999548838, 1.076923077, 1.22535529, 1.324836454, 1.449582675, 1.545905707, 1.656440334, 1.768554027, 1.891721182, 2.071734717, 2.245431987, 2.41439206, 2.581773066, 2.750733138, 2.894428152, 3.098127679, 3.267087751, 3.448680352, 3.593954433, 3.74870291, 3.949244304, 4.11662531, 4.351906158, 4.54928942, 4.768779607, 4.947214076, 5.173020528, 5.473043086, 5.768328446, 6.079404467, 6.388901421, 6.695240244, 7]
            C_xv = [1.50851735, 1.54384858, 1.607570978, 1.675078864, 1.757097792, 1.83533123, 1.90977918, 1.979179811, 2.021451104, 2.052996845, 2.066876972, 2.075709779, 2.075709779, 2.066876972, 2.048580442, 2.021451104, 1.984858044, 1.923659306, 1.851735016, 1.771608833, 1.660567823, 1.56466877, 1.476340694, 1.397476341, 1.323028391, 1.261829653, 1.185488959, 1.124290221, 1.066246057, 1.022082019, 0.979179811, 0.922397476, 0.883911672, 0.837223975, 0.8, 0.770347003, 0.744479495, 0.715457413, 0.682018927, 0.65488959, 0.630914826, 0.608832808, 0.585488959, 0.56340694]

            return (np.interp((l_k*(m**2 - 1)**(1/2)), X, C_xv))*(l_k*c**2)

        if tg_chi*l_k >= 1.5 and tg_chi*l_k < 2.5:

            X = [0, 0.120009023, 0.288969095, 0.426347846, 0.574780059, 0.721633206, 0.925332732, 1.127453192, 1.331152718, 1.552221972, 1.59327769, 1.645386871, 1.697496052, 1.778028423, 1.886983984, 1.967516355, 2.030678998, 2.125422964, 2.231220393, 2.330701557, 2.464922175, 2.58808933, 2.698623957, 2.851793368, 2.979697722, 3.12181367, 3.278141214, 3.41709903, 3.614482292, 3.829235281, 3.999774419, 4.236634333, 4.460861719, 4.658244981, 4.857207309, 4.985111663, 5.190390255, 5.455673359, 5.747800587, 6.003609294, 6.281524927, 6.548387097, 6.856304985, 7]
            C_xv = [0.862460568, 0.886435331, 0.922397476, 0.956466877, 0.994952681, 1.049211356, 1.115457413, 1.202523659, 1.288958991, 1.399369085, 1.418927445, 1.43659306, 1.449211356, 1.468769716, 1.490851735, 1.501577287, 1.505362776, 1.511671924, 1.511671924, 1.50851735, 1.498422713, 1.483280757, 1.462460568, 1.427129338, 1.386750789, 1.321135647, 1.252996845, 1.196845426, 1.131230284, 1.062460568, 1.010725552, 0.953312303, 0.901577287, 0.862460568, 0.823343849, 0.8, 0.765299685, 0.721766562, 0.683280757, 0.652365931, 0.621451104, 0.596214511, 0.572239748, 0.562776025]

            return (np.interp((l_k*(m**2 - 1)**(1/2)), X, C_xv))*(l_k*c**2)

        if tg_chi*l_k >= 2.5 and tg_chi*l_k < 3.5:

            X = [0, 0.140536882, 0.408978119, 0.609519513, 0.830588766, 1.135348522, 1.504849989, 1.841191067, 2.169636815, 2.351229416, 2.564403339, 2.75389127, 2.884953756, 3.003383713, 3.151815926, 3.342882924, 3.522896458, 3.731333183, 3.95082337, 4.216106474, 4.426122265, 4.655086849, 4.786149335, 4.98195353, 5.324610873, 5.613579968, 5.962553575, 6.298894654, 6.497856982, 6.76945635, 7]
            C_xv = [0.451104101, 0.463722397, 0.497160883, 0.529968454, 0.571608833, 0.635962145, 0.727444795, 0.823343849, 0.923659306, 0.982334385, 1.060567823, 1.124921136, 1.16214511, 1.18044164, 1.188643533, 1.190536278, 1.186750789, 1.171608833, 1.141324921, 1.077602524, 1.011356467, 0.948895899, 0.917981073, 0.875078864, 0.806309148, 0.755205047, 0.705362776, 0.660567823, 0.630914826, 0.602523659, 0.585488959]

            return (np.interp((l_k*(m**2 - 1)**(1/2)), X, C_xv))*(l_k*c**2)

        if tg_chi*l_k >= 3.5:

            X = [0, 0.12948342, 0.348973607, 0.601624182, 0.844800361, 1.083239341, 1.291676066, 1.609068351, 1.92488157, 2.188585608, 2.363861945, 2.599142793, 2.888111888, 3.17866005, 3.428152493, 3.693435597, 4.064516129, 4.257162193, 4.388224679, 4.57771261, 4.819309723, 5.056169637, 5.283555155, 5.488833747, 5.739905256, 5.979923303, 6.246785473, 6.493119783, 6.736295962, 7]
            C_xv = [0.223974763, 0.231545741, 0.249842271, 0.269400631, 0.294006309, 0.322397476, 0.350788644, 0.39873817, 0.449211356, 0.499053628, 0.538170347, 0.592429022, 0.673817035, 0.749526814, 0.811987382, 0.87318612, 0.941324921, 0.967823344, 0.979810726, 0.985488959, 0.974763407, 0.952050473, 0.918611987, 0.875078864, 0.822082019, 0.774763407, 0.733753943, 0.697160883, 0.663091483, 0.626498423]

            return (np.interp((l_k*(m**2 - 1)**(1/2)), X, C_xv))*(l_k*c**2)

    if type(eta_k) != str and eta_k >= 2.5:
        
        if tg_chi*l_k == 0:

            if l_k*(c)**(1/3) < 0.75:

                X = [0, 0.055875831, 0.111751663, 0.127272727, 0.15210643, 0.175388027, 0.190909091, 0.211086475, 0.231263858, 0.246784922, 0.259201774, 0.271618625, 0.280931264, 0.291796009, 0.305764967, 0.321286031, 0.335254989, 0.350776053, 0.364745011, 0.375609756, 0.386474501, 0.408203991, 0.45631929, 0.498226164, 0.558758315, 0.609977827, 0.665853659, 0.748115299, 0.827272727, 0.881596452, 0.951441242, 1.029046563, 1.083370288, 1.179600887, 1.282039911, 1.379822616, 1.511751663, 1.628159645, 1.76940133, 1.92616408, 2.061197339, 2.266075388, 2.467849224, 2.768957871, 3.079379157, 3.392904656, 3.779379157, 4.075831486, 4.338137472, 4.741685144, 5.072283814, 5.460310421, 5.780044346, 6.237915743, 6.576274945, 7]
                C_xv = [2.841230769, 2.913846154, 2.993846154, 3.017230769, 3.043076923, 3.067076923, 3.081846154, 3.097846154, 3.112615385, 3.12, 3.123692308, 3.126153846, 3.126769231, 3.126769231, 3.125538462, 3.121846154, 3.117538462, 3.112615385, 3.105846154, 3.097846154, 3.087384615, 3.067076923, 3.001846154, 2.944615385, 2.869538462, 2.805538462, 2.736615385, 2.634461538, 2.542153846, 2.480615385, 2.403076923, 2.308923077, 2.225846154, 2.131076923, 2.044923077, 1.964307692, 1.869538462, 1.789538462, 1.710153846, 1.621538462, 1.534769231, 1.429538462, 1.342153846, 1.227692308, 1.120615385, 1.026461538, 0.923076923, 0.849230769, 0.796923077, 0.729230769, 0.678769231, 0.635076923, 0.598153846, 0.558153846, 0.531692308, 0.499692308]

            if l_k*(c)**(1/3) >= 0.75 and l_k*(c)**(1/3) < 1.25:

                X = [0, 0.066740576, 0.138137472, 0.26075388, 0.419068736, 0.502882483, 0.603769401, 0.727937916, 0.849002217, 0.985587583, 1.077161863, 1.205986696, 1.373614191, 1.514855876, 1.64368071, 1.806651885, 2.016186253, 2.253658537, 2.486474501, 2.708425721, 2.919512195, 3.146119734, 3.417738359, 3.793348115, 4.061862528, 4.335033259, 4.917073171, 5.22594235, 5.384257206, 5.691574279, 5.898004435, 6.25654102, 6.596452328, 6.866518847, 7]
                C_xv = [2.670769231, 2.667076923, 2.654769231, 2.629538462, 2.587076923, 2.561230769, 2.512615385, 2.443692308, 2.356923077, 2.254153846, 2.178461538, 2.083692308, 1.971076923, 1.867076923, 1.788923077, 1.690461538, 1.56, 1.439384615, 1.334769231, 1.250461538, 1.178461538, 1.099692308, 1.019076923, 0.918769231, 0.853538462, 0.798769231, 0.700307692, 0.662769231, 0.645538462, 0.607384615, 0.587076923, 0.556307692, 0.531076923, 0.509538462, 0.499692308]

            if l_k*(c)**(1/3) > 1.25:

                X = [0, 0.218847007, 0.523059867, 0.811751663, 1.06940133, 1.308425721, 1.503991131, 1.777161863, 2.073614191, 2.374722838, 2.866740576, 3.201995565, 3.461197339, 3.78713969, 4.089800443, 4.452993348, 4.743237251, 5.000886918, 5.376496674, 5.691574279, 6.006651885, 6.414855876, 6.719068736, 7]
                C_xv = [2.109538462, 2.090461538, 2.046153846, 1.988923077, 1.910769231, 1.830153846, 1.747692308, 1.616, 1.48, 1.355076923, 1.196307692, 1.083076923, 1.002461538, 0.922461538, 0.845538462, 0.780307692, 0.730461538, 0.688, 0.641230769, 0.606153846, 0.578461538, 0.544, 0.516923077, 0.494769231]

            return (np.interp((l_k*(m**2 - 1)**(1/2)), X, C_xv))*(l_k*c**2)
        
        if tg_chi*l_k > 0 and tg_chi*l_k < 1.5:

            X = [0, 0.17383592, 0.386474501, 0.521507761, 0.608425721, 0.734146341, 0.864523282, 0.990243902, 1.165631929, 1.31308204, 1.452771619, 1.631263858, 1.760088692, 1.885809313, 2.073614191, 2.276940133, 2.455432373, 2.716186253, 2.922616408, 3.13059867, 3.366518847, 3.580709534, 3.95631929, 4.378492239, 4.913968958, 5.36097561, 5.86075388, 6.461419069, 7]
            C_xv = [1.823384615, 1.901538462, 1.963076923, 1.985846154, 1.995692308, 1.998153846, 1.995076923, 1.982153846, 1.947692308, 1.908923077, 1.863384615, 1.797538462, 1.724307692, 1.656, 1.563076923, 1.474461538, 1.396923077, 1.300923077, 1.227692308, 1.16, 1.091692308, 1.032615385, 0.934769231, 0.836923077, 0.745230769, 0.68, 0.625846154, 0.571076923, 0.524923077]

            return (np.interp((l_k*(m**2 - 1)**(1/2)), X, C_xv))*(l_k*c**2)

        if tg_chi*l_k >= 1.5 and tg_chi*l_k < 2.5:

            X = [0, 0.150554324, 0.403547672, 0.658093126, 0.904878049, 1.120620843, 1.424833703, 1.587804878, 1.826829268, 2.030155211, 2.289356984, 2.554767184, 2.88691796, 3.164745011, 3.534146341, 3.82594235, 4.099113082, 4.372283814, 4.588026608, 4.889135255, 5.261640798, 5.533259424, 5.997339246, 6.403991131, 6.767184035, 7]
            C_xv = [1.058461538, 1.110153846, 1.190769231, 1.268923077, 1.340307692, 1.389538462, 1.441846154, 1.459076923, 1.459076923, 1.448, 1.416, 1.371076923, 1.297846154, 1.229538462, 1.136615385, 1.058461538, 0.991384615, 0.926153846, 0.877538462, 0.820307692, 0.758153846, 0.712, 0.651076923, 0.600615385, 0.561846154, 0.540307692]

            return (np.interp((l_k*(m**2 - 1)**(1/2)), X, C_xv))*(l_k*c**2)

        if tg_chi*l_k >= 2.5 and tg_chi*l_k < 3.5:

            X = [0, 0.225055432, 0.630155211, 1.066297118, 1.479157428, 1.81286031, 2.023946785, 2.249002217, 2.503547672, 2.748780488, 3.004878049, 3.305986696, 3.461197339, 3.766962306, 4.127050998, 4.387804878, 4.724611973, 5.159201774, 5.593791574, 5.997339246, 6.500221729, 7]
            C_xv = [0.594461538, 0.633846154, 0.707076923, 0.790769231, 0.876307692, 0.947076923, 0.996307692, 1.030153846, 1.060307692, 1.077538462, 1.087384615, 1.087384615, 1.08, 1.062769231, 1.019076923, 0.977846154, 0.920615385, 0.849230769, 0.768, 0.703384615, 0.636923077, 0.587076923]

            return (np.interp((l_k*(m**2 - 1)**(1/2)), X, C_xv))*(l_k*c**2)

        if tg_chi*l_k >= 3.5:

            X = [0, 0.225055432, 0.630155211, 1.066297118, 1.479157428, 1.81286031, 2.023946785, 2.249002217, 2.503547672, 2.748780488, 3.004878049, 3.305986696, 3.461197339, 3.766962306, 4.127050998, 4.387804878, 4.724611973, 5.159201774, 5.593791574, 5.997339246, 6.500221729, 7]
            C_xv = [0.594461538, 0.633846154, 0.707076923, 0.790769231, 0.876307692, 0.947076923, 0.996307692, 1.030153846, 1.060307692, 1.077538462, 1.087384615, 1.087384615, 1.08, 1.062769231, 1.019076923, 0.977846154, 0.920615385, 0.849230769, 0.768, 0.703384615, 0.636923077, 0.587076923]

            return (np.interp((l_k*(m**2 - 1)**(1/2)), X, C_xv))*(l_k*c**2)

    if eta_k == "inf":
        
        if tg_chi*l_k == 0:

            if l_k*(c)**(1/3) < 0.75:

                X = [0, 0.029277567, 0.045247148, 0.054562738, 0.063878327, 0.075855513, 0.0878327, 0.097148289, 0.097148289, 0.098479087, 0.102471483, 0.107794677, 0.114448669, 0.123764259, 0.133079848, 0.142395437, 0.150380228, 0.157034221, 0.165019011, 0.175665399, 0.187642586, 0.20095057, 0.214258555, 0.234220532, 0.282129278, 0.322053232, 0.372623574, 0.461787072, 0.546958175, 0.626806084, 0.72661597, 0.790494297, 0.853041825, 0.936882129, 1.053992395, 1.229657795, 1.423954373, 1.643536122, 2.118631179, 2.57243346, 2.934410646, 3.095437262, 3.445437262, 3.698288973, 3.933840304, 4.2878327, 4.538022814, 4.860076046, 5.135551331, 5.474904943, 5.887452471, 6.278707224, 6.681939163, 7]
                C_xv = [2.838952317, 2.84593687, 2.85560779, 2.866890531, 2.880859637, 2.903425118, 2.925990598, 2.956615178, 2.982404298, 2.999597045, 3.008193418, 3.016789792, 3.023237072, 3.029147079, 3.032907992, 3.034519812, 3.036131632, 3.037206179, 3.038280725, 3.038817999, 3.037743452, 3.035594359, 3.031833445, 3.022699799, 2.992075218, 2.957689725, 2.913096038, 2.819073203, 2.719140363, 2.622431162, 2.513364674, 2.442981867, 2.389254533, 2.315110813, 2.215177972, 2.062592344, 1.906783076, 1.774613835, 1.534989926, 1.360376091, 1.217461383, 1.15889859, 1.055742109, 0.978912021, 0.925721961, 0.847817327, 0.797313633, 0.751108126, 0.711887173, 0.667293486, 0.620550705, 0.578643385, 0.538885158, 0.515245131]

            if l_k*(c)**(1/3) >= 0.75 and l_k*(c)**(1/3) < 1.25:

                X = [0, 0.066539924, 0.146387833, 0.242205323, 0.346007605, 0.485741445, 0.616159696, 0.767870722, 0.939543726, 1.096577947, 1.246958175, 1.429277567, 1.615589354, 1.813878327, 2.002851711, 2.218441065, 2.473954373, 2.670912548, 2.959695817, 3.153992395, 3.328326996, 3.5, 3.645057034, 3.835361217, 4.160076046, 4.434220532, 4.528707224, 4.809505703, 5.158174905, 5.508174905, 5.802281369, 6.140304183, 6.426425856, 6.78973384, 7]
                C_xv = [2.593418402, 2.589657488, 2.574613835, 2.552585628, 2.517662861, 2.462323707, 2.389791807, 2.286635326, 2.187777032, 2.089993284, 1.99435863, 1.893888516, 1.790732035, 1.689187374, 1.595701813, 1.497380792, 1.397985225, 1.324916051, 1.211014103, 1.143317663, 1.090127602, 1.037474815, 0.993955675, 0.948824715, 0.876292814, 0.820416387, 0.798925453, 0.759167226, 0.711349899, 0.665144392, 0.632907992, 0.595836132, 0.563599731, 0.530826058, 0.515245131]

            if l_k*(c)**(1/3) > 1.25:

                X = [0, 0.107794677, 0.310076046, 0.592205323, 0.834410646, 1.018060837, 1.27756654, 1.53973384, 1.796577947, 2.002851711, 2.280988593, 2.581749049, 2.923764259, 3.155323194, 3.440114068, 3.708935361, 3.923193916, 4.375665399, 4.552661597, 4.87338403, 5.300570342, 5.625285171, 5.960646388, 6.331939163, 6.639353612, 6.92148289, 7]
                C_xv = [2.094291471, 2.079785091, 2.04432505, 1.98307589, 1.914842176, 1.853055742, 1.771390195, 1.681665547, 1.5919409, 1.513498993, 1.420550705, 1.319006044, 1.20725319, 1.14116857, 1.056816655, 0.976762928, 0.926796508, 0.83062458, 0.797313633, 0.752719946, 0.692545332, 0.651175285, 0.613028878, 0.573270651, 0.544795165, 0.519006044, 0.513096038]

            return (np.interp((l_k*(m**2 - 1)**(1/2)), X, C_xv))*(l_k*c**2)
        
        if tg_chi*l_k > 0 and tg_chi*l_k < 1.5:

            X = [0, 0.115779468, 0.294106464, 0.477756654, 0.680038023, 0.896958175, 1.091254753, 1.374714829, 1.648859316, 1.954942966, 2.199809886, 2.501901141, 2.8, 3.219201521, 3.507984791, 3.963117871, 4.309125475, 4.80418251, 5.333840304, 5.860836502, 6.438403042, 7]
            C_xv = [1.934184016, 1.931497649, 1.928811283, 1.919140363, 1.900335796, 1.872397582, 1.837474815, 1.774613835, 1.693485561, 1.593015447, 1.505439893, 1.387777032, 1.282471457, 1.163196776, 1.085829416, 0.973002015, 0.900470114, 0.80967092, 0.725856279, 0.651175285, 0.584553392, 0.537810611]

            return (np.interp((l_k*(m**2 - 1)**(1/2)), X, C_xv))*(l_k*c**2)

        if tg_chi*l_k >= 1.5 and tg_chi*l_k < 2.5:

            X = [0, 0.150380228, 0.340684411, 0.545627376, 0.751901141, 0.986121673, 1.296197719, 1.594296578, 1.966920152, 2.342205323, 2.656273764, 3.095437262, 3.336311787, 3.653041825, 3.997718631, 4.319771863, 4.603231939, 4.877376426, 5.158174905, 5.474904943, 5.879467681, 6.347908745, 6.628707224, 6.823003802, 7]
            C_xv = [1.300201478, 1.323841504, 1.348556078, 1.368435191, 1.384016118, 1.392612492, 1.387777032, 1.365211551, 1.329214238, 1.284083277, 1.238415044, 1.164808596, 1.123975823, 1.060577569, 0.996104768, 0.927333781, 0.873069174, 0.825251847, 0.775285426, 0.725856279, 0.667293486, 0.611954332, 0.584553392, 0.568435191, 0.560913365]

            return (np.interp((l_k*(m**2 - 1)**(1/2)), X, C_xv))*(l_k*c**2)

        if tg_chi*l_k >= 2.5 and tg_chi*l_k < 3.5:

            X = [0, 0.282129278, 0.677376426, 1.003422053, 1.50513308, 1.85513308, 2.280988593, 2.617680608, 2.918441065, 3.269771863, 3.591825095, 3.917870722, 4.201330798, 4.531368821, 4.836121673, 5.182129278, 5.45095057, 5.761026616, 6.068441065, 6.431749049, 7]
            C_xv = [0.787642713, 0.82095366, 0.85963734, 0.887575554, 0.926259234, 0.954197448, 0.977837475, 0.992343855, 0.996104768, 0.992881128, 0.972464741, 0.948824715, 0.924647414, 0.891873741, 0.852652787, 0.815580927, 0.778509066, 0.738213566, 0.692545332, 0.647414372, 0.596910678]

            return (np.interp((l_k*(m**2 - 1)**(1/2)), X, C_xv))*(l_k*c**2)

        if tg_chi*l_k >= 3.5:

            X = [0, 0.31539924, 0.637452471, 1.105893536, 1.542395437, 2.085361217, 2.434030418, 2.811977186, 3.515969582, 4.017680608, 4.370342205, 4.756273764, 5.140874525, 5.509505703, 5.875475285, 6.329277567, 6.480988593, 7]
            C_xv = [0.44593687, 0.463666891, 0.479247817, 0.503962391, 0.529751511, 0.567360645, 0.595836132, 0.630758899, 0.687709872, 0.725856279, 0.742511753, 0.759167226, 0.764002686, 0.759167226, 0.743049026, 0.715648086, 0.702216253, 0.630221625]

            return (np.interp((l_k*(m**2 - 1)**(1/2)), X, C_xv))*(l_k*c**2)

def Phi(m, tg_chi):

    """
    Функция возвращает коэффициент phi, определяемый по графику 4.32 на стр. 240 в ДПБЛА,
    необходимый для расчета волнового сопротивления.
    В качестве аргуметов в функцию передаются число Маха и тангенс угла стеловидности крыла.
    Если тангенс угла стреловидности равен бесконечночти, передайте в функцию значение "99"
    """

    X = [0, 0.085447683, 0.133675823, 0.184525058, 0.234850073, 0.262633676, 0.320297756, 0.377437618, 0.450828266, 0.509540784, 0.56458377, 0.615433005, 0.676242399, 0.744390858, 0.821975257, 0.8785909, 0.933633886, 0.991297966, 1.046340952, 1.111868316, 1.176347243, 1.235059761, 1.287481652, 1.347766827, 1.394422311, 1.439505137, 1.468337178, 1.505032502, 1.544873139, 1.610924722, 1.676452086, 1.741979451, 1.809079472, 1.882994338, 1.947997484, 2.004088908, 2.047074858, 2.100545188, 2.15716083, 2.217446005, 2.284021808, 2.336443699, 2.402495282, 2.463304676, 2.5]
    phi = [0, 0.016450751, 0.026321201, 0.039276167, 0.054287477, 0.065186099, 0.088422784, 0.115772157, 0.160600452, 0.199465351, 0.236685174, 0.275138803, 0.319967098, 0.370347522, 0.424840633, 0.462882994, 0.497635205, 0.532798684, 0.564672013, 0.599218589, 0.631091919, 0.657618754, 0.682089245, 0.708821715, 0.727123175, 0.744396463, 0.755706354, 0.770100761, 0.783055727, 0.8038248, 0.826444582, 0.844746042, 0.864075673, 0.882171499, 0.897388443, 0.908903969, 0.91836315, 0.929261773, 0.939132223, 0.946946329, 0.956199877, 0.962368908, 0.968126671, 0.969771746, 0.969771746]

    if tg_chi == 99:

        return 1

    if m >= 1:

        return np.interp(((m**2 - 1)**(1/2)) - tg_chi, X, phi)
    
    if m < 1:

        return 0

    # индуктивное сопротивление начало

def Dzeta(m, l_n, form):

    """
    Функция вощвращает коэффициент дзета, зависимость которого от Маха и удлинения носовой части корпуса показана
    на графике 4.40 на стр. 245 в учебнике ДПБЛА.
    В качестве аргументов функция требует:
        1) Число Маха\n
        2) Удлинение носовой части корпуса НЕ РАВНОЕ НУЛЮ\n
        3) Коническая головная часть? Передать строку "Да", если коническая или "Нет", если какая-либо другая, кроме плоской

    Для плоских носовых частей функция не применима, так как ее удлинение равно нулю. Внутри функции произойдет деление на ноль.
    """

    if form == "Да":

        M = [-0.796733668, -0.492462312, -0.23919598, 0.007474874, 0.260741206, 0.553140704, 0.890829146, 1.193781407, 1.480025126, 1.8375, 2.132977387, 2.433291457, 2.667650754, 2.8]
        dz = [-0.202164502, -0.199350649, -0.176839827, -0.148917749, -0.110606061, -0.05021645, 0.029004329, 0.10995671, 0.182900433, 0.262987013, 0.319047619, 0.366883117, 0.392207792, 0.4004329]

        if m >= 1:
            
            return np.interp(((np.sqrt(m**2 - 1))/(l_n)), M, dz)

        if m < 1:

            return np.interp(-((np.sqrt(1 - m**2))/(l_n)), M, dz)

    if m >= 1:
            
        return (np.sqrt(m**2 - 1))/(l_n)

    if m < 1:

        return (-((np.sqrt(1 - m**2))/(l_n)))

def C_F(m, l_k, tg_chi):

    """
    Функция возвращает значение коэффициента подсасывающей силы на несущей поверхности. График на рис. 4.42 в ДПБЛА на стр. 246.
    В качестве аргументов функция требует:
        1) Число маха\n
        2) Удлинение консоли несущей поверхности\n
        3) Тангенс угла стреловидности по передней кромке\n
    """

    if tg_chi*l_k < 0.5:

        X = [-3.491243433, -3.267950963, -2.965849387, -2.742556918, -2.425569177, -2.090192644, -1.752189142, -1.396672504, -1.056917688, -0.633099825, -0.372154116, -0.218038529, -0.090192644, 0, 6.5]
        Y = [0.659703039, 0.628107735, 0.58390884, 0.550414365, 0.502244475, 0.447513812, 0.391401934, 0.330283149, 0.265883978, 0.174551105, 0.108598066, 0.064571823, 0.024516575, 0, 0]

    if tg_chi*l_k >= 0.5 and tg_chi*l_k < 1.5:

        X = [-3.491243433, -3.214535902, -2.781085814, -2.26619965, -1.633975482, -1.164623468, -0.6558669, -0.375656743, -0.059544658, 0, 0.211908932, 0.42206655, 0.633975482, 0.786339755, 0.883537653, 0.998248687, 6.5]
        Y = [0.671270718, 0.63035221, 0.567334254, 0.492575967, 0.398135359, 0.326139503, 0.245165746, 0.19820442, 0.144854972, 0.135186464, 0.130179558, 0.117403315, 0.093059392, 0.071132597, 0.048515193, 0, 0]

    if tg_chi*l_k >= 1.5 and tg_chi*l_k < 2.5:

        X = [-3.491243433, -2.968476357, -2.345884413, -1.781961471, -1.1558669, -0.609457093, -0.169877408, 0, 0.286339755, 0.659369527, 0.871278459, 1.061295972, 1.265323993, 1.458844133, 1.614711033, 1.760945709, 1.876532399, 1.961471103, 1.985989492, 6.5]
        Y = [0.694578729, 0.619475138, 0.526070442, 0.444406077, 0.353418508, 0.275725138, 0.215296961, 0.192161602, 0.185600829, 0.17144337, 0.160566298, 0.146754144, 0.129834254, 0.109461326, 0.087879834, 0.063017956, 0.035393646, 0.008632597, 0, 0]

    if tg_chi*l_k >= 2.5 and tg_chi*l_k < 3.5:

        X = [-3.491243433, -3.044658494, -2.603327496, -2.177758319, -1.686514886, -0.609457093, 0, 0.507880911, 1.00262697, 1.508756567, 1.816987741, 2.220665499, 2.430823117, 2.553415061, 2.690017513, 2.810858144, 2.894921191, 2.951838879, 6.5]
        Y = [0.72945442, 0.66695442, 0.604972376, 0.543508287, 0.472720994, 0.327348066, 0.244129834, 0.235497238, 0.219095304, 0.193370166, 0.174033149, 0.137085635, 0.114122928, 0.098066298, 0.073377072, 0.047997238, 0.023653315, 0, 0]
    
    if tg_chi*l_k >= 3.5 and tg_chi*l_k < 4.5:

        X = [-3.491243433, -2.973730298, -2.5, -1.979859895, -1.474605954, -0.567425569, 0, 0.500875657, 1.00262697, 1.38704028, 1.830998249, 2.254816112, 2.61295972, 2.96234676, 3.283712785, 3.57793345, 3.797723292, 3.934325744, 3.966725044, 6.5]
        Y = [0.800759669, 0.727555249, 0.66160221, 0.591332873, 0.522790055, 0.400207182, 0.328211326, 0.321305249, 0.311809392, 0.301277624, 0.281595304, 0.258977901, 0.232907459, 0.199585635, 0.155904696, 0.10531768, 0.053694751, 0.015711326, 0, 0]

    if tg_chi*l_k >= 4.5 and tg_chi*l_k < 5.5:

        X = [-3.491243433, -0.998248687, 0, 0.673380035, 1.169877408, 1.578809107, 2.047285464, 2.527145359, 2.961471103, 3.382661996, 3.718038529, 4.014010508, 4.3441331, 4.53765324, 4.723292469, 4.852889667, 4.951838879, 4.992994746, 6.5]
        Y = [0.880870166, 0.55714779, 0.439399171, 0.429212707, 0.417127072, 0.40538674, 0.387948895, 0.364640884, 0.337189227, 0.301968232, 0.268473757, 0.231698895, 0.178349448, 0.139675414, 0.09823895, 0.059219613, 0.020200276, 0, 0]

    if tg_chi*l_k >= 5.5:

        X = [-3.491243433, -1.556042032, -0.490367776, 0, 0.500875657, 1.007880911, 1.514010508, 2.009632224, 2.557793345, 3.074430823, 3.410683012, 3.757443082, 4.047285464, 4.308231173, 4.61558669, 4.807355517, 5.054290718, 5.287215412, 5.495621716, 5.656742557, 5.767075306, 5.891418564, 5.952714536, 5.981611208, 6.5]
        Y = [0.955283149, 0.731353591, 0.615849448, 0.564399171, 0.55714779, 0.548342541, 0.535911602, 0.520372928, 0.498964088, 0.470131215, 0.446823204, 0.420234807, 0.393819061, 0.366712707, 0.330801105, 0.305766575, 0.270718232, 0.229281768, 0.183183702, 0.139848066, 0.104972376, 0.055075967, 0.022099448, 0, 0]

    if m >= 1:
            
        return (np.interp(((np.sqrt(m**2 - 1))*(l_k)), X, Y))/l_k

    if m < 1:

        return (np.interp(-((np.sqrt(1 - m**2))*(l_k)), X, Y))/l_k


def ksi(m, tg_chi, a):
    
    """
    Функция возвращает значение поправочного коэффициента кси в уравнении 4.59 на стр.246 в ДПБЛА для
    выражения коэффициента подсасывающей силы изолированного крыла. График 4.43 на стр. 246

    В качестве аргументов требует:
        1) Число Маха
        2) Тангес угла стреловидности по передней кромке
        3) Угол атаки В ГРАДУСАХ
    """

    if a < 3:

        X = [-0.593890194, -0.400128178, -0.223456526, 0, 0.118778039, 0.214697714, 0.299081393, 0.405255287, 0.479171117, 0.564622944, 0.662038026, 0.715018159, 0.761803034, 0.811792352, 0.85729545, 0.885067293, 0.917966247, 0.939756462, 0.962187567, 1]
        Y = [0.908336878, 0.908336878, 0.911314334, 0.911314334, 0.90684815, 0.901105912, 0.891322841, 0.874308805, 0.857294768, 0.829221608, 0.789451297, 0.759676733, 0.73032752, 0.69055721, 0.645470013, 0.612930668, 0.561675883, 0.516801361, 0.467886006, 0.358570821]

    if a >= 3 and a < 5:

        X = [-0.59602649, -0.424268319, -0.2760094, -0.122196112, 0, 0.207434309, 0.314676351, 0.399273659, 0.528519547, 0.628284555, 0.71437727, 0.787011322, 0.846400342, 0.892544328, 0.944883572, 1]
        Y = [0.859634198, 0.847299022, 0.828796257, 0.803700553, 0.773500638, 0.705869843, 0.662484049, 0.623351765, 0.55572097, 0.489578903, 0.420672054, 0.350701829, 0.284559762, 0.225223309, 0.133560187, 0.013185878]

    if a >= 5 and a < 7:

        X = [-0.592822047, -0.460371715, -0.355479598, -0.238624226, -0.116214484, 0.032898953, 0.130954924, 0.305917539, 0.440076907, 0.529801325, 0.601794488, 0.691091647, 0.799401837, 0.950437941, 1]
        Y = [0.78370906, 0.758188005, 0.731603573, 0.695661421, 0.640791153, 0.568694173, 0.511059124, 0.408974904, 0.323266695, 0.269885155, 0.225010634, 0.174393875, 0.113143343, 0.027860485, 0.004891536]

    if a >= 7:

        X = [-0.598803674, -0.48258919, -0.43366802, -0.362102115, -0.268105106, -0.169194617, 0.000640889, 0.076906644, 0.162144841, 0.264259774, 0.336893826, 0.412945952, 0.476607562, 0.552232429, 0.61568041, 0.695577868, 1]
        Y = [0.652913654, 0.634623564, 0.62079966, 0.594002552, 0.543811144, 0.479157805, 0.361335602, 0.301573798, 0.237983837, 0.168651638, 0.126541897, 0.087834964, 0.062313909, 0.038068907, 0.021905572, 0.005104211, 0.000212675]

    if m >= 1:
            
        return (np.interp(((np.sqrt(m**2 - 1))/(tg_chi)), X, Y))

    if m < 1:

        return (np.interp(-((np.sqrt(1 - m**2))/(tg_chi)), X, Y))

    # индуктивное сопротивления окончание

# Окончание параметров, относящихся к лобовому сопроитвлению

# Параметры, относящиеся к подъемной силе

def C_y1_alpha_fez(m, l_n, l_c, form):
    
    """
    Функция возвращает производную коэффицента подъемной силы по углу атаки для изолоированного корпуса в связанной системе координат,
    (С_y1^\\alpha)_(из.корп.). Графики смотри на рисунках 3.2 - 3.4 в ДАБЛА.В качестве аргументов
    требует:
        1) Число Маха.\n
        2) Удлинение носовой части ЛА.\n
        3) Удлинение цилиндрической части.\n
        4) Форму летательного аппарата в виде одной из следующих строк (строку так и писать, прям вот так как есть):
            4.1) "конус-цилиндр"\n
            4.2) "оживало-цилиндр"\n
            4.3) "сфера-цилиндр"\n
            4.4) "плоский-цилиндр" (имеется ввиду цилиндр с плоским торцем, в этом случае в качестве удлинения носовой части передается ноль)
    """

    if form == "конус-цилиндр":
            
        if l_c/l_n < 0.25:

            X = [-0.794021331, -0.34721346, -0.28237945, -0.211686946, -0.126543488, -0.062881178, 0.020309449, 0.098032147, 0.181613339, 0.266756797, 0.358930449, 0.453056933, 0.536638125, 0.60615893, 0.701847679, 0.808862851, 0.915487457, 1.028361124, 1.152561214, 1.291212258, 1.447438786, 1.596244555, 1.901667418, 2.188343097, 2.6]
            c_y = [0.034986323, 0.034976669, 0.034918745, 0.034609815, 0.034213998, 0.03409815, 0.033905068, 0.033692679, 0.033489944, 0.033441673, 0.033345133, 0.033094127, 0.032872084, 0.032727273, 0.032582462, 0.032408689, 0.032302494, 0.032225261, 0.032167337, 0.032167337, 0.032167337, 0.032167337, 0.032167337, 0.032167337, 0.032070796]

            if m >= 1:

                return np.interp((((m**2 - 1)**(1/2))/l_c), X, c_y)
            
            if m < 1:

                return np.interp(-(((1 - m**2)**(1/2))/l_c), X, c_y)

        if l_c/l_n >= 0.25 and l_c/l_n < 0.75:

            X = [-0.794021331, -0.386660658, -0.346822893, -0.293315307, -0.234339793, -0.168334084, -0.113264233, -0.081628361, -0.009764158, 0.033198137, 0.086705723, 0.12420009, 0.179269941, 0.230043563, 0.256992639, 0.302298333, 0.33120024, 0.387832357, 0.417905964, 0.447589004, 0.475319213, 0.504611687, 0.538981523, 0.58077212, 0.646387262, 0.712783536, 0.773711882, 0.835811927, 0.901427069, 0.96821391, 1.037734715, 1.09671023, 1.183806519, 1.256061289, 1.323629262, 1.397055731, 1.470872766, 1.558750188, 1.617335136, 1.708727655, 1.792699414, 1.866907015, 1.968454259, 2.068439237, 2.164127986, 2.258645035, 2.361754544, 2.450022533, 2.532432026, 2.6]
            c_y = [0.034986323, 0.03502494, 0.03507321, 0.035256637, 0.035555913, 0.035971038, 0.036463395, 0.036897828, 0.038008045, 0.038761062, 0.039832663, 0.040662912, 0.041811746, 0.042864039, 0.043356396, 0.044051488, 0.044456959, 0.045161706, 0.045518906, 0.045808528, 0.046030571, 0.04614642, 0.046252615, 0.046300885, 0.046204344, 0.046088496, 0.045972647, 0.045721641, 0.045383749, 0.045007241, 0.044524537, 0.044109413, 0.043665326, 0.043259855, 0.042931617, 0.042584071, 0.042217216, 0.041831054, 0.04156074, 0.041222848, 0.040904264, 0.040643604, 0.040286404, 0.040045052, 0.039909895, 0.039774739, 0.039620274, 0.039514079, 0.039369268, 0.039301689]

            if m >= 1:

                return np.interp((((m**2 - 1)**(1/2))/l_c), X, c_y)
            
            if m < 1:

                return np.interp(-(((1 - m**2)**(1/2))/l_c), X, c_y)

        if l_c/l_n >= 0.75 and l_c/l_n < 1.5:

            X = [-0.794021331, -0.385879525, -0.338230434, -0.281988884, -0.221060538, -0.157398227, -0.099984978, -0.055850984, -0.031245306, 0.017575484, 0.039447198, 0.082018927, 0.145290671, 0.194111462, 0.260507736, 0.324560613, 0.386660658, 0.454619198, 0.516328677, 0.564368334, 0.613189124, 0.653808022, 0.698332582, 0.745981673, 0.792459066, 0.851825146, 0.904942166, 0.963136548, 1.018987532, 1.07444795, 1.121315908, 1.197866907, 1.274808472, 1.375965149, 1.490791648, 1.606008713, 1.74426919, 1.874327775, 2.051254319, 2.198107256, 2.370347003, 2.47150368, 2.6]
            c_y = [0.035034594, 0.035034594, 0.03507321, 0.035275945, 0.035604183, 0.036057924, 0.03656959, 0.037264682, 0.037612228, 0.038490748, 0.038992759, 0.039919549, 0.041589702, 0.042690265, 0.044437651, 0.045924377, 0.047189059, 0.048492357, 0.049409493, 0.049921158, 0.050394208, 0.050674175, 0.050876911, 0.051050684, 0.051118262, 0.051069992, 0.051002414, 0.05082864, 0.050539019, 0.050326629, 0.050123894, 0.049786002, 0.049351569, 0.048907482, 0.048405471, 0.047913113, 0.047353178, 0.046870475, 0.04619469, 0.045711987, 0.045277554, 0.045036203, 0.044843121]

            if m >= 1:

                return np.interp((((m**2 - 1)**(1/2))/l_c), X, c_y)
            
            if m < 1:

                return np.interp(-(((1 - m**2)**(1/2))/l_c), X, c_y)

        if l_c/l_n >= 1.5 and l_c/l_n < 2.5:

            X = [-0.794021331, -0.399939913, -0.337058735, -0.279645486, -0.216373742, -0.144118973, -0.078503831, -0.007030194, 0.059366081, 0.12420009, 0.178879375, 0.242541685, 0.31323419, 0.381192729, 0.449151269, 0.522187171, 0.571398528, 0.617485354, 0.67411747, 0.724891092, 0.812768514, 0.872915728, 0.957278053, 1.047498873, 1.129908367, 1.219738621, 1.303319814, 1.386901006, 1.506804867, 1.638035151, 1.761063542, 1.83878624, 1.935646688, 2.058675079, 2.164909118, 2.284422412, 2.353552651, 2.432837615, 2.516028241, 2.6]
            c_y = [0.03502494, 0.034976669, 0.03502494, 0.035227675, 0.035584875, 0.036164119, 0.036897828, 0.037998391, 0.039456154, 0.041126307, 0.042371681, 0.044003218, 0.045644409, 0.047237329, 0.048714401, 0.050152856, 0.051031376, 0.051823009, 0.052711183, 0.053406275, 0.05439099, 0.054854385, 0.055385358, 0.055839099, 0.056090105, 0.056205953, 0.056167337, 0.056099759, 0.055819791, 0.055433628, 0.055028158, 0.05474819, 0.054497184, 0.054149638, 0.053831054, 0.053435237, 0.053164924, 0.052923572, 0.052624296, 0.052286404]

            if m >= 1:

                return np.interp((((m**2 - 1)**(1/2))/l_c), X, c_y)
            
            if m < 1:

                return np.interp(-(((1 - m**2)**(1/2))/l_c), X, c_y)

        if l_c/l_n >= 2.5 and l_c/l_n < 3.5:

            X = [-0.794021331, -0.382754995, -0.339402133, -0.285113414, -0.234339793, -0.167162385, -0.122637825, -0.101547244, -0.05624155, -0.012107556, 0.057413249, 0.12420009, 0.176535977, 0.24097942, 0.304641731, 0.363226679, 0.398768214, 0.44797957, 0.513594712, 0.567102298, 0.645996695, 0.716298633, 0.770587352, 0.852996845, 0.920955385, 0.996334685, 1.061949827, 1.139281959, 1.219738621, 1.320895298, 1.420880276, 1.499774673, 1.584918131, 1.80168244, 1.916899504, 2.023133544, 2.114916629, 2.237163888, 2.352771519, 2.460567823, 2.6]
            c_y = [0.034986323, 0.034976669, 0.035044248, 0.035295253, 0.035575221, 0.036, 0.036376508, 0.036627514, 0.037264682, 0.037921158, 0.03939823, 0.041126307, 0.042333065, 0.043945294, 0.045441673, 0.046841512, 0.047633146, 0.048685438, 0.049998391, 0.050973451, 0.052296058, 0.053386967, 0.054168946, 0.055211585, 0.056003218, 0.056756235, 0.057306516, 0.057779566, 0.058069187, 0.058291231, 0.05845535, 0.05850362, 0.058532582, 0.058474658, 0.058387772, 0.058271923, 0.058088496, 0.057876106, 0.057673371, 0.057489944, 0.05717136]

            if m >= 1:

                return np.interp((((m**2 - 1)**(1/2))/l_c), X, c_y)
            
            if m < 1:

                return np.interp(-(((1 - m**2)**(1/2))/l_c), X, c_y)

        if l_c/l_n >= 3.5:

            X = [-0.794021331, -0.36205498, -0.32377948, -0.275739823, -0.223403936, -0.153101998, -0.096860448, -0.035150969, 0.016403785, 0.064443443, 0.120294427, 0.178098242, 0.241760553, 0.306203996, 0.358149317, 0.408141806, 0.457353162, 0.499534325, 0.553823043, 0.616704221, 0.671383506, 0.732702419, 0.793630765, 0.865494968, 0.917440288, 0.99477242, 1.056091332, 1.113114015, 1.174042361, 1.253327325, 1.320114166, 1.390416103, 1.445095388, 1.504461469, 1.580231335, 1.656782334, 2.6]
            c_y = [0.034986323, 0.034976669, 0.03502494, 0.035256637, 0.035517297, 0.036038616, 0.03666613, 0.03754465, 0.03847144, 0.039572003, 0.041029767, 0.042410298, 0.043964602, 0.04548029, 0.046696702, 0.047932422, 0.048897828, 0.049728077, 0.05078037, 0.051784393, 0.052720837, 0.053618665, 0.054477876, 0.055395012, 0.055993564, 0.056756235, 0.0572679, 0.057654063, 0.058127112, 0.058551891, 0.058928399, 0.059256637, 0.059440064, 0.059623492, 0.059748994, 0.059884151, 0.05995173]

            if m >= 1:

                return np.interp((((m**2 - 1)**(1/2))/l_c), X, c_y)
            
            if m < 1:

                return np.interp(-(((1 - m**2)**(1/2))/l_c), X, c_y)
        
    if form == "оживало-цилиндр":
            
        if l_c/l_n < 0.25:

            X = [-0.793500266, -0.579399751, -0.372722429, -0.19222163, -0.114864145, -0.088687622, -0.060948322, 0.021097496, 0.091031788, 0.155105665, 0.210584266, 0.252388563, 0.303178831, 0.382489789, 0.453596164, 0.512591014, 0.557520867, 0.61417155, 0.677073344, 0.73841236, 0.812644291, 0.87515539, 0.948996626, 1.032605221, 1.10761854, 1.187710886, 1.258035873, 1.329532943, 1.389309181, 1.470964305, 1.575670396, 1.64755816, 1.730776061, 1.821807849, 1.896821169, 1.944095187, 1.999964482, 2.074587107, 2.139833067, 2.2]
            c_y = [0.03496837, 0.034997567, 0.035046229, 0.035094891, 0.03513382, 0.035201946, 0.035386861, 0.036223844, 0.036856448, 0.037411192, 0.03777129, 0.037907543, 0.037995134, 0.038141119, 0.038209246, 0.038209246, 0.038150852, 0.038043796, 0.03793674, 0.037781022, 0.037479319, 0.037216545, 0.036846715, 0.036350365, 0.035883212, 0.03529927, 0.034754258, 0.03426764, 0.033878345, 0.033391727, 0.032768856, 0.032408759, 0.031980535, 0.031581509, 0.031279805, 0.031036496, 0.030783455, 0.030530414, 0.030248175, 0.03010219]

            if m >= 1:

                return np.interp((((m**2 - 1)**(1/2))/l_c), X, c_y)
            
            if m < 1:

                return np.interp(-(((1 - m**2)**(1/2))/l_c), X, c_y)

        if l_c/l_n >= 0.25 and l_c/l_n < 0.75:

            X = [-0.793500266, -0.694654591, -0.595808915, -0.49618185, -0.394992009, -0.307085775, -0.233244539, -0.174640384, -0.142212751, -0.087124845, -0.051571657, -0.003906944, 0.039460131, 0.150808027, 0.231291067, 0.289113834, 0.356313266, 0.404759368, 0.429763807, 0.450079915, 0.487977269, 0.52470254, 0.566116143, 0.619641272, 0.667696679, 0.698561534, 0.72942639, 0.766933049, 0.811862902, 0.854448588, 0.902503996, 0.942354822, 1.000958977, 1.063860771, 1.146297283, 1.230296573, 1.311170307, 1.4088439, 1.491671106, 1.608879418, 1.715538981, 1.810477713, 1.885491032, 1.981992541, 2.071852246, 2.136316818, 2.2]
            c_y = [0.03496837, 0.03496837, 0.034997567, 0.035046229, 0.035055961, 0.035046229, 0.035192214, 0.035542579, 0.035815085, 0.036291971, 0.036642336, 0.037206813, 0.037800487, 0.039523114, 0.040905109, 0.041927007, 0.043201946, 0.044291971, 0.044768856, 0.045158151, 0.045712895, 0.046248175, 0.046822384, 0.047454988, 0.047951338, 0.04816545, 0.048389294, 0.04853528, 0.048622871, 0.048622871, 0.048467153, 0.048253041, 0.047854015, 0.0473382, 0.046559611, 0.045576642, 0.044583942, 0.043367397, 0.042403893, 0.041099757, 0.040077859, 0.039163017, 0.038510949, 0.037742092, 0.037128954, 0.036681265, 0.036301703]

            if m >= 1:

                return np.interp((((m**2 - 1)**(1/2))/l_c), X, c_y)
            
            if m < 1:

                return np.interp(-(((1 - m**2)**(1/2))/l_c), X, c_y)

        if l_c/l_n >= 0.75 and l_c/l_n < 1.5:

            X = [-0.793500266, -0.694654591, -0.595808915, -0.49618185, -0.394992009, -0.307085775, -0.233244539, -0.174640384, -0.142212751, -0.087124845, -0.051571657, -0.003906944, 0.039460131, 0.118771089, 0.191049547, 0.277002309, 0.347327295, 0.423512698, 0.517279346, 0.612218078, 0.703249867, 0.773965548, 0.855620671, 0.892345942, 0.931024685, 0.997442728, 1.068939798, 1.138092701, 1.208808382, 1.284993784, 1.351802522, 1.460024862, 1.648730243, 1.763594388, 1.972615876, 2.121079737, 2.2]
            c_y = [0.03496837, 0.03496837, 0.034997567, 0.035046229, 0.035055961, 0.035046229, 0.035192214, 0.035542579, 0.035815085, 0.036291971, 0.036642336, 0.037206813, 0.037800487, 0.039104623, 0.040554745, 0.042569343, 0.04436983, 0.046092457, 0.047815085, 0.049411192, 0.050481752, 0.05113382, 0.05163017, 0.051844282, 0.051941606, 0.052019465, 0.051912409, 0.0516691, 0.051055961, 0.050257908, 0.049557178, 0.048155718, 0.04589781, 0.044642336, 0.042666667, 0.041527981, 0.040973236]

            if m >= 1:

                return np.interp((((m**2 - 1)**(1/2))/l_c), X, c_y)
            
            if m < 1:

                return np.interp(-(((1 - m**2)**(1/2))/l_c), X, c_y)

        if l_c/l_n >= 1.5 and l_c/l_n < 3:

            X = [-0.793500266, -0.694654591, -0.595808915, -0.49618185, -0.394992009, -0.307085775, -0.233244539, -0.174640384, -0.142212751, -0.087124845, -0.051571657, -0.003906944, 0.039460131, 0.118771089, 0.191049547, 0.277002309, 0.347327295, 0.407884923, 0.451251998, 0.523921151, 0.606748357, 0.666524596, 0.755212218, 0.822020955, 0.879453028, 0.958373291, 1.010726336, 1.078707157, 1.130669508, 1.203729355, 1.300621559, 1.375244184, 1.453383058, 1.537773042, 1.629195525, 1.689753152, 1.77179897, 1.85579826, 1.953471852, 2.040206002, 2.135144735, 2.2]
            c_y = [0.03496837, 0.03496837, 0.034997567, 0.035046229, 0.035055961, 0.035046229, 0.035192214, 0.035542579, 0.035815085, 0.036291971, 0.036642336, 0.037206813, 0.037800487, 0.039104623, 0.040554745, 0.042569343, 0.04436983, 0.046092457, 0.047328467, 0.049245742, 0.050880779, 0.051844282, 0.053265207, 0.054257908, 0.05492944, 0.055610706, 0.055931873, 0.055980535, 0.055902676, 0.055416058, 0.054588808, 0.053868613, 0.052973236, 0.052009732, 0.050978102, 0.050257908, 0.049508516, 0.04870073, 0.047805353, 0.047036496, 0.046277372, 0.045790754]

            if m >= 1:

                return np.interp((((m**2 - 1)**(1/2))/l_c), X, c_y)
            
            if m < 1:

                return np.interp(-(((1 - m**2)**(1/2))/l_c), X, c_y)

        if l_c/l_n >= 3:

            X = [-0.793500266, -0.694654591, -0.595808915, -0.49618185, -0.394992009, -0.307085775, -0.233244539, -0.174640384, -0.142212751, -0.087124845, -0.051571657, -0.003906944, 0.039460131, 0.118771089, 0.191049547, 0.277002309, 0.347327295, 0.407884923, 0.451251998, 0.523921151, 0.591901971, 0.663008347, 0.740365832, 0.832960398, 0.886485527, 0.960717457, 1.018930918, 1.068939798, 1.135748535, 1.213496715, 1.280696146, 1.366258213, 1.475652637, 1.575279702, 1.721008702, 1.874942284, 1.981992541, 2.2]
            c_y = [0.03496837, 0.03496837, 0.034997567, 0.035046229, 0.035055961, 0.035046229, 0.035192214, 0.035542579, 0.035815085, 0.036291971, 0.036642336, 0.037206813, 0.037800487, 0.039104623, 0.040554745, 0.042569343, 0.04436983, 0.046092457, 0.047328467, 0.049245742, 0.050861314, 0.052360097, 0.053829684, 0.055201946, 0.055902676, 0.056564477, 0.056895377, 0.057099757, 0.057099757, 0.05686618, 0.056564477, 0.056077859, 0.055172749, 0.054374696, 0.053119221, 0.051717762, 0.050715328, 0.048603406]

            if m >= 1:

                return np.interp((((m**2 - 1)**(1/2))/l_c), X, c_y)
            
            if m < 1:

                return np.interp(-(((1 - m**2)**(1/2))/l_c), X, c_y)

    if form == "сфера-цилиндр":

        X = [-0.39992143, -0.341190336, -0.287566293, -0.248477706, -0.186210961, -0.137104695, -0.116087213, -0.098016107, -0.079945001, -0.047534865, -0.010999804, 0.025338833, 0.039481438, 0.049302691, 0.059516794, 0.072284423, 0.084659203, 0.103516009, 0.133569043, 0.149675899, 0.181889609, 0.201139265, 0.231978, 0.279905716, 0.324101355, 0.369868395, 0.408367708, 0.444509919, 0.491259085, 0.53879395, 0.634452956, 0.734629739, 0.826556669, 0.913769397, 1]
        c_y = [0.034524976, 0.034593536, 0.034642507, 0.034701273, 0.034809011, 0.034946131, 0.03503428, 0.035151812, 0.035514202, 0.03632713, 0.037571009, 0.039363369, 0.040215475, 0.040754163, 0.041449559, 0.042144956, 0.0425857, 0.043163565, 0.043653281, 0.043751224, 0.04380999, 0.04380999, 0.043565132, 0.042977473, 0.042252693, 0.041410382, 0.040587659, 0.03993144, 0.038991185, 0.038041136, 0.036238981, 0.034446621, 0.032869736, 0.031283056, 0.029657199]

        if m >= 1:

            return np.interp((((m**2 - 1)**(1/2))/l_c), X, c_y)
            
        if m < 1:

            return np.interp(-(((1 - m**2)**(1/2))/l_c), X, c_y)

    if form == "плоский-цилиндр":
        
        X = [-0.39992143, -0.248870556, -0.122372815, -0.066588097, -0.030838735, 0.023178158, 0.063445296, 0.097623257, 0.139854645, 0.206049892, 0.283048517, 0.351404439, 0.403064231, 0.486937733, 0.592025142, 0.702416028, 0.805146337, 0.903358869, 1]
        c_y = [0.034642507, 0.034779628, 0.034936337, 0.035210578, 0.035739471, 0.036709109, 0.037228208, 0.037463271, 0.037463271, 0.036885406, 0.035808031, 0.034280118, 0.033124388, 0.031625857, 0.029774731, 0.02798237, 0.026660137, 0.025151812, 0.023927522]

        if m >= 1:

            return np.interp((((m**2 - 1)**(1/2))/l_c), X, c_y)
            
        if m < 1:

            return np.interp(-(((1 - m**2)**(1/2))/l_c), X, c_y)

def C_y1_alpha_kr(m, l_k, tg_chi, c):
    
    """
    Функция возвращает производную коэффициента подъемной силы по углу атаки для изолированного крыла (оперения) в связанной системе координат.
    Графики смотри на рисунках 3.5 в ДАБЛА.В качестве аргументов
    требует:
        1) Число Маха. Не забывайте, что на крыло приходит измененное число Маха, об этом читай стр. 149 в ДПБЛА 2 абзац снизу\n
        2) Удлинение крыла.\n
        3) Тангенс угла стреловидности крыла.\n
        4) Относительная толщина профиля.
    """

    if tg_chi < 0.5:

        if l_k*((c)**(1/3)) < 0.375:

            X = [-3.488018337, -3.109918733, -2.758543447, -2.292352573, -1.76281517, -1.314440508, -0.941289852, -0.714628048, -0.482027506, -0.240518858, -0.015836633, 0.12966243, 0.221712857, 0.292977704, 0.327620338, 0.364242551, 0.414721817, 0.478068348, 0.540425089, 0.606740988, 0.678005835, 0.744321734, 0.913575745, 1.149145655, 1.307511982, 1.557928735, 1.788549698, 2.028078766, 2.284434257, 2.532871432, 2.777349448, 3.097051469, 3.471191915, 3.810689727, 4.100698062, 4.323400708, 4.557980829, 4.876693061, 5.313190248, 5.685351115, 6.037716191, 6.474213378, 6.817670348, 7.187851636, 7.583767452, 7.991560742, 8.506251302, 9.002135862, 9.5]
            c_y = [0.017285658, 0.018261557, 0.019233505, 0.020655867, 0.022406164, 0.024140656, 0.025871197, 0.027013038, 0.028158831, 0.029952588, 0.031963651, 0.032983011, 0.033559858, 0.033990518, 0.034132754, 0.03423548, 0.034322402, 0.034389569, 0.034389569, 0.03435401, 0.034259186, 0.034089293, 0.033386013, 0.032121691, 0.03113789, 0.029320427, 0.027550375, 0.025732912, 0.023931252, 0.022504939, 0.021035164, 0.019344133, 0.017625444, 0.016357171, 0.015408929, 0.014764915, 0.014124852, 0.013346503, 0.012445674, 0.011702884, 0.011149743, 0.010529435, 0.009992098, 0.009517977, 0.009032003, 0.008632951, 0.008158831, 0.007747926, 0.007400237]

            if m >= 1:

                return (np.interp((((m**2 - 1)**(1/2))*l_k), X, c_y))*l_k
            
            if m < 1:

                return (np.interp(-(((1 - m**2)**(1/2))*l_k), X, c_y))*l_k

        if l_k*((c)**(1/3)) >= 0.375 and l_k*((c)**(1/3)) < 0.75:

            X = [-3.488018337, -3.109918733, -2.758543447, -2.292352573, -1.76281517, -1.314440508, -0.941289852, -0.714628048, -0.444415503, -0.312773494, -0.206866014, -0.100958533, -0.005938737, 0.121744113, 0.266253386, 0.377109815, 0.505782455, 0.703740363, 0.934361325, 1.159043551, 1.344134195, 1.598510106, 1.856845176, 2.100333403, 2.334913524, 2.667482809, 3.389039383, 4.141279433, 4.96577412, 5.778391332, 6.622681809, 7.430350073, 8.302354657, 8.961554491, 9.5]
            c_y = [0.017285658, 0.018261557, 0.019233505, 0.020655867, 0.022406164, 0.024140656, 0.025871197, 0.027013038, 0.029182141, 0.030505729, 0.031201106, 0.031789806, 0.032097985, 0.03231529, 0.032362702, 0.03231529, 0.032026867, 0.031438167, 0.030604504, 0.029616752, 0.028715923, 0.027313315, 0.025831687, 0.024239431, 0.022781509, 0.020699328, 0.017384433, 0.014717503, 0.012580008, 0.011074674, 0.00992098, 0.008968787, 0.008210194, 0.007736073, 0.007419992]

            if m >= 1:

                return (np.interp((((m**2 - 1)**(1/2))*l_k), X, c_y))*l_k
            
            if m < 1:

                return (np.interp(-(((1 - m**2)**(1/2))*l_k), X, c_y))*l_k

        if l_k*((c)**(1/3)) >= 0.75 and l_k*((c)**(1/3)) < 1.25:

            X = [-3.488018337, -3.109918733, -2.758543447, -2.292352573, -1.772713065, -1.520316733, -1.363929985, -1.187747447, -1.01057512, -0.825484476, -0.657220254, -0.470150031, -0.290998125, -0.104917691, 0.093040217, 0.377109815, 0.710668889, 0.981871223, 1.20358408, 1.456970202, 1.674723901, 1.918212128, 2.168628881, 2.40815795, 2.777349448, 3.205928318, 3.990831423, 4.866795166, 5.784330069, 6.583090227, 7.494686393, 8.372629715, 9.173369452, 9.5]
            c_y = [0.017285658, 0.018261557, 0.019233505, 0.020655867, 0.022485184, 0.02360727, 0.024567365, 0.02545239, 0.026282102, 0.027119716, 0.027696563, 0.028131173, 0.028399842, 0.028463058, 0.028316871, 0.027878309, 0.027210589, 0.026531015, 0.025792177, 0.024970367, 0.024168313, 0.023212169, 0.022177005, 0.021149743, 0.019593046, 0.017755828, 0.014836033, 0.012532596, 0.010928487, 0.009830107, 0.008739629, 0.007965231, 0.007348874, 0.007226393]

            if m >= 1:

                return (np.interp((((m**2 - 1)**(1/2))*l_k), X, c_y))*l_k
            
            if m < 1:

                return (np.interp(-(((1 - m**2)**(1/2))*l_k), X, c_y))*l_k

        if l_k*((c)**(1/3)) >= 1.25 and l_k*((c)**(1/3)) < 1.6:

            X = [-3.488018337, -3.109918733, -2.758543447, -2.292352573, -1.95483434, -1.707386956, -1.473796624, -1.344134195, -1.221400292, -1.07392165, -0.855178162, -0.656230465, -0.391956658, -0.147478641, 0.100958533, 0.358303813, 0.640393832, 0.954157116, 1.254063347, 1.5044801, 1.728172536, 2.060741821, 2.405188581, 2.771410711, 3.001041884, 3.312825589, 3.665190665, 3.990831423, 4.285788706, 5.362679725, 6.388101688, 7.375911648, 8.440925193, 9.189206085, 9.5]
            c_y = [0.017285658, 0.018261557, 0.019233505, 0.020655867, 0.022303437, 0.023401817, 0.024350059, 0.024760964, 0.025037535, 0.025160016, 0.025235085, 0.025207428, 0.025013829, 0.024701699, 0.02427499, 0.023789016, 0.02325563, 0.022631371, 0.021868827, 0.02121691, 0.020620308, 0.019739234, 0.018830502, 0.017830897, 0.017206638, 0.016321612, 0.01537337, 0.014484394, 0.013682339, 0.011228763, 0.009517977, 0.008328724, 0.007578032, 0.007273805, 0.007198736]

            if m >= 1:

                return (np.interp((((m**2 - 1)**(1/2))*l_k), X, c_y))*l_k
            
            if m < 1:

                return (np.interp(-(((1 - m**2)**(1/2))*l_k), X, c_y))*l_k

        if l_k*((c)**(1/3)) >= 1.6:

            X = [-3.488018337, -3.109918733, -2.789226922, -2.453688268, -2.137945405, -2.012242134, -1.95483434, -1.881589915, -1.820222963, -1.751927485, -1.657897479, -1.601479475, -1.549020629, -1.513388206, -1.474786414, -1.413419462, -1.321369035, -1.218430923, -1.163992498, -1.108564284, -1.038289227, -0.966034591, -0.871014795, -0.770056262, -0.642373411, -0.496874349, -0.345436549, -0.176182538, 0.066315899, 0.489945822, 1.003646593, 1.510418837, 2.001354449, 2.517034799, 2.996092936, 3.573140238, 4.8351219, 6.097103563, 7.430350073, 8.604240467, 9.5]
            c_y = [0.017285658, 0.018261557, 0.018968787, 0.019869617, 0.020600553, 0.020825761, 0.020873173, 0.020873173, 0.020825761, 0.020655867, 0.020252864, 0.019873568, 0.019415251, 0.019091268, 0.018834453, 0.018684315, 0.018640853, 0.018763335, 0.019012248, 0.019438957, 0.019814303, 0.020082971, 0.020418807, 0.020604504, 0.020703279, 0.020719083, 0.020719083, 0.020620308, 0.020478072, 0.020007902, 0.019324378, 0.018494666, 0.017688661, 0.016696958, 0.015807981, 0.014622679, 0.011837218, 0.009616752, 0.007925721, 0.006997234, 0.006728566]

            if m >= 1:

                return (np.interp((((m**2 - 1)**(1/2))*l_k), X, c_y))*l_k
            
            if m < 1:

                return (np.interp(-(((1 - m**2)**(1/2))*l_k), X, c_y))*l_k

    if tg_chi >= 0.5 and tg_chi < 1.5:

        if l_k*((c)**(1/3)) < 0.375:

            X = [-3.487869915, -3.374620935, -3.209714525, -3.015999163, -2.787514378, -2.620621144, -2.440813552, -2.162658162, -1.871588414, -1.489124752, -1.156331695, -0.869235596, -0.648698107, -0.457962982, -0.241399143, 0, 0.174840531, 0.299017045, 0.380476838, 0.439088152, 0.48975217, 0.555317369, 0.62187598, 0.727177664, 0.843406881, 0.919899613, 1.020234236, 1.197061592, 1.387796717, 1.624228798, 1.862647705, 2.142789919, 2.514326048, 3.012025515, 3.519659103, 3.993516679, 4.508104151, 5.002823382, 5.505489909, 5.999215727, 6.49492837, 6.992627836, 7.481386594, 7.992000418, 8.474798703, 8.973491582, 9.5]
            c_y = [0.016567342, 0.016754072, 0.017135479, 0.017556615, 0.018132698, 0.018609456, 0.019106079, 0.019980135, 0.020917759, 0.022256655, 0.023484307, 0.024664283, 0.02568534, 0.026654748, 0.027961859, 0.029439809, 0.030393325, 0.031136273, 0.031521653, 0.031696464, 0.0318236, 0.031922924, 0.0319706, 0.031942789, 0.031767978, 0.03155741, 0.031120381, 0.030218514, 0.029030592, 0.027377831, 0.025852205, 0.024104092, 0.021962654, 0.019431863, 0.017266587, 0.015586015, 0.014068335, 0.012928089, 0.01185141, 0.011001192, 0.01026619, 0.009566945, 0.008963051, 0.008394915, 0.007945967, 0.007512912, 0.007171236]

            if m >= 1:

                return (np.interp((((m**2 - 1)**(1/2))*l_k), X, c_y))*l_k
            
            if m < 1:

                return (np.interp(-(((1 - m**2)**(1/2))*l_k), X, c_y))*l_k

        if l_k*((c)**(1/3)) >= 0.375 and l_k*((c)**(1/3)) < 0.75:

            X = [-3.487869915, -3.374620935, -3.209714525, -3.015999163, -2.787514378, -2.620621144, -2.440813552, -2.162658162, -1.871588414, -1.489124752, -0.912945728, -0.481804873, -0.241399143, 0.000993412, 0.069538848, 0.15993935, 0.274181742, 0.413259437, 0.508627, 0.641744223, 0.803670396, 1.093746732, 1.341106347, 1.600386908, 1.847746523, 2.074244484, 2.323590923, 2.536181115, 3.055735648, 3.611053017, 4.215047579, 4.932291122, 5.614765241, 6.454198473, 7.30058559, 8.161873889, 8.97249817, 9.5]
            c_y = [0.016567342, 0.016754072, 0.017135479, 0.017556615, 0.018132698, 0.018609456, 0.019106079, 0.019980135, 0.020917759, 0.022256655, 0.024898689, 0.027254668, 0.028736591, 0.029936432, 0.030139054, 0.030377433, 0.030472785, 0.030472785, 0.030401271, 0.030190703, 0.02969408, 0.028458482, 0.027195074, 0.02583234, 0.024525228, 0.023373063, 0.022141438, 0.021040922, 0.018605483, 0.016523639, 0.014680175, 0.012936035, 0.011569329, 0.010301947, 0.00913389, 0.008208184, 0.007500993, 0.007143425]

            if m >= 1:

                return (np.interp((((m**2 - 1)**(1/2))*l_k), X, c_y))*l_k
            
            if m < 1:

                return (np.interp(-(((1 - m**2)**(1/2))*l_k), X, c_y))*l_k

        if l_k*((c)**(1/3)) >= 0.75 and l_k*((c)**(1/3)) < 1.25:

            X = [-3.487869915, -3.374620935, -3.209714525, -3.015999163, -2.787514378, -2.620621144, -2.440813552, -2.162658162, -1.871588414, -1.538795357, -1.367928474, -1.001359406, -0.784795566, -0.592073617, -0.377496601, -0.211596779, -0.029802363, 0.168880059, 0.389417547, 0.614922096, 0.831485935, 1.105667678, 1.465282861, 1.809996863, 2.115967793, 2.51531946, 3.020966224, 3.512705218, 4.497176618, 5.506483321, 6.486981073, 7.497281188, 8.332740772, 9.140384816, 9.5]
            c_y = [0.016567342, 0.016754072, 0.017135479, 0.017556615, 0.018132698, 0.018609456, 0.019106079, 0.019980135, 0.020917759, 0.022419547, 0.023285658, 0.025180771, 0.026011124, 0.026575288, 0.026932857, 0.027103695, 0.027103695, 0.026916965, 0.026567342, 0.026062773, 0.025486691, 0.024632499, 0.023404847, 0.022284466, 0.021307112, 0.020003973, 0.018351212, 0.016885181, 0.0139412, 0.011569329, 0.009793405, 0.008454509, 0.007671832, 0.007056019, 0.006912992]

            if m >= 1:

                return (np.interp((((m**2 - 1)**(1/2))*l_k), X, c_y))*l_k
            
            if m < 1:

                return (np.interp(-(((1 - m**2)**(1/2))*l_k), X, c_y))*l_k

        if l_k*((c)**(1/3)) >= 1.25:

            X = [-3.487869915, -3.374620935, -3.209714525, -3.015999163, -2.480550037, -2.197427585, -1.958015267, -1.818937572, -1.696747882, -1.558663599, -1.438460734, -1.306336924, -1.188120883, -1.015267176, -0.837446408, -0.618895744, -0.45200251, -0.301003869, -0.130136986, 0.23543867, 0.542403012, 0.996392345, 1.498065461, 2.002718812, 2.517306285, 3.013018927, 3.516678866, 4.004444212, 4.499163442, 5.501516261, 6.508836139, 7.480393182, 8.483739412, 9.5]
            c_y = [0.016567342, 0.016754072, 0.017135479, 0.017556615, 0.019300755, 0.020321812, 0.021315058, 0.022046087, 0.02257052, 0.023067143, 0.023472388, 0.023857767, 0.0240882, 0.024235201, 0.024330552, 0.024310687, 0.024231228, 0.02404847, 0.023758443, 0.023162495, 0.02254271, 0.021589193, 0.020500596, 0.019336512, 0.018128725, 0.01696464, 0.015717124, 0.014553039, 0.013345252, 0.011036949, 0.009336512, 0.00814859, 0.00735002, 0.006769964]

            if m >= 1:

                return (np.interp((((m**2 - 1)**(1/2))*l_k), X, c_y))*l_k
            
            if m < 1:

                return (np.interp(-(((1 - m**2)**(1/2))*l_k), X, c_y))*l_k

    if tg_chi >= 1.5 and tg_chi < 2.5:

        if l_k*((c)**(1/3)) < 0.375:

            X = [-3.480765232, -3.221979622, -2.91775837, -2.570076939, -2.191775837, -1.719640258, -1.355167394, -0.971927636, -0.61338116, -0.308172177, 0.033582865, 0.163963402, 0.228165939, 0.312123103, 0.400031192, 0.500779788, 0.595601996, 0.701289249, 0.814878353, 0.920565606, 1.039093367, 1.2040445, 1.35911832, 1.497400707, 1.631732169, 1.807548347, 2.00213142, 2.190788106, 2.443647328, 2.686629237, 2.912819713, 3.130120607, 3.36124974, 3.593366604, 3.834373051, 4.132667914, 4.413183614, 4.731233105, 4.997920566, 5.346589728, 5.687357039, 6.059731753, 6.399511333, 6.75904554, 7.103763776, 7.597629445, 7.999636099, 8.374974007, 8.766115617, 9.076263256, 9.5]
            c_y = [0.015531496, 0.016003937, 0.016645669, 0.017468504, 0.018401575, 0.01980315, 0.020988189, 0.022401575, 0.024051181, 0.02557874, 0.027385827, 0.028133858, 0.028389764, 0.028637795, 0.028779528, 0.028846457, 0.02884252, 0.028755906, 0.028606299, 0.028370079, 0.027917323, 0.027279528, 0.02657874, 0.025834646, 0.02515748, 0.024255906, 0.023350394, 0.022456693, 0.021354331, 0.020354331, 0.019448819, 0.018625984, 0.017799213, 0.017051181, 0.016220472, 0.015307087, 0.014566929, 0.01373622, 0.013153543, 0.012405512, 0.011728346, 0.011102362, 0.010551181, 0.01, 0.009582677, 0.009047244, 0.008677165, 0.00830315, 0.007980315, 0.007755906, 0.007523622]

            if m >= 1:

                return (np.interp((((m**2 - 1)**(1/2))*l_k), X, c_y))*l_k
            
            if m < 1:

                return (np.interp(-(((1 - m**2)**(1/2))*l_k), X, c_y))*l_k

        if l_k*((c)**(1/3)) >= 0.375 and l_k*((c)**(1/3)) < 0.75:

            X = [-3.480765232, -3.221979622, -2.91775837, -2.570076939, -2.191775837, -1.6327199, -1.328498648, -0.867228114, -0.519546683, -0.337804117, -0.209399043, -0.093834477, 0.037533791, 0.134331462, 0.279527968, 0.42077355, 0.619307548, 0.802037846, 1.016375546, 1.227750052, 1.47764608, 1.791744645, 2.057444375, 2.429819089, 2.877261385, 3.263464338, 4.090195467, 5.035454356, 6.021210231, 7.056352672, 8.038157621, 8.988355167, 9.5]
            c_y = [0.015531496, 0.016003937, 0.016645669, 0.017468504, 0.018401575, 0.019901575, 0.020917323, 0.022885827, 0.024830709, 0.025964567, 0.026610236, 0.027015748, 0.02730315, 0.027429134, 0.027472441, 0.027429134, 0.027133858, 0.026677165, 0.026023622, 0.025307087, 0.024389764, 0.023074803, 0.021917323, 0.020535433, 0.018854331, 0.017503937, 0.015043307, 0.012771654, 0.010874016, 0.009417323, 0.008437008, 0.007685039, 0.007425197]

            if m >= 1:

                return (np.interp((((m**2 - 1)**(1/2))*l_k), X, c_y))*l_k
            
            if m < 1:

                return (np.interp(-(((1 - m**2)**(1/2))*l_k), X, c_y))*l_k

        if l_k*((c)**(1/3)) >= 0.75 and l_k*((c)**(1/3)) < 1.25:

            X = [-3.480765232, -3.221979622, -2.91775837, -2.570076939, -2.191775837, -1.64753587, -1.410480349, -1.150707008, -0.995633188, -0.902786442, -0.79808692, -0.645976294, -0.469172385, -0.294343938, -0.16988979, -0.054325224, 0.085932626, 0.272613849, 0.502755251, 0.751663548, 1.068725307, 1.45492826, 2.003119152, 2.489082969, 2.998752339, 3.492618008, 3.781035558, 3.978581826, 4.489238927, 5.56981701, 6.620763152, 7.829746309, 9.002183406, 9.5]
            c_y = [0.015531496, 0.016003937, 0.016645669, 0.017468504, 0.018401575, 0.019940945, 0.020913386, 0.022090551, 0.02292126, 0.023314961, 0.023649606, 0.024074803, 0.024472441, 0.024677165, 0.024775591, 0.024811024, 0.024759843, 0.024594488, 0.024311024, 0.023889764, 0.023145669, 0.022106299, 0.020535433, 0.01907874, 0.017677165, 0.01634252, 0.015594488, 0.015106299, 0.013850394, 0.011503937, 0.009767717, 0.008468504, 0.007527559, 0.00730315]

            if m >= 1:

                return (np.interp((((m**2 - 1)**(1/2))*l_k), X, c_y))*l_k
            
            if m < 1:

                return (np.interp(-(((1 - m**2)**(1/2))*l_k), X, c_y))*l_k

        if l_k*((c)**(1/3)) >= 1.25:

            X = [-3.480765232, -3.221979622, -2.91775837, -2.530567686, -2.269806613, -1.992254107, -1.731493034, -1.575431483, -1.353191932, -1.12996465, -0.874142233, -0.63511125, -0.346693699, 0.023705552, 0.297307132, 0.526460803, 0.808951965, 1.176388022, 1.500363901, 1.777916407, 2.066333957, 2.334996881, 2.603659805, 2.858494489, 3.148887503, 3.384955292, 3.495581202, 3.987471408, 4.489238927, 4.997920566, 5.494749428, 6.012320649, 6.529891869, 7.002027449, 7.508733624, 7.991734248, 8.497452693, 9.009097525, 9.5]
            c_y = [0.015531496, 0.016003937, 0.016645669, 0.017271654, 0.018141732, 0.019224409, 0.020330709, 0.020925197, 0.02153937, 0.021948819, 0.022244094, 0.022354331, 0.022318898, 0.022043307, 0.021649606, 0.021279528, 0.020700787, 0.019992126, 0.019307087, 0.018771654, 0.018185039, 0.017677165, 0.017129921, 0.016614173, 0.016019685, 0.015531496, 0.015314961, 0.014307087, 0.013311024, 0.012311024, 0.011330709, 0.010374016, 0.009570866, 0.008968504, 0.008468504, 0.008094488, 0.007807087, 0.007535433, 0.00730315]

            if m >= 1:

                return (np.interp((((m**2 - 1)**(1/2))*l_k), X, c_y))*l_k
            
            if m < 1:

                return (np.interp(-(((1 - m**2)**(1/2))*l_k), X, c_y))*l_k

    if tg_chi >= 2.5:

        if l_k*((c)**(1/3)) < 0.375:

            X = [-3.480981534, -0.327980731, -0.056252509, 0.153502609, 0.288890004, 0.375652348, 0.482436772, 0.576826576, 0.675030108, 0.801836612, 0.931503412, 0.987755921, 1.505469691, 1.988859896, 2.5046668, 3.017613408, 3.514351666, 3.990114412, 4.496386993, 5.003613007, 5.493677238, 6.005670413, 6.513849859, 6.985798876, 7.475863107, 7.995483741, 8.48840827, 8.972751907, 9.5]
            c_y = [0.007355805, 0.022093633, 0.023344569, 0.024101124, 0.02459176, 0.024820225, 0.025007491, 0.025074906, 0.025101124, 0.025026217, 0.024794007, 0.024629213, 0.022782772, 0.020947566, 0.019146067, 0.017599251, 0.016269663, 0.015127341, 0.014037453, 0.013007491, 0.012134831, 0.011329588, 0.010588015, 0.009940075, 0.009325843, 0.008726592, 0.008262172, 0.007876404, 0.007535581]

            if m >= 1:

                return (np.interp((((m**2 - 1)**(1/2))*l_k), X, c_y))*l_k
            
            if m < 1:

                return (np.interp(-(((1 - m**2)**(1/2))*l_k), X, c_y))*l_k

        if l_k*((c)**(1/3)) >= 0.375 and l_k*((c)**(1/3)) < 0.75:

            X = [-3.480981534, -0.29937776, -0.028602971, 0.193546768, 0.308912084, 0.461461261, 0.653101164, 0.987755921, 1.511190285, 1.993627057, 2.501806503, 3.021427138, 3.514351666, 4.902549177, 6.08099157, 7.298524689, 8.27388599, 8.67051385, 9.059514251, 9.5]
            c_y = [0.01082397, 0.022277154, 0.023198502, 0.023749064, 0.023910112, 0.02393633, 0.023749064, 0.023168539, 0.021868914, 0.020142322, 0.018662921, 0.017292135, 0.016078652, 0.013116105, 0.011101124, 0.009460674, 0.008426966, 0.008029963, 0.00776779, 0.007513109]

            if m >= 1:

                return (np.interp((((m**2 - 1)**(1/2))*l_k), X, c_y))*l_k
            
            if m < 1:

                return (np.interp(-(((1 - m**2)**(1/2))*l_k), X, c_y))*l_k

        if l_k*((c)**(1/3)) >= 0.75 and l_k*((c)**(1/3)) < 1.25:

            X = [-3.480981534, -1.264251305, -1.034474107, -0.814231232, -0.627358491, -0.444299478, -0.332747892, -0.104877559, 0.140154556, 0.423323966, 0.772280209, 1.293807708, 1.506423123, 1.986953031, 2.500853071, 3.020473705, 3.513398234, 3.995835006, 4.50306102, 4.999799277, 6.433761542, 7.374799277, 8.240515857, 9.064281413, 9.5]
            c_y = [0.010947566, 0.01929588, 0.020078652, 0.020835206, 0.021355805, 0.021801498, 0.021992509, 0.022134831, 0.022082397, 0.021895131, 0.021355805, 0.020370787, 0.019913858, 0.018707865, 0.017539326, 0.016419476, 0.01535206, 0.014378277, 0.013441948, 0.012543071, 0.010299625, 0.009078652, 0.008194757, 0.007606742, 0.007411985]

            if m >= 1:

                return (np.interp((((m**2 - 1)**(1/2))*l_k), X, c_y))*l_k
            
            if m < 1:

                return (np.interp(-(((1 - m**2)**(1/2))*l_k), X, c_y))*l_k

        if l_k*((c)**(1/3)) >= 1.25:

            X = [-3.480981534, -1.930700522, -1.700923324, -1.531212365, -1.24613609, -1.019219189, -0.776093938, -0.548223605, -0.348956242, -0.134433962, 0.26314733, 0.753211562, 1.277599358, 1.798173424, 2.281563629, 2.808811722, 3.312224006, 3.752709755, 4.103572862, 4.456342834, 4.823414291, 5.119931754, 5.4984444, 6.649237254, 7.475863107, 8.373996387, 9.5]
            c_y = [0.012067416, 0.017573034, 0.018217228, 0.018644195, 0.019314607, 0.01970412, 0.019906367, 0.020014981, 0.020026217, 0.019955056, 0.019719101, 0.019205993, 0.018498127, 0.017625468, 0.016730337, 0.015715356, 0.014771536, 0.014007491, 0.013441948, 0.012868914, 0.012277154, 0.01182397, 0.011269663, 0.009801498, 0.008891386, 0.008078652, 0.007397004]

            if m >= 1:

                return (np.interp((((m**2 - 1)**(1/2))*l_k), X, c_y))*l_k
            
            if m < 1:

                return (np.interp(-(((1 - m**2)**(1/2))*l_k), X, c_y))*l_k

def K_koef(m, d, l_1, l, eta_k, h, b, L_x, flag):

    """
    Функция возвращает коэффициенты интерференции K_(\\alpha \\alpha) и k_(\\alpha \\alpha) соответственно.
    Либо коэффициенты интерференции K_(\\delta 0) и k_(\\delta \\0)
    ФУНКЦИЯ ВОЗВРАЩАЕТ ДВА ЗНАЧЕНИЯ СРАЗУ! Вызывать ее правильно вот так: a, b = K_koef(...).
    Переменной а будет присвоенно значение К, а переременной b - значение k
    Функция ведет расчет до скоростей максимум в 15 Махов.
    Расчет этих коэффициентов представлен в ДПБЛА на стр. 156 глава 1.3.\n
    В качестве аргументов функция требует:
        1) Число Маха.\n
        2) Диаметр корпуса летательного аппарата (В МЕТРАХ) в середине бортовой хорды консолей,
            чаще это диаметр миделя, если диаметр остается постоянным по ракете. \n
        3) Расстояние от носика летательного аппарата до середины бортовой хорды консолей в МЕТРАХ. \n
        4) Полный размах несущей поверхности в МЕТРАХ. \n
        5) Сужение консоли несущей поверхности. Если бесконечно - передайте в функцию значение 99999 \n
        6) Высоту полета в МЕТРАХ. \n
        7) Длина бортовой хорды консоли в МЕТРАХ. \n
        8) Длина хвостовой части (от конца бортовой части до кормового среза корпуса) в МЕТРАХ. \n
        9) Передайте в функцию число 0, если Вы хотите получить коэффициенты K_(\\alpha \\alpha) и k_(\\alpha \\alpha)
            для расчета подъемной силы корпуса. Передайте в функцию число 1, если Вы хотите получить коэффициенты
            K_(\\delta 0) и k_(\\delta 0), необходимые для расчета коэффициента подъемной силы несущих поверхностей
    """

    def f(t):

        return (2/((2*np.pi))**(1/2))*np.exp(-(t**2/2))

    M = [1, 1.476804774, 1.64785952, 1.79247102, 1.91394468, 2.03831057, 2.146562608, 2.289934581, 2.424216688, 2.526271089, 2.644439344, 2.772936991, 2.891931596, 2.992333295, 3.119178239, 3.267095145, 3.413772524, 3.567060714, 3.698863767, 3.835211753, 4.6]
    Kapa_M = [1, 1, 0.992802057, 	0.979640103, 0.966169666, 0.953316195, 0.940565553, 0.926375321, 0.91125964, 0.900874036, 0.892647815, 0.883907455, 0.877120823, 0.872802057, 0.868894602, 0.863958869, 0.860462725, 0.857172237, 0.85470437, 0.854087404, 0.854087404]
    
    D = d/l
    KK = 1 + 3*D - ( ( D * (1 - D) ) / (eta_k) )
    kk = ((1 + 0.41*D)**2) * ( (KK) / ((1 + D)**2) )

    delta = ( (0.093) / ( ((m*A(h))*l_1) / (Nu(T(h))) ) ) * (l_1/d) * (1 + 0.4*m + 0.147*m**2 - 0.006*m**3)
    if flag == 0:
        chi_ps = ( 1 - (((2*D**2) / (1 - D**2))*delta) ) * ( 1 - (((D*(eta_k - 1)) / ((1 - D)*(eta_k + 1)))*delta) )
    if flag == 1:
        chi_ps = ( (1 - D*(1 + delta)) * (1 - ((D*(1 + delta))*((eta_k - 1)/(eta_k + 1 - 2*D)))) ) / ( (1 - D) * (1 - D*((eta_k - 1)/(eta_k + 1 - 2*D))) )

    if m < 1:
        kapa_m = 1
    if m > 4.6:
        kapa_m = 0.854087404
    if m >= 1 and m <= 4.6:
        kapa_m = np.interp(m, M, Kapa_M)

    chi_nos = 0.6 + 0.4*(1 - np.exp(-0.5*(l_1/d)))

    if m > 1:
        Ll = (L_x) / ((np.pi/2)*(d*((m**2 - 1)**(1/2))))
        bb = (b) / ((np.pi/2)*(d*((m**2 - 1)**(1/2))))
        c = (4 + 1/eta_k) * (1 + 8*D**2)
        x1 = (bb + Ll)*(2*c)**(1/2)
        x2 = Ll*(2*c)**(1/2)
        F1, err = integrate.quad(f, 0, x1)
        F2, err = integrate.quad(f, 0, x2)

    if Ll < 0.7 and m > 1:
        F = 1 - ( ( (np.pi**(1/2)) / (2*bb*(c**(1/2))) ) * (F1 - F2) )
    if Ll >= 0.7 or m <= 1:
        F = 1

    if flag == 0:
        return (kk + (KK - kk)*F)*chi_ps*kapa_m*chi_nos, kk*chi_ps*kapa_m*chi_nos

    if flag == 1:
        kkk = kk**2 / KK
        KKK = kk
        return (kkk + (KKK - kkk)*F)*chi_ps*kapa_m, kkk*chi_ps*kapa_m

def Eps_med(m, l_k, tg_chi, eta_k_I, eta_k_II, d_I, d_II, l_I, l_II, c_y_kr, k, K, n):

    """
    Функцяи возвращает производную среднего угла скоса потока epsilon_ср по углу атаки по формуле 3.34 в ДПБЛА на стр. 168
    или по углу отклонения рулей по формуле 3.68 на стр. 183. Возвращаемое значение регулируется передаваемым "флагом"
    Функцию можно применять только в том случае, если первые и вторые аэродинамические поверхности (крыло и оперение) лежат в одной плоскости.\n
    В качестве аргументов требует:
        1) Число Маха ПЕРЕДНЕЙ консоли (первых аэродинамических поверхностей) (определение этого числа смотри формулу 3.41 на стр. 173 в ДПБЛА).\n
        2) Удлинение ПЕРЕДНЕЙ консоли\n
        3) Тангенс среднего угла стреловидности ПЕРЕДНЕЙ консоли\n
        4) Сужение ПЕРЕДНЕЙ консоли. Если бесконечно - передайте 99\n
        5) Сужение ЗАДНЕЙ консоли. Если бесконечно - передайте 99\n
        6) Диаметр корпуса в области ПЕРЕДНЕЙ несущей поверхности (по середине бортовой хорды) В МЕТРАХ\n
        7) Диаметр корпуса в области ЗАДНЕЙ несущей поверхности В МЕТРАХ (часто совпадает с диаметром корпуса в области передней поверхности)\n
        8) Полный размах ПЕРЕДНЕЙ несущей поверхности В МЕТРАХ\n
        9) Полный размах ЗАДНЕЙ несущей поверхности В МЕТРАХ\n
        10) Производную коэффициента подъемной силы по углу атаки для изолированной ПЕРЕДНЕЙ аэродинамической поверхности,
            взятую в связной системе координат: ((C_y1^\\alpha)_из.кр.I). Эту величину можно определить в данном модуле с помощью
            функции C_y1_alpha_kr.\n
        11) Если хотите вернуть производную по углу атаки - коэффициент k_\\alpha\\alpha (малая k, НЕ большая) для ПЕРЕДНЕЙ несущей поверхности.
            Если хотите вернуть производную по углу отклонения рулей - коэффициент k_\\delta 0 (малая k, НЕ большая) для ПЕРЕДНЕЙ поверхности.
            Определить их можно из функции K_koef() в данном модуле. Обратите внимание, что это функция возвращает оба эти коэффициента.\n
        12) Коэффициент K_\\alpha\\alpha для ЗАДНЕЙ несущей поверхности. Этот коэффициент характерезует изменение общей
            нормальной силы несущей поверхности в следствие взаимного влияния консолей и корпуса, не путать с коэффициентом k_\\alpha\\alpha.
            Определить его можно из функции K_koef() в данном модуле. Обратите внимание, что это функция возвращает оба эти коэффициента. \n
        13) Если хотите вернуть производную по углу отклонения рулей, то передайте в этом пункте относительную эффективность
            органов управления n. Если хотите вернуть производную по углу атаки, то передайте число 0.
    """

    if eta_k_I < 1.5:

        if l_k*tg_chi < 1:

            X = [-3.494629993, -3.123903078, -2.704191225, -2.474852652, -2.074066798, -1.65880812, -1.21237721, -0.729207597, -0.203732809, 0.266077276, 0.750360183, 1.188998035, 1.656581532, 1.835821873, 1.923772102, 1.996136215, 2.052914211, 2.144204322, 2.255533726, 2.367976424, 2.507138179, 2.651866405, 2.79659463, 3.02259332, 3.294237066, 3.519122462, 3.843091028, 4.135887361, 4.459855927, 4.811656843, 5.174590701, 5.618795023, 6.073018991, 6.466011788, 6.854551408, 7.245317616, 7.648330059, 8.002357564, 8.5]
            Z = [0.81810201, 0.812044597, 0.805109297, 0.801861118, 0.797647265, 0.793170047, 0.789482925, 0.787200421, 0.785444649, 0.784040032, 0.780616276, 0.774910017, 0.764375384, 0.758581336, 0.755245369, 0.751997191, 0.759108068, 0.770169432, 0.781055219, 0.791326486, 0.803090159, 0.814063735, 0.823369327, 0.836625406, 0.851286103, 0.861645158, 0.875076815, 0.885611448, 0.895268194, 0.904661575, 0.913352647, 0.92195593, 0.928540075, 0.932139408, 0.935475375, 0.937933456, 0.939513651, 0.940128171, 0.940128171]

        if l_k*tg_chi >= 1 and l_k*tg_chi < 3:

            X = [-3.494629993, -3.281990832, -3.066011788, -2.772102161, -2.41918795, -2.139751146, -1.733398821, -1.313686968, -0.995284872, -0.617878193, -0.303929273, -0.014472823, 0.218205632, 0.400785855, 0.672429601, 1.417223314, 2.30340537, 3.340995416, 4.472102161, 5.54643091, 7.123968566, 8.5]
            Z = [0.893863577, 0.888245106, 0.882890001, 0.876832587, 0.869458344, 0.864454394, 0.857694671, 0.851988412, 0.848476868, 0.845667632, 0.844087437, 0.843648494, 0.845053112, 0.847511193, 0.853480818, 0.900359933, 0.942674041, 0.974277939, 0.988324116, 0.994908261, 0.99683961, 1]

        if l_k*tg_chi >= 3:

            X = [-3.494629993, -2.84891945, -2.372429601, -1.825802227, -1.394957433, -1.076555337, -0.701375246, -0.43529797, -0.195939751, 0.042305174, 0.259397511, 0.515455141, 0.789325475, 1.175638507, 1.725605763, 2.858939096, 4.689194499, 8.5]
            Z = [1, 0.993328066, 0.987885173, 0.979106312, 0.970590817, 0.961811957, 0.95031165, 0.944078659, 0.941357212, 0.940128171, 0.941181635, 0.945571065, 0.953296462, 0.979808621, 0.987621807, 0.991396717, 0.995259415, 1]

    if eta_k_I >= 1.5 and eta_k_I <= 5:

        if l_k*tg_chi < 0.33:

            X = [-3.494629993, -3.089390963, -2.646299935, -2.222134905, -1.809102816, -1.389390963, -0.908447937, -0.288343157, 0.427504912, 0.889521938, 1.351538965, 1.65880812, 1.841388343, 1.941584807, 2.015062213, 2.090766208, 2.291159136, 2.526064178, 2.884544859, 3.207400131, 3.643811395, 4.112508186, 4.627963327, 5.061034709, 5.520825147, 5.967256058, 6.434839555, 6.813359528, 7.28762279, 7.696201703, 8.131499673, 8.5]
            Z = [0.776051269, 0.777016943, 0.778421561, 0.778948293, 0.779826179, 0.781318585, 0.78289878, 0.784215609, 0.783337723, 0.774295496, 0.759195856, 0.746203143, 0.735405144, 0.727591959, 0.721271179, 0.723904837, 0.728382056, 0.733386006, 0.739180054, 0.743657273, 0.749187955, 0.752787288, 0.757791239, 0.760951628, 0.763497498, 0.764199807, 0.764989904, 0.764902116, 0.764902116, 0.764112018, 0.762795189, 0.76147836]

        if l_k*tg_chi >= 0.33 and l_k*tg_chi < 1.33:

            X = [-3.494629993, -3.089390963, -2.646299935, -2.222134905, -1.809102816, -1.389390963, -0.908447937, -0.288343157, 0.427504912, 1.162278978, 1.615389653, 2.03064833, 2.241060904, 2.463719712, 2.687491814, 2.762082515, 3.239685658, 3.762933857, 4.148133595, 4.585658153, 5.045448592, 5.634381139, 6.077472168, 6.57400131, 7.142894565, 7.648330059, 8.22167649, 8.5]
            Z = [0.776051269, 0.777016943, 0.778421561, 0.778948293, 0.779826179, 0.781318585, 0.78289878, 0.784215609, 0.783337723, 0.789570714, 0.794486876, 0.801422175, 0.808357475, 0.818189799, 0.83135809, 0.833552805, 0.836713195, 0.83890791, 0.83890791, 0.835835309, 0.830041261, 0.823457115, 0.819155474, 0.81625845, 0.813624792, 0.811605654, 0.810727768, 0.81055219]

        if l_k*tg_chi >= 1.33:

            X = [-3.494629993, -2.984741323, -2.58729535, -2.199869024, -1.770137525, -1.269155206, -0.761493124, -0.508775377, -0.008906352, 0.416371971, 0.794891945, 1.140013098, 1.480681074, 1.861427636, 2.211001965, 2.493778651, 2.649639817, 2.826653569, 3.159528487, 3.532481991, 3.961100196, 4.22383759, 4.55448592, 4.968631303, 5.329338572, 5.6978389, 6.15540275, 6.592927308, 7.047151277, 7.533660773, 7.981204977, 8.5]
            Z = [0.832323764, 0.833465016, 0.834342902, 0.834342902, 0.833377228, 0.830919147, 0.827056448, 0.824686156, 0.823983847, 0.827670968, 0.833903959, 0.843385129, 0.858045826, 0.878500571, 0.89992099, 0.922043719, 0.934334123, 0.941269423, 0.953735405, 0.966201387, 0.977262751, 0.968308314, 0.957071372, 0.944693179, 0.935124221, 0.926696515, 0.917127557, 0.908699851, 0.901237819, 0.894478097, 0.888508472, 0.882363269]

    if eta_k_I > 5:

        if l_k*tg_chi < 1:

            X = [-3.494629993, -3.194040602, -2.933529797, -2.720890635, -2.500458415, -2.115258677, -1.622069417, -1.186771447, -0.783759005, -0.349574329, -0.090176817, 0.252717747, 0.60897184, 0.916240995, 1.224623445, 1.47956778, 1.784610347, 1.938244925, 2.244400786, 2.573935822, 3.000327439, 3.318729535, 3.720628684, 4.064636542, 4.607924034, 5.030975769, 5.58762279, 6.127570399, 6.633005894, 7.097249509, 7.590438769, 8.082514735, 8.5]
            Z = [0.712053375, 0.723026951, 0.731981389, 0.738653323, 0.745325257, 0.754279694, 0.762970766, 0.770608375, 0.776665789, 0.782108682, 0.783425511, 0.778948293, 0.768677026, 0.755245369, 0.736985339, 0.719427618, 0.689842858, 0.670792731, 0.656219823, 0.644982881, 0.630673339, 0.621631112, 0.612764463, 0.60539022, 0.596435783, 0.589763849, 0.58274076, 0.577210078, 0.572381705, 0.569045738, 0.566236503, 0.56325169, 0.561847072]

        if l_k*tg_chi >= 1:

            X = [-3.494629993, -3.104977079, -2.786574984, -2.375769483, -1.944924689, -1.428356254, -0.936280288, -0.517681729, -0.06345776, 0.399672561, 1.026457105, 1.695546824, 2.139751146, 2.661886051, 3.229666012, 3.78297315, 3.980026195, 4.138113949, 4.383038638, 4.684741323, 4.914079895, 5.399476097, 5.81362148, 6.159855927, 6.629666012, 6.980353635, 7.404518664, 7.898821218, 8.284020956, 8.5]
            Z = [0.73944342, 0.749714687, 0.756298832, 0.764287595, 0.770608375, 0.775787903, 0.779913967, 0.783425511, 0.784654552, 0.783425511, 0.783425511, 0.784654552, 0.784654552, 0.785269072, 0.785356861, 0.785356861, 0.785356861, 0.772890879, 0.758669125, 0.743393907, 0.733034852, 0.715652708, 0.703450092, 0.6941445, 0.684751119, 0.678342551, 0.671319463, 0.663242911, 0.659468001, 0.656746554]

    if m >= 1:

        zz = np.interp((((m**2 - 1)**(1/2))*l_k), X, Z)
            
    if m < 1:

        zz = np.interp(-(((1 - m**2)**(1/2))*l_k), X, Z)

    z = 0.5*(d_I + zz*(l_I - d_I))

    X.clear(), Z.clear()
    if 1/eta_k_II < 0.25:

        if d_II/l_II < 0.1:

            Z = [0, 0.20, 0.40, 0.60, 0.70, 0.80, 1.00, 1.20, 1.40, 1.60, 1.80, 2.00, 2.20, 2.40, 2.60, 2.80, 3.00]
            I = [0, 2.00, 3.00, 4.00, 4.50, 4.00, 2.60, 1.98, 1.60, 1.40, 1.25, 1.08, 0.96, 0.88, 0.80, 0.77, 0.75]

        if d_II/l_II >= 0.1 and d_II/l_II < 0.3:

            Z = [0, 0.20, 0.40, 0.60, 0.80, 1.00, 1.20, 1.40, 1.60, 1.80, 2.00, 2.20, 2.40, 2.60, 2.80, 3.00]
            I = [0, 0.20, 2.50, 3.50, 5.00, 3.00, 2.05, 1.70, 1.45, 1.28, 1.15, 1.00, 0.92, 0.84, 0.79, 0.77]

        if d_II/l_II >= 0.3 and d_II/l_II < 0.5:

            Z = [0, 0.20, 0.40, 0.60, 0.80, 1.00, 1.20, 1.40, 1.60, 1.80, 2.00, 2.20, 2.40, 2.60, 2.80, 3.00]
            I = [0, 0.00, 0.80, 3.00, 4.50, 3.00, 2.00, 1.53, 1.35, 1.20, 0.98, 0.82, 0.78, 0.71, 0.65, 0.60]

        if d_II/l_II >= 0.5:

            Z = [0, 0.20, 0.40, 0.60, 0.80, 0.90, 1.00, 1.20, 1.40, 1.60, 1.80, 2.00, 2.20, 2.40, 2.60, 2.80, 3.00]
            I = [0, 0.00, 0.00, 0.00, 3.00, 4.00, 2.50, 1.60, 1.25, 1.02, 0.88, 0.78, 0.70, 0.61, 0.59, 0.58, 0.56]

    if 1/eta_k_II >= 0.25 and 1/eta_k_II < 0.75:

        if d_II/l_II < 0.1:

            Z = [0, 0.20, 0.40, 0.60, 0.80, 1.00, 1.20, 1.40, 1.60, 1.80, 2.00, 2.20, 2.40, 2.60, 2.80, 3.00]
            I = [0, 0.80, 1.50, 2.05, 2.55, 3.20, 2.25, 1.75, 1.45, 1.30, 1.10, 0.98, 0.90, 0.81, 0.78, 0.76]

        if d_II/l_II >= 0.1 and d_II/l_II < 0.3:

            Z = [0, 0.20, 0.40, 0.60, 0.80, 1.00, 1.20, 1.40, 1.60, 1.80, 2.00, 2.20, 2.40, 2.60, 2.80, 3.00]
            I = [0, 0.20, 1.25, 2.02, 2.60, 3.50, 2.25, 1.75, 1.45, 1.25, 1.10, 0.98, 0.88, 0.80, 0.77, 0.73]

        if d_II/l_II >= 0.3 and d_II/l_II < 0.5:

            Z = [0, 0.20, 0.40, 0.60, 0.80, 1.00, 1.20, 1.40, 1.60, 1.80, 2.00, 2.20, 2.40, 2.60, 2.80, 3.00]
            I = [0, 0.00, 0.20, 1.50, 2.50, 3.30, 2.00, 1.50, 1.33, 1.17, 1.00, 0.91, 0.82, 0.78, 0.73, 0.70]

        if d_II/l_II >= 0.5:

            Z = [0, 0.20, 0.40, 0.60, 0.80, 1.00, 1.20, 1.40, 1.60, 1.80, 2.00, 2.20, 2.40, 2.60, 2.80, 3.00]
            I = [0, 0.00, 0.00, 0.20, 2.00, 3.30, 1.75, 1.25, 1.00, 0.88, 0.75, 0.68, 0.60, 0.56, 0.52, 0.50]

    if 1/eta_k_II >= 0.75:

        if d_II/l_II < 0.1:

            Z = [0, 0.20, 0.40, 0.60, 0.80, 1.00, 1.20, 1.40, 1.60, 1.80, 2.00, 2.20, 2.40, 2.60, 2.80, 3.00]
            I = [0, 0.40, 0.80, 1.50, 2.25, 3.50, 2.50, 1.80, 1.48, 1.30, 1.17, 0.98, 0.90, 0.80, 0.78, 0.76]

        if d_II/l_II >= 0.1 and d_II/l_II < 0.3:

            Z = [0, 0.20, 0.40, 0.60, 0.80, 1.00, 1.20, 1.40, 1.60, 1.80, 2.00, 2.20, 2.40, 2.60, 2.80, 3.00]
            I = [0, 0.18, 0.60, 1.25, 2.10, 3.50, 2.25, 1.75, 1.48, 1.25, 1.15, 0.95, 0.85, 0.79, 0.77, 0.75]

        if d_II/l_II >= 0.3 and d_II/l_II < 0.5:

            Z = [0, 0.20, 0.40, 0.60, 0.80, 1.00, 1.20, 1.40, 1.60, 1.80, 2.00, 2.20, 2.40, 2.60, 2.80, 3.00]
            I = [0, 0.00, 0.00, 0.80, 1.80, 3.50, 2.20, 1.55, 1.30, 1.10, 0.95, 0.81, 0.73, 0.65, 0.59, 0.58]

        if d_II/l_II >= 0.5:

            Z = [0, 0.20, 0.40, 0.60, 0.80, 1.00, 1.20, 1.40, 1.60, 1.80, 2.00, 2.20, 2.40, 2.60, 2.80, 3.00]
            I = [0, 0.00, 0.00, 0.50, 1.50, 3.00, 1.75, 1.25, 0.80, 0.83, 0.73, 0.64, 0.58, 0.54, 0.49, 0.47]

    i = np.interp((2*z/l_II), Z, I)

    I.clear(), Z.clear()
    
    if n == 0:
        return (57.3/(2*np.pi)) * (i/zz) * (l_I/l_II) * (c_y_kr/l_k) * (k/K)
    
    return (57.3/(2*np.pi)) * (i/zz) * (l_I/l_II) * (c_y_kr/l_k) * (k*n/K)

def K_T(m, l, form, b, x, otn):
    
    """
    Функция возвращает коэффициенты торможения потока в областях передней и задней несущих поверхностей, по
    которым определяется число Маха на передней и задней несущих поверхностях. Расчет в главе 1.5 стр. 173 ДПБЛА.\n
    В качестве аргументов функция требует:
        1) Число Маха.\n
        2) Удлинение носовой части.\n
        3) Форма головной части в качестве строки.\n
        4) Длина САХ консоли в метрах\n
        5) Расстояние между концом САХ передней поверхности и серединой бортовой хорды задней повехрности\n
        6) Отношение площадей поверхностей консолей задней и нижней: S_II / S_I


    Форма головной части может быть одна из следующих строк:
        1) "Коническая".\n
        2) "Параболическая" (Имеется ввиду заостренная параболическая).\n
        3) "Плоская".\n
        4) "Эллиптическая" (при удлинении - 0.5 выраждается в полусферическую головную часть).\n
    
    БУДЬТЕ ВНИМАТЕЛЬНЫ, ФУНКЦИЯ ВОЗВРАЩАЕТ ДВА ЗНАЧЕНИЯ СРАЗУ: k_T_(I), k_T_(II)\n

    Пример вызова функции: K_T(..., "Коническая", ...)\n
    При удлинении меньше 2 погрешность коэффициента может составлять до 10%, особенно для конуса.
    Во избежании этого, старайтесь выбирать удлинение из ряда значений (1.5, 2, 2.5, 3, 4, 5).
    Данная функция не предназначена для расчета при числах Маха больше 5 из-за
    того, что влияние пограничного слоя не учитывается, а на гиперзвуковых скоростях его влияние существенно.
    Но расчет в первом приближении провести можно.
    Данная функция не вернет коэффициент торможения потока при сложной головной части, об этом смотри на стр. 173-175, 213-215 в ДПБЛА
    """

    a = C_x_nos(m, l, form)

    lamb = [1.5, 2, 2.5, 3, 4, 5]
    best_lamb = 0
    minim = 99

    for i in lamb:
        if abs(C_x_nos(m, i, "Коническая") - a) < minim:
            minim = abs(C_x_nos(m, i, "Коническая") - a)
            best_lamb = i
    if minim > 0.16:
        best_lamb = 1
    if minim > 0.45:
        best_lamb = 0.6
    
    if m < 2.5:
        L = [0.60, 1.00, 1.50, 2.00, 2.50, 3.00, 4.00, 5.00]
        X = [0.92, 0.97, 0.98, 0.985, 0.99, 0.995, 0.997, 0.998]

    if m >= 2.5 and m < 3.5:
        L = [0.60, 1.00, 1.50, 2.00, 2.50, 3.00, 4.00, 5.00]
        X = [0.77, 0.92, 0.96, 0.97, 0.985, 0.99, 0.993, 0.996]

    if m >= 3.5 and m < 4.5:
        L = [0.60, 1.00, 1.50, 2.00, 2.50, 3.00, 4.00, 5.00]
        X = [0.65, 0.85, 0.94, 0.97, 0.98, 0.987, 0.99, 0.994]

    if m >= 4.5 and m < 5.5:
        L = [0.60, 1.00, 1.50, 2.00, 2.50, 3.00, 4.00, 5.00]
        X = [0.50, 0.75, 0.90, 0.95, 0.97, 0.98, 0.987, 0.99]

    if m >= 5.5 and m < 6.5:
        L = [0.60, 1.00, 1.50, 2.00, 2.50, 3.00, 4.00, 5.00]
        X = [0.33, 0.64, 0.85, 0.92, 0.95, 0.97, 0.981, 0.987]

    if m >= 6.5:
        L = [0.60, 1.00, 1.50, 2.00, 2.50, 3.00, 4.00, 5.00]
        X = [0.14, 0.51, 0.78, 0.87, 0.92, 0.95, 0.971, 0.98]

    kk1 = np.interp(best_lamb, L, X)
    X.clear(), L.clear()
    c = x/b

    if c < 0.05:

        M = [0, 0.370146678, 0.538136324, 0.698533218, 0.788697153, 0.855133736, 0.911130285, 0.954788611, 0.991803279, 1.031665229, 1.085763589, 1.156945643, 1.240465919, 1.352459016, 1.470146678, 1.609663503, 1.750129422, 1.923813632, 2.125970664, 2.352804142, 2.561604832, 2.789387403, 3.099741156, 3.443313201, 3.702415876, 3.949180328, 4.31553063, 4.734081104, 5.5]
        X = [0.970421221, 0.970421221, 0.968368435, 0.962769928, 0.957637963, 0.950359904, 0.94093575, 0.926752866, 0.908464409, 0.88616369, 0.868808318, 0.843708344, 0.823273794, 0.800879765, 0.782964543, 0.764862703, 0.749653426, 0.735657158, 0.722593975, 0.711396961, 0.701972807, 0.695067982, 0.687230072, 0.680605172, 0.675566516, 0.673140496, 0.670527859, 0.668475073, 0.66744868]

    if c >= 0.05 and c < 0.15:

        M = [0, 0.436583261, 0.623554789, 0.74124245, 0.894995686, 0.979465056, 1.062036238, 1.161691113, 1.273684211, 1.534685073, 2.049094047, 2.746678171, 3.728990509, 4.769197584, 5.5]
        X = [0.973593708, 0.973593708, 0.971447614, 0.967808584, 0.95605172, 0.940655825, 0.914809384, 0.884670754, 0.857611304, 0.817115436, 0.773913623, 0.741908824, 0.722780592, 0.714662757, 0.713076513]

    if c >= 0.15 and c < 0.3:

        M = [0, 0.340724763, 0.548576359, 0.724158758, 0.882657463, 0.978515962, 1.045901639, 1.142709232, 1.230025884, 1.342968076, 1.505263158, 1.67230371, 1.917169974, 2.206643658, 2.497066437, 2.837791199, 3.234512511, 3.751768766, 4.169370147, 4.585073339, 5.058671268, 5.5]
        X = [0.979472141, 0.979472141, 0.978072514, 0.973313783, 0.963889629, 0.950733138, 0.937296721, 0.913969608, 0.895587843, 0.87832578, 0.85901093, 0.843801653, 0.82709944, 0.816182351, 0.808997601, 0.80302586, 0.798733671, 0.793881632, 0.790895761, 0.789216209, 0.787723274, 0.787723274]

    if c >= 0.3 and c < 0.5:

        M = [0, 0.32364107, 0.594132873, 0.894995686, 1.063934426, 1.197756687, 1.284124245, 1.430284728, 1.614408973, 1.895340811, 2.236065574, 2.512251941, 2.813114754, 3.29050906, 3.705263158, 4.119068162, 4.512942192, 5.044434858, 5.5]
        X = [0.982084777, 0.982084777, 0.980591842, 0.971167689, 0.957544655, 0.938789656, 0.927312717, 0.911916822, 0.898387097, 0.883924287, 0.873007198, 0.866755532, 0.862836577, 0.858171154, 0.855091975, 0.85238603, 0.851266329, 0.850053319, 0.849306852]

    if c >= 0.5 and c < 0.7:

        M = [0, 0.570405522, 0.8608283, 1.136065574, 1.320189819, 1.492924935, 1.680845557, 2.007333909, 2.311044003, 2.631837791, 2.942191544, 3.3797239, 3.853321829, 4.288955997, 4.869801553, 5.5]
        X = [0.984510797, 0.983671021, 0.97648627, 0.957171421, 0.941122367, 0.928525726, 0.916955479, 0.902679286, 0.895027993, 0.889522794, 0.886070381, 0.883551053, 0.881031725, 0.88009864, 0.88009864, 0.880565183]

    if c >= 0.7:

        M = [0, 0.502070751, 0.713718723, 0.951941329, 1.178774806, 1.404659189, 1.715012942, 1.988352028, 2.332873167, 2.677394305, 3.156686799, 3.625539258, 4.122864538, 4.746419327, 5.5]
        X = [0.986003732, 0.986656891, 0.983484404, 0.973873634, 0.958197814, 0.9403759, 0.926472941, 0.917888563, 0.911170355, 0.906318315, 0.902772594, 0.900533191, 0.898573714, 0.89698747, 0.896800853]

    kk2 = (np.interp(m, M, X) + otn) / (1 + otn)

    return kk1, kk1*kk2

def N_1(l_k, l_r, eta_k):
    
    """
    Функция предназначена для определения коэффициента n_1, характеризующего относительную эффективность концевых рулей.
    График 3.25 в ДПБЛА.
    В качестве аргументов требует:
        1) Размах консоли всего оперения (от корпуса и до края вместе с рулем) (см. рис 3.25 в ДПБЛА)\n
        2) Размах руля (см. там же)\n
        3) Сужение консоли оперения (если бесконечно - передайте 99)
    """

    if eta_k < 2.5:

        OTN = [0, 0.062057017, 0.107575996, 0.166955426, 0.231847535, 0.296897149, 0.37722476, 0.476452985, 0.570641046, 0.667979209, 0.744369192, 0.842967396, 0.917152307, 0.968026461, 1]
        N = [0, 0.03656049, 0.067785972, 0.111878236, 0.164757571, 0.221088969, 0.292954652, 0.390553899, 0.48768241, 0.595480935, 0.6841362, 0.803860035, 0.897536482, 0.959045975, 1]

    if eta_k >= 2.5 and eta_k < 10:

        OTN = [0, 0.069302252, 0.133564341, 0.204126634, 0.268703733, 0.355016538, 0.41077335, 0.47661049, 0.522286974, 0.581823909, 0.649078595, 0.699480233, 0.742006615, 0.784690502, 0.818081588, 0.859190424, 0.911167113, 0.944243188, 0.988502126, 1]
        N = [0, 0.027459595, 0.059940373, 0.101678958, 0.145300486, 0.214341754, 0.263455202, 0.325121607, 0.374548878, 0.439196611, 0.517966421, 0.579789738, 0.634552016, 0.69056959, 0.73670171, 0.795072964, 0.867095559, 0.918405774, 0.983367331, 1]

    if eta_k >= 10:

        OTN = [0, 0.069617263, 0.124114034, 0.194203812, 0.254213262, 0.303039849, 0.355174043, 0.39108521, 0.428886439, 0.471097811, 0.502126319, 0.546070247, 0.58954166, 0.631910537, 0.666404158, 0.700897779, 0.734288864, 0.771932588, 0.813513939, 0.848637581, 0.886123799, 0.917152307, 0.950858403, 1]
        N = [0, 0.018358701, 0.039227993, 0.071394947, 0.105758669, 0.137454888, 0.176525969, 0.208222187, 0.240859878, 0.28165699, 0.313510121, 0.36199592, 0.413933783, 0.463988702, 0.507924055, 0.552957791, 0.597834615, 0.650400126, 0.711281971, 0.763219834, 0.822218735, 0.872587478, 0.926879021, 1]

    return np.interp(l_r/l_k, OTN, N)

def N_2(b, b_r, l_k, m):

    """
    Функция предназначена для определения коэффициента n_1, характеризующего относительную эффективность концевых рулей.
    График 3.28 в ДПБЛА. Обращаю внимание, что этот коэффициент находится для дозвукового потока. Сверхзвук смотри на стр.182
    и пользуйтесь функцией C_koef
    В качестве аргументов требует:
        1) Хорда оперения (любая) (см. рис 3.28 в ДПБЛА)\n
        2) Хорда руля (ТА ЖЕ ХОРДА, КОТОРУЮ ВЫ ИСПОЛЬЗОВАЛИ ДЛЯ ОПЕРЕНИЯ В ПЕРВОМ АРГУМЕНТЕ. Если вы передали в первый аргумент
        для оперения концевую хорду, то и сюда тоже передайте концевую)\n
        3) Удлинение консоли оперения
        4) Число Маха
    """

    if l_k*((1 - m**2)**(1/2)) < 1.5:

        OTN = [0, 0.011570827, 0.028751753, 0.056276297, 0.107906732, 0.138586957, 0.172247546, 0.222387798, 0.275157784, 0.326875877, 0.376139551, 0.426279804, 0.466690042, 0.5]
        N = [0, 0.126777756, 0.220248014, 0.330633598, 0.461770975, 0.52542143, 0.582794032, 0.64906026, 0.710094943, 0.759445844, 0.801821352, 0.84088355, 0.870005813, 0.88151521]

    if l_k*((1 - m**2)**(1/2)) >= 1.5 and l_k*((1 - m**2)**(1/2)) < 3:

        OTN = [0, 0.013323983, 0.025157784, 0.043565919, 0.082047686, 0.103962132, 0.129382889, 0.165059607, 0.199509116, 0.245003506, 0.284449509, 0.326875877, 0.37657784, 0.421370968, 0.466953015, 0.5]
        N = [0, 0.099573726, 0.167932571, 0.234896338, 0.333074985, 0.391668281, 0.441193567, 0.503623329, 0.555938772, 0.615752761, 0.664057353, 0.708699864, 0.758050765, 0.798159271, 0.836000775, 0.857798876]

    if l_k*((1 - m**2)**(1/2)) >= 3:

        OTN = [0, 0.013148668, 0.031206171, 0.054698457, 0.086693548, 0.126840813, 0.169091865, 0.222124825, 0.287254558, 0.353523843, 0.40506662, 0.44977209, 0.480189341, 0.5]
        N = [0, 0.066614997, 0.137240845, 0.211005619, 0.297849254, 0.384692889, 0.459329587, 0.537802751, 0.619937997, 0.693877156, 0.745146289, 0.786824259, 0.809668669, 0.819608603]

    return np.interp(b_r/b, OTN, N)

def C_koef(m):

    """
    Функция возвращает коэффициентЫ (две штуки) C_1 и C_2 соответственно, определяющие давление на поверхности профиля по теории 2-ого приближения
    В ДПБЛА см. график 3.29 на стр. 183. Функция предназначена для сверхзвуковых скоростей, для до- и трансзвука применяйте функции N_1 и N_2
    В качестве аргументов функция принимает число Маха.

    Из-за того, что функция возвращает и коэффициент С_1, и С_2, правильно использовать ее так: c1, c2 = C_koef(M).
    """

    M1 = [1.4, 1.500924214, 1.640295749, 1.794085028, 1.974787431, 2.167504621, 2.359260628, 2.584177449, 2.835046211, 3.050831793, 3.368502773, 3.640998152, 3.891866913, 4]
    C_1 = [2, 1.779816514, 1.528807339, 1.318409786, 1.15058104, 1.024342508, 0.917186544, 0.816391437, 0.724892966, 0.668623853, 0.588379205, 0.532110092, 0.495902141, 0.482691131]
    M2 = [1.4, 1.439889094, 1.478336414, 1.530720887, 1.580221811, 1.640295749, 1.707578558, 1.765249538, 1.842624769, 1.964214418, 2.123770795, 2.282365989, 2.421737523, 2.60676525, 2.806691312, 3.018151571, 3.20077634, 3.451645102, 3.639556377, 3.838040665, 4]
    C_2 = [2.836207951, 2.582752294, 2.381651376, 2.173700306, 2.019082569, 1.862507645, 1.725993884, 1.650642202, 1.571865443, 1.490152905, 1.425565749, 1.377125382, 1.343363914, 1.312538226, 1.288562691, 1.270948012, 1.258715596, 1.246972477, 1.242079511, 1.238165138, 1.235229358]

    return np.interp(m, M1, C_1), np.interp(m, M2, C_2)

def C_x_cil(m, a):

    """
    Функция предназначена для расчета коэффициента C_(x цил)^*, который используется для
    определения подъемной силы на больших углах атаки (> 10 градусов). График на рис 3.32 стр. 187 в ДПБЛА
    В качестве аргумента принимает:
        1) число Маха
        2) Угол атаки !!!В ГРАДУСАХ!!!

    Применимо до углов атаки 30...35 градусов
    """

    M = [0, 0.041912098, 0.107838695, 0.171952877, 0.223833258, 0.263932941, 0.30720435, 0.341866787, 0.372224739, 0.398957861, 0.42048029, 0.441323063, 0.466470322, 0.481422746, 0.491164477, 0.511554146, 0.53851382, 0.562075215, 0.583597644, 0.607612143, 0.633212506, 0.671273222, 0.709787041, 0.748980517, 0.799501586, 0.845944721, 0.887403715, 0.951064794, 1.021295877, 1.0903942, 1.14816493, 1.22292705, 1.299728138, 1.362936112, 1.430448573, 1.536927957, 1.626642501, 1.739691889, 1.836882646, 1.908246488, 2]
    C = [0.461146497, 0.463906582, 0.474522293, 0.492569002, 0.51507431, 0.540339703, 0.576433121, 0.618683652, 0.671762208, 0.739278132, 0.812101911, 0.89447983, 0.988322718, 1.050106157, 1.079830149, 1.132908705, 1.193630573, 1.236730361, 1.267728238, 1.298301486, 1.322292994, 1.350106157, 1.370488323, 1.385350318, 1.397664544, 1.402972399, 1.402972399, 1.396815287, 1.385350318, 1.375796178, 1.368577495, 1.35626327, 1.34522293, 1.336942675, 1.327388535, 1.313163482, 1.302760085, 1.291932059, 1.284288747, 1.280467091, 1.277494692]

    return np.intepr(m * np.sin((a/180)*np.pi), M, C)

# Окончание параметров, относящихся к подъемной силе

# Вопросы статической устойчивости, управляемости и т.д.

def F_koef(d, L, l_k):

    """
    Функция возвращает значение коэффициент f_1 на рис. 5.11 в ДПБЛА, необходимый для
    расчета фокуса несущей повехрности.
    В качестве аргументов принимает:
        1) Диаметр миделя корпуса. \n
        2) Длину корпуса летательного аппарата\n
        3) Размах консоли несущей поверхности.
    """

    D = [0, 0.011712306, 0.024084461, 0.037776311, 0.058066645, 0.07934675, 0.091883867, 0.107225338, 0.124711316, 0.143681953, 0.16991092, 0.187396899, 0.203233256, 0.224678324, 0.247113164, 0.274166942, 0.31012867, 0.338667107, 0.379247773, 0.438634114, 0.480039591, 0.530023095, 0.577202243, 0.625041241, 0.67551963, 0.740514682, 0.797756516, 0.845760475, 0.887495876, 0.934345101, 0.965852854, 1]
    F = [0.012087497, 0.016964623, 0.021436673, 0.02447475, 0.027285984, 0.029667837, 0.030567108, 0.031352957, 0.032033486, 0.032568188, 0.033005671, 0.033167702, 0.033248717, 0.0331596, 0.032932757, 0.032365649, 0.031458277, 0.030648123, 0.029384283, 0.027132055, 0.025187686, 0.022724818, 0.020326762, 0.017969214, 0.015449635, 0.012281934, 0.009470699, 0.007226573, 0.005144477, 0.003013773, 0.001555496, 0]

    return (np.interp(d/L, D, F))*(l_k/2)

def X_F_kr(m, l_k, tg_chi, eta_k):

    """
    Функция возвращает безразмерное положение фокуса изолированных крыльев.
    Графики на рис. 5.8 в ДПБЛА.
    В качестве аргументов принимает:
        1) Число Маха.
        2) Удлинение консоли несущей поверхности.\n
        3) Тангенс среднего угла стреловидности несущей поверхности.\n
        4) Сужение консолей несущей поверхности (передайте число 99, если бесконечно).
    """

    if l_k*tg_chi <= 0.5:

        if eta_k <= 2:

            OTN = [-3.981260504, -3.496890756, -2.995882353, -2.497647059, -1.993865546, -1.674957983, -1.350504202, -1.023277311, -0.852268908, -0.747815126, -0.644285714, -0.555546218, -0.487142857, -0.40487395, -0.324453782, -0.223697479, -0.101680672, 0.033277311, 0.195966387, 0.36605042, 0.537983193, 0.776470588, 0.977058824, 1.244201681, 1.477142857, 1.719327731, 1.912521008, 2.116806723, 2.351596639, 2.624285714, 2.985714286, 3.44512605, 4.160588235, 4.812268908, 5.268907563, 5.5]
            X = [0.229568106, 0.230137636, 0.227764594, 0.221594684, 0.210963455, 0.200332226, 0.184385382, 0.163882297, 0.150498339, 0.143569056, 0.139107736, 0.137304224, 0.137968676, 0.141860465, 0.14774561, 0.158092074, 0.173184623, 0.193023256, 0.220360702, 0.248742288, 0.275794969, 0.309682012, 0.337114381, 0.367109635, 0.390175605, 0.408495491, 0.419411486, 0.42918842, 0.436592311, 0.440863787, 0.445989559, 0.450450878, 0.45671571, 0.461651637, 0.463265306, 0.463265306]

        if eta_k > 2 and eta_k <= 4:

            OTN = [-3.981260504, -3.276890756, -2.636302521, -2.060420168, -1.568655462, -1.192436975, -1.040840336, -0.87907563, -0.740420168, -0.620252101, -0.518571429, -0.400252101, -0.246806723, -0.077647059, 0.097983193, 0.324453782, 0.539831933, 0.804201681, 1.104621849, 1.395798319, 1.625966387, 1.925462185, 2.360840336, 3.131764706, 3.907310924, 4.867731092, 5.5]
            X = [0.24608448, 0.244660655, 0.239819649, 0.231941149, 0.220550546, 0.207451353, 0.200901756, 0.196820123, 0.193877551, 0.194542003, 0.198433792, 0.210204082, 0.23089701, 0.255007119, 0.279876602, 0.308163265, 0.333222591, 0.357807309, 0.3831514, 0.404793545, 0.417797817, 0.431846227, 0.442952065, 0.452634077, 0.459373517, 0.462885619, 0.462885619]

        if eta_k > 4 and eta_k <= 20:

            OTN = [-3.981260504, -3.443277311, -2.995882353, -2.465294118, -1.948571429, -1.428151261, -1.094453782, -0.946554622, -0.817142857, -0.711764706, -0.58512605, -0.484369748, -0.350336134, -0.198739496, -0.024033613, 0.162689076, 0.47697479, 0.817142857, 1.113865546, 1.522436975, 2.171344538, 3.063361345, 3.917478992, 5.120084034, 5.5]
            X = [0.252349312, 0.255196963, 0.255196963, 0.25339345, 0.248647366, 0.239534884, 0.231656383, 0.229852871, 0.230422402, 0.232510679, 0.23877551, 0.24551495, 0.259278595, 0.277693403, 0.298576175, 0.320028477, 0.350688182, 0.378785002, 0.399477931, 0.421689606, 0.444091125, 0.45785477, 0.465068818, 0.468011391, 0.466967252]

        if eta_k > 20:

            OTN = [-3.981260504, -3.44789916, -2.852605042, -2.278571429, -1.705462185, -1.271008403, -1.084285714, -0.973361345, -0.859663866, -0.754285714, -0.574033613, -0.450168067, -0.234789916, 0.031428571, 0.289327731, 0.562016807, 0.861512605, 1.118487395, 1.287647059, 1.604705882, 1.933781513, 2.167647059, 2.483781513, 2.930252101, 3.459915966, 3.998823529, 4.615378151, 5.5]
            X = [0.25956336, 0.263550071, 0.265258662, 0.264689131, 0.260607499, 0.255007119, 0.251400095, 0.250925486, 0.251969625, 0.255671571, 0.267157095, 0.278927385, 0.302183199, 0.331039393, 0.354674893, 0.376506882, 0.398054105, 0.412956811, 0.422069293, 0.434409112, 0.44380636, 0.449501661, 0.454532511, 0.460037969, 0.464784053, 0.468391077, 0.470479355, 0.469625059]

    if l_k*tg_chi > 0.5 and l_k*tg_chi <= 1.5:
        
        if eta_k <= 2:

            OTN = [-4.021078735, -3.523558586, -3.024178549, -2.518288903, -1.958462492, -1.46466212, -1.101983881, -0.96900186, -0.856478611, -0.716057037, -0.571915685, -0.438933664, -0.265034098, -0.078115313, 0.091134532, 0.270613763, 0.491010539, 0.757904526, 1.00433974, 1.275883447, 1.655300682, 2.22349659, 3.217606944, 4.426534408, 5.424364538, 6]
            X = [0.220047562, 0.218810939, 0.215862069, 0.209108205, 0.197502973, 0.184470868, 0.171914388, 0.167919144, 0.166206897, 0.165350773, 0.165350773, 0.169821641, 0.180856124, 0.199785969, 0.225850178, 0.255814507, 0.28587396, 0.318882283, 0.345897741, 0.370820452, 0.397265161, 0.419429251, 0.438834721, 0.450725327, 0.45548157, 0.454625446]

        if eta_k > 2 and eta_k <= 4:

            OTN = [-4.021078735, -3.454742715, -2.841909485, -2.371357719, -2.001239926, -1.548357099, -1.25449473, -0.963422195, -0.72349659, -0.506819591, -0.199938004, 0.122752635, 0.385926844, 0.640731556, 0.925294482, 1.344699318, 1.74550527, 2.120272784, 2.453192808, 3.910415375, 5.278363298, 6]
            X = [0.251629013, 0.255148633, 0.257146254, 0.257146254, 0.256004756, 0.252390012, 0.250677765, 0.252675386, 0.261331748, 0.273317479, 0.296813317, 0.328775268, 0.351890606, 0.370059453, 0.387657551, 0.408870392, 0.424661118, 0.436456599, 0.444066587, 0.455957194, 0.463567182, 0.463567182]

        if eta_k > 4 and eta_k <= 20:

            OTN = [-4.011779293, -3.535647861, -3.025108493, -2.506199628, -2.009609423, -1.513019219, -0.996900186, -0.520768754, -0.119962802, 0.270613763, 0.693738376, 1.048047117, 1.30099194, 1.601363918, 2.475511469, 3.290142591, 4.844079355, 5.774953503, 6]
            X = [0.274268728, 0.272175981, 0.273222354, 0.277883472, 0.284542212, 0.297288942, 0.31469679, 0.339143876, 0.366730083, 0.39117717, 0.411629013, 0.424375743, 0.431414982, 0.436456599, 0.445778835, 0.454149822, 0.464423306, 0.466611177, 0.466611177]

        if eta_k > 20:

            OTN = [-4.021078735, -3.532858029, -3.026038438, -2.491320521, -2.0133292, -1.505579665, -0.996900186, -0.501239926, -0.168319901, 0.135771854, 0.506819591, 0.918784873, 1.344699318, 1.583694978, 1.822690639, 2.295102294, 2.76100434, 3.216676999, 3.716986981, 4.314011159, 4.858958462, 5.408555487, 5.861438314, 6]
            X = [0.281973841, 0.283210464, 0.287681332, 0.296052319, 0.305184304, 0.321736029, 0.344280618, 0.373864447, 0.393365042, 0.406492271, 0.421426873, 0.433412604, 0.442639715, 0.446254459, 0.448537455, 0.450059453, 0.453674197, 0.457098692, 0.460237812, 0.464423306, 0.467181926, 0.468799049, 0.468799049, 0.468799049]

    if l_k*tg_chi > 1.5 and l_k*tg_chi <= 2.5:
        
        if eta_k <= 2:

            OTN = [-3.996614864, -3.503615941, -3.007847361, -2.501923373, -2.011694107, -1.497461148, -1.239883059, -1.018310509, -0.769041391, -0.552084936, -0.426527158, -0.211417141, 0.070164641, 0.417294968, 0.645330051, 0.953685182, 1.361747961, 1.871364825, 2.562855824, 3.354977689, 4.347438067, 5.40729343, 6]
            X = [0.211599339, 0.214623199, 0.214623199, 0.210937869, 0.205740609, 0.198653437, 0.19383416, 0.192511221, 0.19685802, 0.207630522, 0.21783605, 0.245806756, 0.281337113, 0.322442712, 0.348712497, 0.379329081, 0.413347508, 0.442546657, 0.460595322, 0.468627451, 0.47146232, 0.473068746, 0.473068746]

        if eta_k > 2 and eta_k <= 4:

            OTN = [-3.996614864, -3.468533621, -3.014309894, -2.510232343, -2.003385136, -1.507616556, -1.246345592, -1.012771196, -0.737651946, -0.501307894, 0, 0.238190491, 0.492075704, 0.857670411, 1.064471457, 1.358055085, 1.661794122, 2.010770888, 3.386367133, 5.30943222, 6]
            X = [0.278029766, 0.278029766, 0.279258209, 0.282282069, 0.287951807, 0.295605953, 0.302882117, 0.312520671, 0.327734467, 0.345121663, 0.386132766, 0.404937397, 0.422797071, 0.443491614, 0.452846681, 0.464564139, 0.472879754, 0.478077014, 0.482329317, 0.482329317, 0.482329317]

        if eta_k > 4 and eta_k <= 20:

            OTN = [-3.996614864, -3.503615941, -3.014309894, -2.492691183, -1.998769041, -1.494691491, -1.002615787, -0.489306047, 0, 0.492075704, 0.765348515, 0.99153716, 1.538082782, 2.337590399, 3.491614094, 4.313278966, 5.365748577, 6]
            X = [0.30713442, 0.309591306, 0.314599575, 0.323009686, 0.334727144, 0.350507914, 0.372714387, 0.401535554, 0.433664068, 0.458138436, 0.467587999, 0.474013702, 0.479210961, 0.483841247, 0.485636664, 0.483746752, 0.483935743, 0.483935743]

        if eta_k > 20:

            OTN = [-3.996614864, -3.511001693, -3.001384828, -2.502846592, -1.998769041, -1.494691491, -0.996153254, -0.503154331, 0.004616095, 0.492075704, 0.994306816, 1.480843207, 1.983074319, 2.489921526, 2.98199723, 3.491614094, 4.009539929, 4.490537006, 4.999230651, 5.506077858, 6]
            X = [0.322820695, 0.328868415, 0.339073943, 0.349846445, 0.365438223, 0.384431845, 0.408150248, 0.435081502, 0.459744862, 0.475809119, 0.485825656, 0.488282542, 0.489133003, 0.489133003, 0.489605481, 0.487904559, 0.486676116, 0.485069691, 0.485069691, 0.486581621, 0.487432081]

    if l_k*tg_chi > 2.5:
        
        if eta_k <= 2:

            OTN = [-4.015799257, -2.328996283, -2.003717472, -1.550185874, -1.322490706, -0.993494424, -0.676579926, -0.470260223, -0.289033457, -0.081784387, 0.182156134, 0.390334572, 0.579925651, 0.784386617, 0.970260223, 1.209107807, 1.586431227, 2.063197026, 2.590148699, 3.434944238, 4.379182156, 6]
            X = [0.219090478, 0.195594505, 0.191046897, 0.191046897, 0.191994315, 0.198815727, 0.210658456, 0.223638086, 0.242207485, 0.26892468, 0.310421601, 0.339602084, 0.362055898, 0.385362387, 0.404310753, 0.423732828, 0.453481762, 0.475746092, 0.48910469, 0.494883941, 0.496778778, 0.496778778]

        if eta_k > 2 and eta_k <= 4:

            OTN = [-4.015799257, -3.213754647, -2.883828996, -2.449814126, -2.033457249, -1.512081784, -1.165427509, -0.854089219, -0.457249071, 0.102230483, 0.461895911, 0.791821561, 1.07063197, 1.407992565, 1.655204461, 2.020446097, 2.512081784, 2.880111524, 3.931226766, 4.849442379, 6]
            X = [0.299336807, 0.299242065, 0.299336807, 0.303031739, 0.310421601, 0.325675036, 0.337612506, 0.352392231, 0.377309332, 0.418332544, 0.441070583, 0.458597821, 0.470724775, 0.481904311, 0.48910469, 0.497631454, 0.503410706, 0.506442444, 0.510232117, 0.506537186, 0.504358124]

        if eta_k > 4 and eta_k <= 20:

            OTN = [-4.015799257, -3.69330855, -3.078066914, -2.532527881, -1.854089219, -1.244423792, -0.786245353, -0.238847584, 0.132899628, 0.431226766, 0.753717472, 1.07063197, 1.334572491, 1.629182156, 2.350371747, 2.920074349, 3.831784387, 4.75, 5.634758364, 6]
            X = [0.34557082, 0.34557082, 0.352202748, 0.363571767, 0.381477973, 0.404405495, 0.425153955, 0.457650403, 0.475746092, 0.487020369, 0.496684036, 0.50416864, 0.509284699, 0.512790147, 0.516769304, 0.519043108, 0.517243013, 0.511463761, 0.509758408, 0.50881099]

        if eta_k > 20:

            OTN = [-4.015799257, -3.475836431, -2.816914498, -2.171933086, -1.607806691, -1.013011152, -0.506505576, 0.006505576, 0.492565056, 0.953531599, 1.599442379, 2.178438662, 2.676579926, 3.225836431, 3.715613383, 4.123605948, 4.704460967, 5.182156134, 5.684944238, 6]
            X = [0.366224538, 0.371909048, 0.385172904, 0.404500237, 0.424206537, 0.448460445, 0.471293226, 0.49118901, 0.504831833, 0.513074372, 0.520937944, 0.524159166, 0.524159166, 0.522548555, 0.520937944, 0.519043108, 0.515442918, 0.514969209, 0.514969209, 0.516200853]


    if m >= 1:
        return (np.interp((((m**2 - 1)**(1/2))*l_k), OTN, X))
            
    if m < 1:
        return (np.interp(-(((1 - m**2)**(1/2))*l_k), OTN, X))

def Delta_x_F_koef(m, l_c, l_n, L_nos):

    """
    Функция возвращает смещение фокуса $\\Delta x_F$ в долях длины носовой части тела.
    График на рис. 5.7 в ДПБЛА.
    В качестве аргументов принимает:
        1) Число Маха. \n
        2) Удлинение цилиндрической части корпуса. \n
        3) Удлинение носовой части корпуса. \n
        4) Длину носовой части.
    """
        
    if l_c/l_n <= 0.75:

        OTN = [-0.801265156, -0.615709014, -0.517026885, -0.342857143, -0.167000527, -0.039641539, 0.051027939, 0.202424881, 0.322192936, 0.419188192, 0.557090142, 0.700052715, 0.844702161, 0.993990511, 1.164364787, 1.34359515, 1.444807591, 1.54939378, 1.683078545, 1.798207696, 1.919662625, 2.033104902, 2.120400633, 2.190827623, 2.27601476, 2.354032683, 2.4]
        X = [0.049338652, 0.049338652, 0.052907831, 0.063615368, 0.076422423, 0.08891455, 0.09878228, 0.113583876, 0.123136679, 0.129330254, 0.134054168, 0.136468612, 0.13804325, 0.139932815, 0.139932815, 0.140037791, 0.140037791, 0.138253202, 0.13499895, 0.131639723, 0.12765064, 0.123136679, 0.119672475, 0.117258031, 0.114108755, 0.110644552, 0.108754986]
    
    if l_c/l_n > 0.75 and l_c/l_n <= 1.5:

        OTN = [-0.801265156, -0.615709014, -0.517026885, -0.342857143, -0.167000527, -0.039641539, 0.105007907, 0.226884555, 0.316710596, 0.401897733, 0.487084871, 0.558777016, 0.619082762, 0.678545071, 0.769214549, 0.85060622, 0.939167106, 1.014232999, 1.144544017, 1.30985767, 1.491196626, 1.664944649, 1.82266737, 2.002319452, 2.175224038, 2.330416447, 2.4]
        X = [0.049338652, 0.049338652, 0.052907831, 0.063615368, 0.076422423, 0.08891455, 0.110119672, 0.134054168, 0.156099097, 0.178039051, 0.201343691, 0.217929876, 0.2300021, 0.23986983, 0.250472391, 0.25761075, 0.262544615, 0.265378963, 0.268318287, 0.2699979, 0.269263069, 0.26873819, 0.26873819, 0.269263069, 0.2699979, 0.2699979, 0.2699979]

    if l_c/l_n > 1.5 and l_c/l_n <= 2.5:

        OTN = [-0.801265156, -0.615709014, -0.517026885, -0.342857143, -0.167000527, -0.039641539, 0.105007907, 0.226884555, 0.316710596, 0.401897733, 0.490880337, 0.573115445, 0.665050079, 0.762888772, 0.901634159, 1.008750659, 1.096046389, 1.186294149, 1.31829204, 1.432577754, 1.561201898, 1.706273063, 1.840379547, 1.974486031, 2.120822351, 2.235529784, 2.4]
        X = [0.049338652, 0.049338652, 0.052907831, 0.063615368, 0.076422423, 0.08891455, 0.110119672, 0.134054168, 0.156099097, 0.178039051, 0.207642242, 0.236720554, 0.272727273, 0.313247953, 0.367940374, 0.40426202, 0.427251732, 0.447407096, 0.470711736, 0.486878018, 0.501364686, 0.514906571, 0.52582406, 0.53317237, 0.540835608, 0.545244594, 0.548918749]

    if l_c/l_n > 2.5 and l_c/l_n <= 3.5:

        OTN = [-0.801265156, -0.615709014, -0.517026885, -0.342857143, -0.167000527, -0.039641539, 0.105007907, 0.226884555, 0.316710596, 0.401897733, 0.490880337, 0.573115445, 0.665050079, 0.762888772, 0.890669478, 1.012124407, 1.119240907, 1.273589879, 1.389984186, 1.486979441, 1.602108593, 1.776278334, 1.920506062, 2.083711123, 2.249446494, 2.355719557, 2.4]
        X = [0.049338652, 0.049338652, 0.052907831, 0.063615368, 0.076422423, 0.08891455, 0.110119672, 0.134054168, 0.156099097, 0.178039051, 0.207642242, 0.236720554, 0.272727273, 0.313247953, 0.365525929, 0.417593953, 0.457169851, 0.504933865, 0.535796767, 0.55647701, 0.575897544, 0.600671845, 0.617153055, 0.634264119, 0.648015956, 0.658093638, 0.662397649]

    if l_c/l_n > 3.5:

        OTN = [-0.801265156, -0.615709014, -0.517026885, -0.342857143, -0.167000527, -0.039641539, 0.105007907, 0.226884555, 0.316710596, 0.401897733, 0.490880337, 0.573115445, 0.665050079, 0.762888772, 0.890669478, 1.012124407, 1.131892462, 1.210753822, 1.297206115, 1.376910912, 1.466315235, 1.575540327, 1.696151819, 1.836162362, 1.986294149, 2.116183448, 2.26758039, 2.4]
        X = [0.049338652, 0.049338652, 0.052907831, 0.063615368, 0.076422423, 0.08891455, 0.110119672, 0.134054168, 0.156099097, 0.178039051, 0.207642242, 0.236720554, 0.272727273, 0.313247953, 0.365525929, 0.417593953, 0.46630275, 0.496325845, 0.527083771, 0.551753097, 0.57726223, 0.607810204, 0.635628805, 0.662922528, 0.687381902, 0.705647701, 0.724648331, 0.73861012]


    if m >= 1:
        return (np.interp(( ((m**2 - 1)**(1/2)) / l_n), OTN, X))*L_nos
            
    if m < 1:
        return (np.interp((-((1 - m**2)**(1/2)) / l_n), OTN, X))*L_nos

def X_F_i_f(x_b, b_b, x_F, lamb_k, tg_chi, d, l, eta_k, m, L_x):
    
    """
    Фунция возвращает координату точки приложения нормальной силы корпуса, индуцируемой консолями.
    Эта величина используется в определении фокуса несущих поверхностей.
    Стр. 267 - 270 в ДПБЛА. Функцию можно использовать и для крыльев, и для оперения.
    В качестве входных параметров функция требует:
        1) Координата начала бортовой хорды в метрах. \n
        2) Длина бортовой хорды несущей поверхности. \n
        3) Безразмерное положение фокуса изолированных крыльев, определяемой функций X_F_kr. \n
        4) Удлинение консоли несущей поверхности. \n
        5) Тангенс среднего угла стреловидности несущей поверхности. \n
        6) Диаметр корпуса в месте прикрепления несущей поверхности. \n
        7) Полный размах несущей поверхности. \n
        8) Сужение консоли несущей поверхности. \n
        9) Число Маха. \n
        10) Длина хвостовой части (от конца бортовой части до кормового среза). \n
    """

    def f(t):

        return (2/((2*np.pi))**(1/2))*np.exp(-(t**2/2))


    D = d/l
    c = 0
    bb = 0

    if m > 1:
        Ll = (L_x) / ((np.pi/2)*(d*((m**2 - 1)**(1/2))))
        bb = (b_b) / ((np.pi/2)*(d*((m**2 - 1)**(1/2))))
        c = (4 + 1/eta_k) * (1 + 8*D**2)
        x1 = (bb + Ll)*(2*c)**(1/2)
        x2 = Ll*(2*c)**(1/2)
        F1, err = integrate.quad(f, 0, x1)
        F2, err = integrate.quad(f, 0, x2)

    if Ll < 0.7 and m > 1:
        F = 1 - ( ( (np.pi**(1/2)) / (2*bb*(c**(1/2))) ) * (F1 - F2) )
    if Ll >= 0.7 or m <= 1:
        F = 1

    if m <= 1:
        F_1 = 1
    if m > 1:
        F_1 = 1 - (1/(c*bb**2))*(np.exp((-1)*c*Ll**2) - np.exp((-1)*c*(bb + Ll)**2)) + (np.sqrt(np.pi)/(bb*np.sqrt(c)))*F2        

    return x_b + b_b * (x_F + 0.02*lamb_k*tg_chi) * F * F_1